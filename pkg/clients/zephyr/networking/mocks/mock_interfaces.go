// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_zephyr_networking is a generated GoMock package.
package mock_zephyr_networking

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/networking.zephyr.solo.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockMeshGroupClient is a mock of MeshGroupClient interface
type MockMeshGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshGroupClientMockRecorder
}

// MockMeshGroupClientMockRecorder is the mock recorder for MockMeshGroupClient
type MockMeshGroupClientMockRecorder struct {
	mock *MockMeshGroupClient
}

// NewMockMeshGroupClient creates a new mock instance
func NewMockMeshGroupClient(ctrl *gomock.Controller) *MockMeshGroupClient {
	mock := &MockMeshGroupClient{ctrl: ctrl}
	mock.recorder = &MockMeshGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshGroupClient) EXPECT() *MockMeshGroupClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMeshGroupClient) Get(ctx context.Context, name, namespace string) (*v1alpha1.MeshGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.MeshGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMeshGroupClientMockRecorder) Get(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMeshGroupClient)(nil).Get), ctx, name, namespace)
}

// List mocks base method
func (m *MockMeshGroupClient) List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.MeshGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1alpha1.MeshGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMeshGroupClientMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMeshGroupClient)(nil).List), ctx, opts)
}
