// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_zephyr_security is a generated GoMock package.
package mock_zephyr_security

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1"
	types "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1/types"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCertificateSigningRequestClient is a mock of CertificateSigningRequestClient interface
type MockCertificateSigningRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateSigningRequestClientMockRecorder
}

// MockCertificateSigningRequestClientMockRecorder is the mock recorder for MockCertificateSigningRequestClient
type MockCertificateSigningRequestClientMockRecorder struct {
	mock *MockCertificateSigningRequestClient
}

// NewMockCertificateSigningRequestClient creates a new mock instance
func NewMockCertificateSigningRequestClient(ctrl *gomock.Controller) *MockCertificateSigningRequestClient {
	mock := &MockCertificateSigningRequestClient{ctrl: ctrl}
	mock.recorder = &MockCertificateSigningRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateSigningRequestClient) EXPECT() *MockCertificateSigningRequestClientMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockCertificateSigningRequestClient) Update(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCertificateSigningRequestClientMockRecorder) Update(ctx, csr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCertificateSigningRequestClient)(nil).Update), varargs...)
}

// UpdateStatus mocks base method
func (m *MockCertificateSigningRequestClient) UpdateStatus(ctx context.Context, csrStatus *types.MeshGroupCertificateSigningRequestStatus, objMeta *v1.ObjectMeta, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csrStatus, objMeta}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockCertificateSigningRequestClientMockRecorder) UpdateStatus(ctx, csrStatus, objMeta interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csrStatus, objMeta}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCertificateSigningRequestClient)(nil).UpdateStatus), varargs...)
}

// Get mocks base method
func (m *MockCertificateSigningRequestClient) Get(ctx context.Context, name, namespace string) (*v1alpha1.MeshGroupCertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.MeshGroupCertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCertificateSigningRequestClientMockRecorder) Get(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCertificateSigningRequestClient)(nil).Get), ctx, name, namespace)
}

// List mocks base method
func (m *MockCertificateSigningRequestClient) List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.MeshGroupCertificateSigningRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1alpha1.MeshGroupCertificateSigningRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCertificateSigningRequestClientMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificateSigningRequestClient)(nil).List), ctx, opts)
}

// Delete mocks base method
func (m *MockCertificateSigningRequestClient) Delete(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCertificateSigningRequestClientMockRecorder) Delete(ctx, csr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificateSigningRequestClient)(nil).Delete), varargs...)
}
