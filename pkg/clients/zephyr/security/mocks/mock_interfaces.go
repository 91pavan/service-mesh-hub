// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_zephyr_security is a generated GoMock package.
package mock_zephyr_security

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMeshGroupCSRClient is a mock of MeshGroupCSRClient interface
type MockMeshGroupCSRClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshGroupCSRClientMockRecorder
}

// MockMeshGroupCSRClientMockRecorder is the mock recorder for MockMeshGroupCSRClient
type MockMeshGroupCSRClientMockRecorder struct {
	mock *MockMeshGroupCSRClient
}

// NewMockMeshGroupCSRClient creates a new mock instance
func NewMockMeshGroupCSRClient(ctrl *gomock.Controller) *MockMeshGroupCSRClient {
	mock := &MockMeshGroupCSRClient{ctrl: ctrl}
	mock.recorder = &MockMeshGroupCSRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshGroupCSRClient) EXPECT() *MockMeshGroupCSRClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMeshGroupCSRClient) Create(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockMeshGroupCSRClientMockRecorder) Create(ctx, csr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMeshGroupCSRClient)(nil).Create), varargs...)
}

// Update mocks base method
func (m *MockMeshGroupCSRClient) Update(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMeshGroupCSRClientMockRecorder) Update(ctx, csr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMeshGroupCSRClient)(nil).Update), varargs...)
}

// UpdateStatus mocks base method
func (m *MockMeshGroupCSRClient) UpdateStatus(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMeshGroupCSRClientMockRecorder) UpdateStatus(ctx, csr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMeshGroupCSRClient)(nil).UpdateStatus), varargs...)
}

// Get mocks base method
func (m *MockMeshGroupCSRClient) Get(ctx context.Context, name, namespace string) (*v1alpha1.MeshGroupCertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.MeshGroupCertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMeshGroupCSRClientMockRecorder) Get(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMeshGroupCSRClient)(nil).Get), ctx, name, namespace)
}

// List mocks base method
func (m *MockMeshGroupCSRClient) List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.MeshGroupCertificateSigningRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1alpha1.MeshGroupCertificateSigningRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMeshGroupCSRClientMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMeshGroupCSRClient)(nil).List), ctx, opts)
}

// Delete mocks base method
func (m *MockMeshGroupCSRClient) Delete(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, csr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMeshGroupCSRClientMockRecorder) Delete(ctx, csr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, csr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMeshGroupCSRClient)(nil).Delete), varargs...)
}
