// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/core/v1alpha1/service_selector.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Select Kubernetes services
//
//Only one of (labels + namespaces + cluster) or (resource refs) may be provided. If all four are provided, it will be
//considered an error, and the Status of the top level resource will be updated to reflect an IllegalSelection.
//
//Valid:
//1.
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//namespaces:
//- default
//cluster: "cluster-name"
//2.
//selector:
//matcher:
//refs:
//- name: foo
//namespace: bar
//
//Invalid:
//1.
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//namespaces:
//- default
//cluster: "cluster-name"
//refs:
//- name: foo
//namespace: bar
//
//By default labels will select across all namespaces, unless a list of namespaces is provided, in which case
//it will only select from those. An empty list is equal to AllNamespaces.
//
//If no labels are given, and only namespaces, all resources from the namespaces will be selected.
//
//The following selector will select all resources with the following labels in every namespace, in the local cluster:
//
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//
//Whereas the next selector will only select from the specified namespaces (foo, bar), in the local cluster:
//
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//namespaces
//- foo
//- bar
//
//This final selector will select all resources of a given type in the target namespace (foo), in the local cluster:
//
//selector
//matcher:
//namespaces
//- foo
//- bar
//labels:
//hello: world
//
//
type ServiceSelector struct {
	// If specified, select services using either a Matcher or direct reference. If not set, select all Services.
	//
	// Types that are valid to be assigned to ServiceSelectorType:
	//	*ServiceSelector_Matcher_
	//	*ServiceSelector_ServiceRefs_
	ServiceSelectorType  isServiceSelector_ServiceSelectorType `protobuf_oneof:"service_selector_type"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ServiceSelector) Reset()         { *m = ServiceSelector{} }
func (m *ServiceSelector) String() string { return proto.CompactTextString(m) }
func (*ServiceSelector) ProtoMessage()    {}
func (*ServiceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f06c46809ababe4, []int{0}
}
func (m *ServiceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSelector.Unmarshal(m, b)
}
func (m *ServiceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSelector.Marshal(b, m, deterministic)
}
func (m *ServiceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSelector.Merge(m, src)
}
func (m *ServiceSelector) XXX_Size() int {
	return xxx_messageInfo_ServiceSelector.Size(m)
}
func (m *ServiceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSelector proto.InternalMessageInfo

type isServiceSelector_ServiceSelectorType interface {
	isServiceSelector_ServiceSelectorType()
	Equal(interface{}) bool
}

type ServiceSelector_Matcher_ struct {
	Matcher *ServiceSelector_Matcher `protobuf:"bytes,1,opt,name=matcher,proto3,oneof" json:"matcher,omitempty"`
}
type ServiceSelector_ServiceRefs_ struct {
	ServiceRefs *ServiceSelector_ServiceRefs `protobuf:"bytes,2,opt,name=service_refs,json=serviceRefs,proto3,oneof" json:"service_refs,omitempty"`
}

func (*ServiceSelector_Matcher_) isServiceSelector_ServiceSelectorType()     {}
func (*ServiceSelector_ServiceRefs_) isServiceSelector_ServiceSelectorType() {}

func (m *ServiceSelector) GetServiceSelectorType() isServiceSelector_ServiceSelectorType {
	if m != nil {
		return m.ServiceSelectorType
	}
	return nil
}

func (m *ServiceSelector) GetMatcher() *ServiceSelector_Matcher {
	if x, ok := m.GetServiceSelectorType().(*ServiceSelector_Matcher_); ok {
		return x.Matcher
	}
	return nil
}

func (m *ServiceSelector) GetServiceRefs() *ServiceSelector_ServiceRefs {
	if x, ok := m.GetServiceSelectorType().(*ServiceSelector_ServiceRefs_); ok {
		return x.ServiceRefs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServiceSelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServiceSelector_Matcher_)(nil),
		(*ServiceSelector_ServiceRefs_)(nil),
	}
}

type ServiceSelector_Matcher struct {
	// If specified, all labels must exist on k8s Service, else match on any labels.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, match k8s Services if they exist in one of the specified namespaces. If not specified, match on any namespace.
	Namespaces []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// If specified, match k8s Services if they exist in one of the specified clusters. If not specified, match on any cluster.
	Clusters             []string `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceSelector_Matcher) Reset()         { *m = ServiceSelector_Matcher{} }
func (m *ServiceSelector_Matcher) String() string { return proto.CompactTextString(m) }
func (*ServiceSelector_Matcher) ProtoMessage()    {}
func (*ServiceSelector_Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f06c46809ababe4, []int{0, 0}
}
func (m *ServiceSelector_Matcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSelector_Matcher.Unmarshal(m, b)
}
func (m *ServiceSelector_Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSelector_Matcher.Marshal(b, m, deterministic)
}
func (m *ServiceSelector_Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSelector_Matcher.Merge(m, src)
}
func (m *ServiceSelector_Matcher) XXX_Size() int {
	return xxx_messageInfo_ServiceSelector_Matcher.Size(m)
}
func (m *ServiceSelector_Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSelector_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSelector_Matcher proto.InternalMessageInfo

func (m *ServiceSelector_Matcher) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ServiceSelector_Matcher) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *ServiceSelector_Matcher) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ServiceSelector_ServiceRefs struct {
	// Match k8s Services by direct reference.
	Services             []*v1.ClusterObjectRef `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ServiceSelector_ServiceRefs) Reset()         { *m = ServiceSelector_ServiceRefs{} }
func (m *ServiceSelector_ServiceRefs) String() string { return proto.CompactTextString(m) }
func (*ServiceSelector_ServiceRefs) ProtoMessage()    {}
func (*ServiceSelector_ServiceRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f06c46809ababe4, []int{0, 1}
}
func (m *ServiceSelector_ServiceRefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSelector_ServiceRefs.Unmarshal(m, b)
}
func (m *ServiceSelector_ServiceRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSelector_ServiceRefs.Marshal(b, m, deterministic)
}
func (m *ServiceSelector_ServiceRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSelector_ServiceRefs.Merge(m, src)
}
func (m *ServiceSelector_ServiceRefs) XXX_Size() int {
	return xxx_messageInfo_ServiceSelector_ServiceRefs.Size(m)
}
func (m *ServiceSelector_ServiceRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSelector_ServiceRefs.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSelector_ServiceRefs proto.InternalMessageInfo

func (m *ServiceSelector_ServiceRefs) GetServices() []*v1.ClusterObjectRef {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceSelector)(nil), "core.smh.solo.io.ServiceSelector")
	proto.RegisterType((*ServiceSelector_Matcher)(nil), "core.smh.solo.io.ServiceSelector.Matcher")
	proto.RegisterMapType((map[string]string)(nil), "core.smh.solo.io.ServiceSelector.Matcher.LabelsEntry")
	proto.RegisterType((*ServiceSelector_ServiceRefs)(nil), "core.smh.solo.io.ServiceSelector.ServiceRefs")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/core/v1alpha1/service_selector.proto", fileDescriptor_4f06c46809ababe4)
}

var fileDescriptor_4f06c46809ababe4 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6b, 0xdc, 0x30,
	0x10, 0x8d, 0x63, 0x9a, 0x64, 0xe5, 0x42, 0x83, 0x48, 0xe9, 0xe2, 0xc3, 0x12, 0xda, 0xcb, 0xf6,
	0xb0, 0x12, 0x71, 0x29, 0xb4, 0xbd, 0x14, 0x52, 0x16, 0x02, 0x4d, 0x5a, 0x50, 0x6e, 0xbd, 0x04,
	0x59, 0x8c, 0x3f, 0x6a, 0x39, 0x12, 0x92, 0xec, 0xb2, 0xff, 0xa8, 0xff, 0xa6, 0xff, 0xa1, 0x97,
	0xfe, 0x8d, 0x62, 0xf9, 0xa3, 0x66, 0x29, 0x24, 0x27, 0xcf, 0x58, 0xf3, 0xde, 0xbc, 0x37, 0x3c,
	0x74, 0x9d, 0x97, 0xae, 0x68, 0x52, 0x22, 0x54, 0x4d, 0xad, 0x92, 0x6a, 0x53, 0x2a, 0x6a, 0xc1,
	0xb4, 0xa5, 0x80, 0x4d, 0x0d, 0xb6, 0xd8, 0x14, 0x4d, 0x4a, 0xb9, 0x2e, 0xa9, 0x50, 0x06, 0x68,
	0x7b, 0xc1, 0xa5, 0x2e, 0xf8, 0xc5, 0x38, 0x72, 0x67, 0x41, 0x82, 0x70, 0xca, 0x10, 0x6d, 0x94,
	0x53, 0xf8, 0xb4, 0x9b, 0x22, 0xb6, 0x2e, 0x48, 0xc7, 0x45, 0x4a, 0x15, 0xaf, 0x72, 0xa5, 0x72,
	0x09, 0xd4, 0xbf, 0xa7, 0x4d, 0x46, 0x7f, 0x18, 0xae, 0x35, 0x18, 0xdb, 0x23, 0x62, 0xf2, 0xbf,
	0xfd, 0x55, 0x9b, 0xcc, 0x77, 0xfa, 0xef, 0x30, 0x7f, 0x96, 0xab, 0x5c, 0xf9, 0x92, 0x76, 0x55,
	0xff, 0xf7, 0xe5, 0x9f, 0x10, 0x3d, 0xbb, 0xed, 0x25, 0xdd, 0x0e, 0x8a, 0xf0, 0x16, 0x1d, 0xd7,
	0xdc, 0x89, 0x02, 0xcc, 0x32, 0x38, 0x0f, 0xd6, 0x51, 0xf2, 0x9a, 0xec, 0xab, 0x23, 0x7b, 0x18,
	0x72, 0xd3, 0x03, 0xae, 0x0e, 0xd8, 0x88, 0xc5, 0x0c, 0x3d, 0x1d, 0xcd, 0x1a, 0xc8, 0xec, 0xf2,
	0xd0, 0x73, 0x6d, 0x1e, 0xe6, 0x1a, 0x7a, 0x06, 0x99, 0xbd, 0x3a, 0x60, 0x91, 0xfd, 0xd7, 0xc6,
	0xbf, 0x02, 0x74, 0x3c, 0xac, 0xc2, 0x37, 0xe8, 0x48, 0xf2, 0x14, 0xa4, 0x5d, 0x06, 0xe7, 0xe1,
	0x3a, 0x4a, 0xde, 0x3e, 0x5a, 0x25, 0xb9, 0xf6, 0xb8, 0xed, 0xbd, 0x33, 0x3b, 0x36, 0x90, 0xe0,
	0x15, 0x42, 0xf7, 0xbc, 0x06, 0xab, 0xb9, 0x80, 0x4e, 0x6c, 0xb8, 0x5e, 0xb0, 0xd9, 0x1f, 0x1c,
	0xa3, 0x13, 0x21, 0x1b, 0xeb, 0xc0, 0xd8, 0x65, 0xe8, 0x5f, 0xa7, 0x3e, 0x7e, 0x8f, 0xa2, 0x19,
	0x25, 0x3e, 0x45, 0x61, 0x05, 0x3b, 0x7f, 0xbc, 0x05, 0xeb, 0x4a, 0x7c, 0x86, 0x9e, 0xb4, 0x5c,
	0x36, 0xe0, 0x8f, 0xb0, 0x60, 0x7d, 0xf3, 0xe1, 0xf0, 0x5d, 0x10, 0x7f, 0x41, 0xd1, 0xcc, 0x2f,
	0xfe, 0x88, 0x4e, 0x06, 0xbf, 0xa3, 0xad, 0x57, 0x83, 0xad, 0xaa, 0x4d, 0x26, 0x5f, 0x9f, 0xfa,
	0xc5, 0x5f, 0xd3, 0xef, 0x20, 0x1c, 0x83, 0x8c, 0x4d, 0xa0, 0xcb, 0x17, 0xe8, 0xf9, 0x7e, 0xc4,
	0xee, 0xdc, 0x4e, 0xc3, 0xe5, 0xe7, 0x9f, 0xbf, 0x57, 0xc1, 0xb7, 0xed, 0x63, 0x52, 0xab, 0xab,
	0x7c, 0x4a, 0xd1, 0xfc, 0x9e, 0x53, 0x8a, 0xd3, 0x23, 0x9f, 0x9e, 0x37, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x21, 0x5b, 0x4d, 0xba, 0x05, 0x03, 0x00, 0x00,
}

func (this *ServiceSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector)
	if !ok {
		that2, ok := that.(ServiceSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceSelectorType == nil {
		if this.ServiceSelectorType != nil {
			return false
		}
	} else if this.ServiceSelectorType == nil {
		return false
	} else if !this.ServiceSelectorType.Equal(that1.ServiceSelectorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSelector_Matcher_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector_Matcher_)
	if !ok {
		that2, ok := that.(ServiceSelector_Matcher_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Matcher.Equal(that1.Matcher) {
		return false
	}
	return true
}
func (this *ServiceSelector_ServiceRefs_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector_ServiceRefs_)
	if !ok {
		that2, ok := that.(ServiceSelector_ServiceRefs_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceRefs.Equal(that1.ServiceRefs) {
		return false
	}
	return true
}
func (this *ServiceSelector_Matcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector_Matcher)
	if !ok {
		that2, ok := that.(ServiceSelector_Matcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if this.Clusters[i] != that1.Clusters[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSelector_ServiceRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector_ServiceRefs)
	if !ok {
		that2, ok := that.(ServiceSelector_ServiceRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
