// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/networking/v1alpha1/selectors.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Select Kubernetes services
//
//Only one of (labels + namespaces + cluster) or (resource refs) may be provided. If all four are provided, it will be
//considered an error, and the Status of the top level resource will be updated to reflect an IllegalSelection.
//
//Valid:
//1.
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//namespaces:
//- default
//cluster: "cluster-name"
//2.
//selector:
//matcher:
//refs:
//- name: foo
//namespace: bar
//
//Invalid:
//1.
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//namespaces:
//- default
//cluster: "cluster-name"
//refs:
//- name: foo
//namespace: bar
//
//By default labels will select across all namespaces, unless a list of namespaces is provided, in which case
//it will only select from those. An empty list is equal to AllNamespaces.
//
//If no labels are given, and only namespaces, all resources from the namespaces will be selected.
//
//The following selector will select all resources with the following labels in every namespace, in the local cluster:
//
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//
//Whereas the next selector will only select from the specified namespaces (foo, bar), in the local cluster:
//
//selector:
//matcher:
//labels:
//foo: bar
//hello: world
//namespaces
//- foo
//- bar
//
//This final selector will select all resources of a given type in the target namespace (foo), in the local cluster:
//
//selector
//matcher:
//namespaces
//- foo
//- bar
//labels:
//hello: world
//
//
type ServiceSelector struct {
	// a KubeServiceMatcher matches kubernetes services by the namespaces and clusters they belong to, as well
	// as the provided labels.
	KubeServiceMatcher *ServiceSelector_KubeServiceMatcher `protobuf:"bytes,1,opt,name=kube_service_matcher,json=kubeServiceMatcher,proto3" json:"kube_service_matcher,omitempty"`
	// Match individual k8s Services by direct reference.
	KubeServiceRefs      *ServiceSelector_KubeServiceRefs `protobuf:"bytes,2,opt,name=kube_service_refs,json=kubeServiceRefs,proto3" json:"kube_service_refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ServiceSelector) Reset()         { *m = ServiceSelector{} }
func (m *ServiceSelector) String() string { return proto.CompactTextString(m) }
func (*ServiceSelector) ProtoMessage()    {}
func (*ServiceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{0}
}
func (m *ServiceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSelector.Unmarshal(m, b)
}
func (m *ServiceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSelector.Marshal(b, m, deterministic)
}
func (m *ServiceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSelector.Merge(m, src)
}
func (m *ServiceSelector) XXX_Size() int {
	return xxx_messageInfo_ServiceSelector.Size(m)
}
func (m *ServiceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSelector proto.InternalMessageInfo

func (m *ServiceSelector) GetKubeServiceMatcher() *ServiceSelector_KubeServiceMatcher {
	if m != nil {
		return m.KubeServiceMatcher
	}
	return nil
}

func (m *ServiceSelector) GetKubeServiceRefs() *ServiceSelector_KubeServiceRefs {
	if m != nil {
		return m.KubeServiceRefs
	}
	return nil
}

type ServiceSelector_KubeServiceMatcher struct {
	// If specified, all labels must exist on k8s Service, else match on any labels.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, match k8s Services if they exist in one of the specified namespaces. If not specified, match on any namespace.
	Namespaces []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// If specified, match k8s Services if they exist in one of the specified clusters. If not specified, match on any cluster.
	Clusters             []string `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceSelector_KubeServiceMatcher) Reset()         { *m = ServiceSelector_KubeServiceMatcher{} }
func (m *ServiceSelector_KubeServiceMatcher) String() string { return proto.CompactTextString(m) }
func (*ServiceSelector_KubeServiceMatcher) ProtoMessage()    {}
func (*ServiceSelector_KubeServiceMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{0, 0}
}
func (m *ServiceSelector_KubeServiceMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSelector_KubeServiceMatcher.Unmarshal(m, b)
}
func (m *ServiceSelector_KubeServiceMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSelector_KubeServiceMatcher.Marshal(b, m, deterministic)
}
func (m *ServiceSelector_KubeServiceMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSelector_KubeServiceMatcher.Merge(m, src)
}
func (m *ServiceSelector_KubeServiceMatcher) XXX_Size() int {
	return xxx_messageInfo_ServiceSelector_KubeServiceMatcher.Size(m)
}
func (m *ServiceSelector_KubeServiceMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSelector_KubeServiceMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSelector_KubeServiceMatcher proto.InternalMessageInfo

func (m *ServiceSelector_KubeServiceMatcher) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ServiceSelector_KubeServiceMatcher) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *ServiceSelector_KubeServiceMatcher) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ServiceSelector_KubeServiceRefs struct {
	// Match k8s Services by direct reference.
	Services             []*v1.ClusterObjectRef `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ServiceSelector_KubeServiceRefs) Reset()         { *m = ServiceSelector_KubeServiceRefs{} }
func (m *ServiceSelector_KubeServiceRefs) String() string { return proto.CompactTextString(m) }
func (*ServiceSelector_KubeServiceRefs) ProtoMessage()    {}
func (*ServiceSelector_KubeServiceRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{0, 1}
}
func (m *ServiceSelector_KubeServiceRefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSelector_KubeServiceRefs.Unmarshal(m, b)
}
func (m *ServiceSelector_KubeServiceRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSelector_KubeServiceRefs.Marshal(b, m, deterministic)
}
func (m *ServiceSelector_KubeServiceRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSelector_KubeServiceRefs.Merge(m, src)
}
func (m *ServiceSelector_KubeServiceRefs) XXX_Size() int {
	return xxx_messageInfo_ServiceSelector_KubeServiceRefs.Size(m)
}
func (m *ServiceSelector_KubeServiceRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSelector_KubeServiceRefs.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSelector_KubeServiceRefs proto.InternalMessageInfo

func (m *ServiceSelector_KubeServiceRefs) GetServices() []*v1.ClusterObjectRef {
	if m != nil {
		return m.Services
	}
	return nil
}

//
//Select Kubernetes workloads directly using label and/or namespace criteria. See comments on the fields for
//detailed semantics.
type WorkloadSelector struct {
	// If specified, all labels must exist on workloads, else match on any labels.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, match workloads if they exist in one of the specified namespaces. If not specified, match on any namespace.
	Namespaces           []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadSelector) Reset()         { *m = WorkloadSelector{} }
func (m *WorkloadSelector) String() string { return proto.CompactTextString(m) }
func (*WorkloadSelector) ProtoMessage()    {}
func (*WorkloadSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{1}
}
func (m *WorkloadSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSelector.Unmarshal(m, b)
}
func (m *WorkloadSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSelector.Marshal(b, m, deterministic)
}
func (m *WorkloadSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSelector.Merge(m, src)
}
func (m *WorkloadSelector) XXX_Size() int {
	return xxx_messageInfo_WorkloadSelector.Size(m)
}
func (m *WorkloadSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSelector.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSelector proto.InternalMessageInfo

func (m *WorkloadSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *WorkloadSelector) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

//
//Selector capable of selecting specific service identities. Useful for binding policy rules.
//Either (namespaces, cluster, service_account_names) or service_accounts can be specified.
//If all fields are omitted, any source identity is permitted.
type IdentitySelector struct {
	// Types that are valid to be assigned to IdentitySelectorType:
	//	*IdentitySelector_Matcher_
	//	*IdentitySelector_ServiceAccountRefs_
	IdentitySelectorType isIdentitySelector_IdentitySelectorType `protobuf_oneof:"identity_selector_type"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *IdentitySelector) Reset()         { *m = IdentitySelector{} }
func (m *IdentitySelector) String() string { return proto.CompactTextString(m) }
func (*IdentitySelector) ProtoMessage()    {}
func (*IdentitySelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{2}
}
func (m *IdentitySelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentitySelector.Unmarshal(m, b)
}
func (m *IdentitySelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentitySelector.Marshal(b, m, deterministic)
}
func (m *IdentitySelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentitySelector.Merge(m, src)
}
func (m *IdentitySelector) XXX_Size() int {
	return xxx_messageInfo_IdentitySelector.Size(m)
}
func (m *IdentitySelector) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentitySelector.DiscardUnknown(m)
}

var xxx_messageInfo_IdentitySelector proto.InternalMessageInfo

type isIdentitySelector_IdentitySelectorType interface {
	isIdentitySelector_IdentitySelectorType()
	Equal(interface{}) bool
}

type IdentitySelector_Matcher_ struct {
	Matcher *IdentitySelector_Matcher `protobuf:"bytes,1,opt,name=matcher,proto3,oneof" json:"matcher,omitempty"`
}
type IdentitySelector_ServiceAccountRefs_ struct {
	ServiceAccountRefs *IdentitySelector_ServiceAccountRefs `protobuf:"bytes,2,opt,name=service_account_refs,json=serviceAccountRefs,proto3,oneof" json:"service_account_refs,omitempty"`
}

func (*IdentitySelector_Matcher_) isIdentitySelector_IdentitySelectorType()            {}
func (*IdentitySelector_ServiceAccountRefs_) isIdentitySelector_IdentitySelectorType() {}

func (m *IdentitySelector) GetIdentitySelectorType() isIdentitySelector_IdentitySelectorType {
	if m != nil {
		return m.IdentitySelectorType
	}
	return nil
}

func (m *IdentitySelector) GetMatcher() *IdentitySelector_Matcher {
	if x, ok := m.GetIdentitySelectorType().(*IdentitySelector_Matcher_); ok {
		return x.Matcher
	}
	return nil
}

func (m *IdentitySelector) GetServiceAccountRefs() *IdentitySelector_ServiceAccountRefs {
	if x, ok := m.GetIdentitySelectorType().(*IdentitySelector_ServiceAccountRefs_); ok {
		return x.ServiceAccountRefs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IdentitySelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IdentitySelector_Matcher_)(nil),
		(*IdentitySelector_ServiceAccountRefs_)(nil),
	}
}

type IdentitySelector_Matcher struct {
	// Namespaces to allow. If not set, any namespace is allowed.
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Cluster to allow. If not set, any cluster is allowed.
	Clusters             []string `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentitySelector_Matcher) Reset()         { *m = IdentitySelector_Matcher{} }
func (m *IdentitySelector_Matcher) String() string { return proto.CompactTextString(m) }
func (*IdentitySelector_Matcher) ProtoMessage()    {}
func (*IdentitySelector_Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{2, 0}
}
func (m *IdentitySelector_Matcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentitySelector_Matcher.Unmarshal(m, b)
}
func (m *IdentitySelector_Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentitySelector_Matcher.Marshal(b, m, deterministic)
}
func (m *IdentitySelector_Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentitySelector_Matcher.Merge(m, src)
}
func (m *IdentitySelector_Matcher) XXX_Size() int {
	return xxx_messageInfo_IdentitySelector_Matcher.Size(m)
}
func (m *IdentitySelector_Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentitySelector_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_IdentitySelector_Matcher proto.InternalMessageInfo

func (m *IdentitySelector_Matcher) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *IdentitySelector_Matcher) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type IdentitySelector_ServiceAccountRefs struct {
	// List of ServiceAccounts to allow. If not set, any ServiceAccount is allowed.
	ServiceAccounts      []*v1.ClusterObjectRef `protobuf:"bytes,1,rep,name=service_accounts,json=serviceAccounts,proto3" json:"service_accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *IdentitySelector_ServiceAccountRefs) Reset()         { *m = IdentitySelector_ServiceAccountRefs{} }
func (m *IdentitySelector_ServiceAccountRefs) String() string { return proto.CompactTextString(m) }
func (*IdentitySelector_ServiceAccountRefs) ProtoMessage()    {}
func (*IdentitySelector_ServiceAccountRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_817c760a32606058, []int{2, 1}
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Unmarshal(m, b)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Marshal(b, m, deterministic)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Merge(m, src)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Size() int {
	return xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Size(m)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentitySelector_ServiceAccountRefs.DiscardUnknown(m)
}

var xxx_messageInfo_IdentitySelector_ServiceAccountRefs proto.InternalMessageInfo

func (m *IdentitySelector_ServiceAccountRefs) GetServiceAccounts() []*v1.ClusterObjectRef {
	if m != nil {
		return m.ServiceAccounts
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceSelector)(nil), "networking.smh.solo.io.ServiceSelector")
	proto.RegisterType((*ServiceSelector_KubeServiceMatcher)(nil), "networking.smh.solo.io.ServiceSelector.KubeServiceMatcher")
	proto.RegisterMapType((map[string]string)(nil), "networking.smh.solo.io.ServiceSelector.KubeServiceMatcher.LabelsEntry")
	proto.RegisterType((*ServiceSelector_KubeServiceRefs)(nil), "networking.smh.solo.io.ServiceSelector.KubeServiceRefs")
	proto.RegisterType((*WorkloadSelector)(nil), "networking.smh.solo.io.WorkloadSelector")
	proto.RegisterMapType((map[string]string)(nil), "networking.smh.solo.io.WorkloadSelector.LabelsEntry")
	proto.RegisterType((*IdentitySelector)(nil), "networking.smh.solo.io.IdentitySelector")
	proto.RegisterType((*IdentitySelector_Matcher)(nil), "networking.smh.solo.io.IdentitySelector.Matcher")
	proto.RegisterType((*IdentitySelector_ServiceAccountRefs)(nil), "networking.smh.solo.io.IdentitySelector.ServiceAccountRefs")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/networking/v1alpha1/selectors.proto", fileDescriptor_817c760a32606058)
}

var fileDescriptor_817c760a32606058 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xae, 0x93, 0xff, 0x6f, 0x9b, 0xcd, 0x21, 0x61, 0x15, 0x55, 0x91, 0x0f, 0x51, 0x15, 0x2e,
	0xb9, 0x64, 0x4d, 0x02, 0x12, 0x50, 0x0e, 0x88, 0xa2, 0xa2, 0xa2, 0x16, 0x10, 0xdb, 0x03, 0x12,
	0x07, 0xa2, 0xf5, 0x66, 0x62, 0x1b, 0x3b, 0x5e, 0x6b, 0x77, 0x9d, 0x2a, 0x6f, 0xc2, 0x13, 0x20,
	0xde, 0x81, 0xb7, 0xe1, 0xca, 0x4b, 0x20, 0xaf, 0xed, 0x90, 0x38, 0x2d, 0x2a, 0xe1, 0xe4, 0xdd,
	0xf1, 0xce, 0x37, 0xdf, 0x7c, 0xf3, 0x69, 0xd0, 0x85, 0x17, 0x68, 0x3f, 0x75, 0x09, 0x17, 0x73,
	0x47, 0x89, 0x48, 0x0c, 0x03, 0xe1, 0x28, 0x90, 0x8b, 0x80, 0xc3, 0x70, 0x0e, 0xca, 0x1f, 0xfa,
	0xa9, 0xeb, 0xb0, 0x24, 0x70, 0x62, 0xd0, 0xd7, 0x42, 0x86, 0x41, 0xec, 0x39, 0x8b, 0x11, 0x8b,
	0x12, 0x9f, 0x8d, 0x1c, 0x05, 0x11, 0x70, 0x2d, 0xa4, 0x22, 0x89, 0x14, 0x5a, 0xe0, 0xa3, 0xdf,
	0x8f, 0x88, 0x9a, 0xfb, 0x24, 0x03, 0x24, 0x81, 0xb0, 0x7b, 0x9e, 0x10, 0x5e, 0x04, 0x8e, 0x79,
	0xe5, 0xa6, 0x33, 0xe7, 0x5a, 0xb2, 0x24, 0x81, 0x32, 0xcf, 0x26, 0x37, 0x91, 0x08, 0x17, 0x63,
	0x53, 0x98, 0x0b, 0x09, 0xce, 0x62, 0x64, 0xbe, 0xc5, 0xfb, 0x8e, 0x27, 0x3c, 0x61, 0x8e, 0x4e,
	0x76, 0xca, 0xa3, 0xfd, 0xaf, 0xff, 0xa1, 0xd6, 0x55, 0x4e, 0xfd, 0xaa, 0x20, 0x86, 0x23, 0xd4,
	0x09, 0x53, 0x17, 0x26, 0x45, 0x4b, 0x93, 0x39, 0xd3, 0xdc, 0x07, 0xd9, 0xb5, 0x8e, 0xad, 0x41,
	0x73, 0x7c, 0x42, 0x6e, 0x26, 0x4c, 0x2a, 0x30, 0xe4, 0x22, 0x75, 0xa1, 0x88, 0xbd, 0xc9, 0x11,
	0x28, 0x0e, 0xb7, 0x62, 0x98, 0xa3, 0x7b, 0x1b, 0xd5, 0x24, 0xcc, 0x54, 0xb7, 0x66, 0x4a, 0x3d,
	0xde, 0xa1, 0x14, 0x85, 0x99, 0xa2, 0xad, 0x70, 0x33, 0x60, 0xff, 0xb4, 0x10, 0xde, 0xe6, 0x83,
	0x3f, 0xa1, 0xfd, 0x88, 0xb9, 0x10, 0xa9, 0xae, 0x75, 0x5c, 0x1f, 0x34, 0xc7, 0xaf, 0x76, 0xef,
	0x8d, 0x5c, 0x1a, 0xa0, 0xb3, 0x58, 0xcb, 0x25, 0x2d, 0x50, 0x71, 0x0f, 0xa1, 0x98, 0xcd, 0x41,
	0x25, 0x8c, 0x43, 0xd6, 0x54, 0x7d, 0xd0, 0xa0, 0x6b, 0x11, 0x6c, 0xa3, 0x43, 0x1e, 0xa5, 0x4a,
	0x83, 0x54, 0xdd, 0xba, 0xf9, 0xbb, 0xba, 0xdb, 0x4f, 0x51, 0x73, 0x0d, 0x12, 0xb7, 0x51, 0x3d,
	0x84, 0xa5, 0x99, 0x41, 0x83, 0x66, 0x47, 0xdc, 0x41, 0xff, 0x2f, 0x58, 0x94, 0x82, 0x11, 0xab,
	0x41, 0xf3, 0xcb, 0x49, 0xed, 0x89, 0x65, 0x53, 0xd4, 0xaa, 0x28, 0x82, 0x9f, 0xa3, 0xc3, 0x42,
	0xe0, 0xb2, 0xd7, 0xfb, 0xc4, 0x98, 0x23, 0xb3, 0xcc, 0xaa, 0xcd, 0x97, 0x79, 0xf1, 0x77, 0xee,
	0x67, 0xe0, 0x9a, 0xc2, 0x8c, 0xae, 0x92, 0xfa, 0xdf, 0x2d, 0xd4, 0xfe, 0x20, 0x64, 0x18, 0x09,
	0x36, 0x5d, 0x39, 0xe5, 0xb2, 0xa2, 0xdf, 0xa3, 0xdb, 0xf4, 0xab, 0x66, 0xee, 0xa2, 0xd6, 0x3f,
	0x28, 0xd2, 0xff, 0x52, 0x47, 0xed, 0xd7, 0x53, 0x88, 0x75, 0xa0, 0x97, 0x6b, 0xec, 0x0f, 0x36,
	0xad, 0xfd, 0xe0, 0x36, 0xfa, 0xd5, 0x54, 0x52, 0x0c, 0xfd, 0x7c, 0x8f, 0x96, 0x10, 0x58, 0xa0,
	0x4e, 0x69, 0x61, 0xc6, 0xb9, 0x48, 0x63, 0xbd, 0x6e, 0xe5, 0x67, 0x77, 0x86, 0x2e, 0xa6, 0xf6,
	0x22, 0xc7, 0xc8, 0x86, 0x77, 0xbe, 0x47, 0xb1, 0xda, 0x8a, 0xda, 0x67, 0xe8, 0xa0, 0xf4, 0xf1,
	0xa6, 0x72, 0xd6, 0x1f, 0x7d, 0x56, 0xab, 0xf8, 0x6c, 0x8a, 0xf0, 0x76, 0x49, 0xfc, 0x16, 0xb5,
	0x2b, 0xdd, 0xfc, 0x95, 0x6f, 0x5a, 0x9b, 0x7c, 0xd5, 0x69, 0x17, 0x1d, 0x05, 0x45, 0xa7, 0x93,
	0x72, 0x03, 0x4e, 0xf4, 0x32, 0x81, 0xd3, 0xf7, 0xdf, 0x7e, 0xf4, 0xac, 0x8f, 0x77, 0x5a, 0xa9,
	0x49, 0xe8, 0x55, 0xd6, 0xea, 0xba, 0x94, 0xab, 0x15, 0xeb, 0xee, 0x9b, 0xdd, 0xf6, 0xf0, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xfa, 0xc7, 0xb5, 0xa8, 0x05, 0x00, 0x00,
}

func (this *ServiceSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector)
	if !ok {
		that2, ok := that.(ServiceSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeServiceMatcher.Equal(that1.KubeServiceMatcher) {
		return false
	}
	if !this.KubeServiceRefs.Equal(that1.KubeServiceRefs) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSelector_KubeServiceMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector_KubeServiceMatcher)
	if !ok {
		that2, ok := that.(ServiceSelector_KubeServiceMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if this.Clusters[i] != that1.Clusters[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSelector_KubeServiceRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSelector_KubeServiceRefs)
	if !ok {
		that2, ok := that.(ServiceSelector_KubeServiceRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WorkloadSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSelector)
	if !ok {
		that2, ok := that.(WorkloadSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentitySelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector)
	if !ok {
		that2, ok := that.(IdentitySelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IdentitySelectorType == nil {
		if this.IdentitySelectorType != nil {
			return false
		}
	} else if this.IdentitySelectorType == nil {
		return false
	} else if !this.IdentitySelectorType.Equal(that1.IdentitySelectorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentitySelector_Matcher_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_Matcher_)
	if !ok {
		that2, ok := that.(IdentitySelector_Matcher_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Matcher.Equal(that1.Matcher) {
		return false
	}
	return true
}
func (this *IdentitySelector_ServiceAccountRefs_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_ServiceAccountRefs_)
	if !ok {
		that2, ok := that.(IdentitySelector_ServiceAccountRefs_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceAccountRefs.Equal(that1.ServiceAccountRefs) {
		return false
	}
	return true
}
func (this *IdentitySelector_Matcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_Matcher)
	if !ok {
		that2, ok := that.(IdentitySelector_Matcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if this.Clusters[i] != that1.Clusters[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentitySelector_ServiceAccountRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_ServiceAccountRefs)
	if !ok {
		that2, ok := that.(IdentitySelector_ServiceAccountRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServiceAccounts) != len(that1.ServiceAccounts) {
		return false
	}
	for i := range this.ServiceAccounts {
		if !this.ServiceAccounts[i].Equal(that1.ServiceAccounts[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
