// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/networking/v1alpha1/access_control_policy.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/solo-io/service-mesh-hub/pkg/api/core.smh.solo.io/v1alpha1/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//access control policies apply ALLOW policies to communication in a mesh
//access control policies specify the following:
//ALLOW those requests:
//- originating from from **source pods**
//- sent to **destination pods**
//- matching the indicated request criteria (allowed_paths, allowed_methods, allowed_ports)
//if no access control policies are present, all traffic in the mesh will be set to ALLOW
type AccessControlPolicySpec struct {
	//
	//requests originating from these pods will have the rule applied
	//leave empty to have all pods in the mesh apply these policies
	//
	//note that access control policies are mapped to source pods by their
	//service account. if other pods share the same service account,
	//this access control rule will apply to those pods as well.
	//
	//for fine-grained access control policies, ensure that your
	//service accounts properly reflect the desired
	//boundary for your access control policies
	SourceSelector *types.IdentitySelector `protobuf:"bytes,2,opt,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	//
	//requests destined for these pods will have the rule applied
	//leave empty to apply to all destination pods in the mesh
	DestinationSelector *types.ServiceSelector `protobuf:"bytes,3,opt,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	//
	//Optional. A list of HTTP paths or gRPC methods to allow.
	//gRPC methods must be presented as fully-qualified name in the form of
	//"/packageName.serviceName/methodName" and are case sensitive.
	//Exact match, prefix match, and suffix match are supported for paths.
	//For example, the path "/books/review" matches
	//"/books/review" (exact match), "*books/" (suffix match), or "/books*" (prefix match),
	//
	//If not specified, it allows to any path.
	AllowedPaths []string `protobuf:"bytes,4,rep,name=allowed_paths,json=allowedPaths,proto3" json:"allowed_paths,omitempty"`
	//
	//Optional. A list of HTTP methods to allow (e.g., "GET", "POST").
	//It is ignored in gRPC case because the value is always "POST".
	//If not specified, allows any method.
	AllowedMethods []types.HttpMethodValue `protobuf:"varint,5,rep,packed,name=allowed_methods,json=allowedMethods,proto3,enum=core.smh.solo.io.HttpMethodValue" json:"allowed_methods,omitempty"`
	//
	//Optional. A list of ports which to allow
	//if not set any port is allowed
	AllowedPorts         []uint32 `protobuf:"varint,6,rep,packed,name=allowed_ports,json=allowedPorts,proto3" json:"allowed_ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessControlPolicySpec) Reset()         { *m = AccessControlPolicySpec{} }
func (m *AccessControlPolicySpec) String() string { return proto.CompactTextString(m) }
func (*AccessControlPolicySpec) ProtoMessage()    {}
func (*AccessControlPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a861920f3be7f6, []int{0}
}
func (m *AccessControlPolicySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlPolicySpec.Unmarshal(m, b)
}
func (m *AccessControlPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlPolicySpec.Marshal(b, m, deterministic)
}
func (m *AccessControlPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlPolicySpec.Merge(m, src)
}
func (m *AccessControlPolicySpec) XXX_Size() int {
	return xxx_messageInfo_AccessControlPolicySpec.Size(m)
}
func (m *AccessControlPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlPolicySpec proto.InternalMessageInfo

func (m *AccessControlPolicySpec) GetSourceSelector() *types.IdentitySelector {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *AccessControlPolicySpec) GetDestinationSelector() *types.ServiceSelector {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *AccessControlPolicySpec) GetAllowedPaths() []string {
	if m != nil {
		return m.AllowedPaths
	}
	return nil
}

func (m *AccessControlPolicySpec) GetAllowedMethods() []types.HttpMethodValue {
	if m != nil {
		return m.AllowedMethods
	}
	return nil
}

func (m *AccessControlPolicySpec) GetAllowedPorts() []uint32 {
	if m != nil {
		return m.AllowedPorts
	}
	return nil
}

type AccessControlPolicyStatus struct {
	// The status reported by the process translating this resource into mesh-specific resource(s).
	TranslationStatus *types.Status `protobuf:"bytes,1,opt,name=translation_status,json=translationStatus,proto3" json:"translation_status,omitempty"`
	// More detailed errors than the base status provided by `translation_status`.
	TranslatorErrors     []*AccessControlPolicyStatus_TranslatorError `protobuf:"bytes,2,rep,name=translator_errors,json=translatorErrors,proto3" json:"translator_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *AccessControlPolicyStatus) Reset()         { *m = AccessControlPolicyStatus{} }
func (m *AccessControlPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*AccessControlPolicyStatus) ProtoMessage()    {}
func (*AccessControlPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a861920f3be7f6, []int{1}
}
func (m *AccessControlPolicyStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlPolicyStatus.Unmarshal(m, b)
}
func (m *AccessControlPolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlPolicyStatus.Marshal(b, m, deterministic)
}
func (m *AccessControlPolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlPolicyStatus.Merge(m, src)
}
func (m *AccessControlPolicyStatus) XXX_Size() int {
	return xxx_messageInfo_AccessControlPolicyStatus.Size(m)
}
func (m *AccessControlPolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlPolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlPolicyStatus proto.InternalMessageInfo

func (m *AccessControlPolicyStatus) GetTranslationStatus() *types.Status {
	if m != nil {
		return m.TranslationStatus
	}
	return nil
}

func (m *AccessControlPolicyStatus) GetTranslatorErrors() []*AccessControlPolicyStatus_TranslatorError {
	if m != nil {
		return m.TranslatorErrors
	}
	return nil
}

// TODO use a shared Status message with TrafficPolicy once autopilot allows for it
type AccessControlPolicyStatus_TranslatorError struct {
	// ID representing a translator that translates TrafficPolicy to Mesh-specific config
	TranslatorId         string   `protobuf:"bytes,1,opt,name=translator_id,json=translatorId,proto3" json:"translator_id,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessControlPolicyStatus_TranslatorError) Reset() {
	*m = AccessControlPolicyStatus_TranslatorError{}
}
func (m *AccessControlPolicyStatus_TranslatorError) String() string {
	return proto.CompactTextString(m)
}
func (*AccessControlPolicyStatus_TranslatorError) ProtoMessage() {}
func (*AccessControlPolicyStatus_TranslatorError) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a861920f3be7f6, []int{1, 0}
}
func (m *AccessControlPolicyStatus_TranslatorError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlPolicyStatus_TranslatorError.Unmarshal(m, b)
}
func (m *AccessControlPolicyStatus_TranslatorError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlPolicyStatus_TranslatorError.Marshal(b, m, deterministic)
}
func (m *AccessControlPolicyStatus_TranslatorError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlPolicyStatus_TranslatorError.Merge(m, src)
}
func (m *AccessControlPolicyStatus_TranslatorError) XXX_Size() int {
	return xxx_messageInfo_AccessControlPolicyStatus_TranslatorError.Size(m)
}
func (m *AccessControlPolicyStatus_TranslatorError) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlPolicyStatus_TranslatorError.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlPolicyStatus_TranslatorError proto.InternalMessageInfo

func (m *AccessControlPolicyStatus_TranslatorError) GetTranslatorId() string {
	if m != nil {
		return m.TranslatorId
	}
	return ""
}

func (m *AccessControlPolicyStatus_TranslatorError) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*AccessControlPolicySpec)(nil), "networking.smh.solo.io.AccessControlPolicySpec")
	proto.RegisterType((*AccessControlPolicyStatus)(nil), "networking.smh.solo.io.AccessControlPolicyStatus")
	proto.RegisterType((*AccessControlPolicyStatus_TranslatorError)(nil), "networking.smh.solo.io.AccessControlPolicyStatus.TranslatorError")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/networking/v1alpha1/access_control_policy.proto", fileDescriptor_d8a861920f3be7f6)
}

var fileDescriptor_d8a861920f3be7f6 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0xd5, 0x18, 0x2a, 0x65, 0x9b, 0x26, 0x60, 0x10, 0x98, 0x9c, 0x4c, 0xb8, 0xf8, 0x92,
	0xb5, 0x5a, 0x4e, 0x70, 0x2b, 0x08, 0x41, 0xa9, 0x22, 0x55, 0x4e, 0x05, 0x12, 0x1c, 0xac, 0x8d,
	0xbd, 0x8a, 0x57, 0xb5, 0x3d, 0xd6, 0xce, 0xb8, 0x55, 0x7f, 0x16, 0x7f, 0x85, 0x5f, 0x84, 0xbc,
	0x76, 0x6d, 0x37, 0xb8, 0x52, 0x8e, 0x79, 0x79, 0xef, 0x9b, 0x9d, 0xa7, 0x31, 0xfb, 0xb9, 0x55,
	0x94, 0x94, 0x1b, 0x1e, 0x41, 0xe6, 0x23, 0xa4, 0xb0, 0x54, 0xe0, 0xa3, 0xd4, 0x37, 0x2a, 0x92,
	0xcb, 0x4c, 0x62, 0xb2, 0x4c, 0xca, 0x8d, 0x2f, 0x0a, 0xe5, 0xe7, 0x92, 0x6e, 0x41, 0x5f, 0xab,
	0x7c, 0xeb, 0xdf, 0x9c, 0x88, 0xb4, 0x48, 0xc4, 0x89, 0x2f, 0xa2, 0x48, 0x22, 0x86, 0x11, 0xe4,
	0xa4, 0x21, 0x0d, 0x0b, 0x48, 0x55, 0x74, 0xc7, 0x0b, 0x0d, 0x04, 0xf6, 0xab, 0x2e, 0xc0, 0x31,
	0x4b, 0x78, 0x05, 0xe7, 0x0a, 0xe6, 0xcb, 0x41, 0x7a, 0x04, 0x5a, 0x76, 0xdc, 0x84, 0xa8, 0xa8,
	0x31, 0xf3, 0x8f, 0x7b, 0xd8, 0x55, 0x2c, 0x73, 0x52, 0x74, 0x17, 0xa2, 0x4c, 0x65, 0x44, 0xa0,
	0x9b, 0xec, 0x87, 0x3d, 0xb2, 0x8d, 0x65, 0x37, 0xea, 0xef, 0x13, 0x25, 0x41, 0x25, 0xd6, 0x81,
	0xc5, 0xdf, 0x11, 0x7b, 0x7d, 0x66, 0xea, 0xf8, 0x5c, 0xb7, 0x71, 0x69, 0xca, 0x58, 0x17, 0x32,
	0xb2, 0x2f, 0xd8, 0x0c, 0xa1, 0xd4, 0xbd, 0x29, 0xce, 0xc8, 0x3d, 0xf0, 0x8e, 0x4e, 0x17, 0xbc,
	0x22, 0xf6, 0xeb, 0xe1, 0xe7, 0xcd, 0x2e, 0xeb, 0xc6, 0x19, 0x4c, 0xeb, 0xe8, 0xfd, 0x6f, 0xfb,
	0x8a, 0xbd, 0x8c, 0x25, 0x92, 0xca, 0x05, 0x29, 0xc8, 0x3b, 0xa2, 0x65, 0x88, 0x6f, 0xff, 0x27,
	0xae, 0xeb, 0x4d, 0x5a, 0xe0, 0x8b, 0x5e, 0xbc, 0xa5, 0xbe, 0x63, 0xc7, 0x22, 0x4d, 0xe1, 0x56,
	0xc6, 0x61, 0x21, 0x28, 0x41, 0xe7, 0x89, 0x6b, 0x79, 0xe3, 0x60, 0xd2, 0x88, 0x97, 0x95, 0x66,
	0x7f, 0x67, 0xb3, 0x7b, 0x53, 0x26, 0x29, 0x81, 0x18, 0x9d, 0xa7, 0xae, 0xe5, 0x4d, 0x87, 0xa6,
	0x7e, 0x23, 0x2a, 0x56, 0xc6, 0xf4, 0x43, 0xa4, 0xa5, 0x0c, 0xa6, 0x4d, 0xb2, 0xd6, 0xf0, 0xc1,
	0x40, 0xd0, 0x84, 0xce, 0xa1, 0x6b, 0x79, 0xc7, 0xdd, 0xc0, 0x4a, 0x5b, 0xfc, 0x19, 0xb1, 0x37,
	0x43, 0xa5, 0x9a, 0xe2, 0xed, 0xaf, 0xcc, 0x26, 0x2d, 0x72, 0x4c, 0x9b, 0x26, 0x8c, 0xea, 0x1c,
	0x98, 0x1e, 0x9c, 0x81, 0x1e, 0xcc, 0xff, 0xc1, 0xf3, 0x5e, 0xa6, 0x01, 0xe5, 0xac, 0x15, 0x41,
	0x87, 0x52, 0x6b, 0xd0, 0xe8, 0x8c, 0x5c, 0xcb, 0x3b, 0x3a, 0x3d, 0xe3, 0xc3, 0x67, 0xcc, 0x1f,
	0x7d, 0x16, 0xbf, 0x6a, 0x51, 0x5f, 0x2a, 0x52, 0xf0, 0x8c, 0x1e, 0x0a, 0x38, 0xff, 0xcd, 0x66,
	0x3b, 0xa6, 0xaa, 0x8e, 0xde, 0x13, 0x54, 0x6c, 0xd6, 0x18, 0x07, 0x93, 0x4e, 0x3c, 0x8f, 0x2b,
	0x93, 0x79, 0x5c, 0x98, 0x49, 0x44, 0xb1, 0x95, 0xe6, 0x8a, 0xc6, 0xc1, 0xc4, 0x88, 0xab, 0x5a,
	0xfb, 0xb4, 0xfa, 0x75, 0xb1, 0xcf, 0x27, 0x5d, 0x5c, 0x6f, 0x77, 0x3e, 0xeb, 0xfe, 0x7a, 0xed,
	0x91, 0x6f, 0x0e, 0xcd, 0x79, 0xbf, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x06, 0x5e, 0xf0, 0x04,
	0x28, 0x04, 0x00, 0x00,
}
