// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/config/v1alpha1/routing.proto

package v1alpha1

import (
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1"
	_ "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// a routing rule applies some L7 routing features to an existing mesh
// routing rules specify the following:
// for all requests:
// - originating from from **source pods**
// - sent to **destination pods**
// - matching one or more **request matcher**
// apply the specified RoutingRuleSpec
// the routing configuration that will be applied to the mesh(es)
type RoutingRuleSpec struct {
	// requests originating from these pods will have the rule applied
	// leave empty to have all pods in the mesh apply these rules
	//
	// > Note: Source Selectors are ignored when RoutingRules are
	// applied to pods in a Linkerd mesh. RoutingRules will apply to
	// all selected destinations in Linkerd, regardless of the source.
	SourceSelector *v1alpha1.Selector `protobuf:"bytes,1,opt,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	// requests destined for these pods will have the rule applied
	// leave empty to apply to all destination pods in the mesh
	DestinationSelector *v1alpha1.Selector `protobuf:"bytes,2,opt,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	// if specified, this rule will only apply to http requests
	// in the mesh matching these parameters
	// note that Linkerd only supports matching on Request Path and Method
	RequestMatchers *Matcher `protobuf:"bytes,3,opt,name=request_matchers,json=requestMatchers,proto3" json:"request_matchers,omitempty"`
	// a routing rule can have one of several types
	// Note: types imported from istio will be replaced with our own
	// simpler types, this is just a place to start from
	//
	// Types that are valid to be assigned to RuleType:
	//	*RoutingRuleSpec_TrafficShift
	//	*RoutingRuleSpec_FaultInjection
	//	*RoutingRuleSpec_RequestTimeout
	//	*RoutingRuleSpec_Retries
	//	*RoutingRuleSpec_CorsPolicy
	//	*RoutingRuleSpec_Mirror
	//	*RoutingRuleSpec_HeaderManipulation
	RuleType             isRoutingRuleSpec_RuleType `protobuf_oneof:"rule_type"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RoutingRuleSpec) Reset()         { *m = RoutingRuleSpec{} }
func (m *RoutingRuleSpec) String() string { return proto.CompactTextString(m) }
func (*RoutingRuleSpec) ProtoMessage()    {}
func (*RoutingRuleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{0}
}
func (m *RoutingRuleSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingRuleSpec.Unmarshal(m, b)
}
func (m *RoutingRuleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingRuleSpec.Marshal(b, m, deterministic)
}
func (m *RoutingRuleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingRuleSpec.Merge(m, src)
}
func (m *RoutingRuleSpec) XXX_Size() int {
	return xxx_messageInfo_RoutingRuleSpec.Size(m)
}
func (m *RoutingRuleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingRuleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingRuleSpec proto.InternalMessageInfo

type isRoutingRuleSpec_RuleType interface {
	isRoutingRuleSpec_RuleType()
}

type RoutingRuleSpec_TrafficShift struct {
	TrafficShift *MultiDestination `protobuf:"bytes,4,opt,name=traffic_shift,json=trafficShift,proto3,oneof" json:"traffic_shift,omitempty"`
}
type RoutingRuleSpec_FaultInjection struct {
	FaultInjection *FaultInjection `protobuf:"bytes,5,opt,name=fault_injection,json=faultInjection,proto3,oneof" json:"fault_injection,omitempty"`
}
type RoutingRuleSpec_RequestTimeout struct {
	RequestTimeout *types.Duration `protobuf:"bytes,6,opt,name=request_timeout,json=requestTimeout,proto3,oneof" json:"request_timeout,omitempty"`
}
type RoutingRuleSpec_Retries struct {
	Retries *RetryPolicy `protobuf:"bytes,7,opt,name=retries,proto3,oneof" json:"retries,omitempty"`
}
type RoutingRuleSpec_CorsPolicy struct {
	CorsPolicy *CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3,oneof" json:"cors_policy,omitempty"`
}
type RoutingRuleSpec_Mirror struct {
	Mirror *v1alpha1.ResourceRef `protobuf:"bytes,9,opt,name=mirror,proto3,oneof" json:"mirror,omitempty"`
}
type RoutingRuleSpec_HeaderManipulation struct {
	HeaderManipulation *HeaderManipulation `protobuf:"bytes,10,opt,name=header_manipulation,json=headerManipulation,proto3,oneof" json:"header_manipulation,omitempty"`
}

func (*RoutingRuleSpec_TrafficShift) isRoutingRuleSpec_RuleType()       {}
func (*RoutingRuleSpec_FaultInjection) isRoutingRuleSpec_RuleType()     {}
func (*RoutingRuleSpec_RequestTimeout) isRoutingRuleSpec_RuleType()     {}
func (*RoutingRuleSpec_Retries) isRoutingRuleSpec_RuleType()            {}
func (*RoutingRuleSpec_CorsPolicy) isRoutingRuleSpec_RuleType()         {}
func (*RoutingRuleSpec_Mirror) isRoutingRuleSpec_RuleType()             {}
func (*RoutingRuleSpec_HeaderManipulation) isRoutingRuleSpec_RuleType() {}

func (m *RoutingRuleSpec) GetRuleType() isRoutingRuleSpec_RuleType {
	if m != nil {
		return m.RuleType
	}
	return nil
}

func (m *RoutingRuleSpec) GetSourceSelector() *v1alpha1.Selector {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *RoutingRuleSpec) GetDestinationSelector() *v1alpha1.Selector {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *RoutingRuleSpec) GetRequestMatchers() *Matcher {
	if m != nil {
		return m.RequestMatchers
	}
	return nil
}

func (m *RoutingRuleSpec) GetTrafficShift() *MultiDestination {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_TrafficShift); ok {
		return x.TrafficShift
	}
	return nil
}

func (m *RoutingRuleSpec) GetFaultInjection() *FaultInjection {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_FaultInjection); ok {
		return x.FaultInjection
	}
	return nil
}

func (m *RoutingRuleSpec) GetRequestTimeout() *types.Duration {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_RequestTimeout); ok {
		return x.RequestTimeout
	}
	return nil
}

func (m *RoutingRuleSpec) GetRetries() *RetryPolicy {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_Retries); ok {
		return x.Retries
	}
	return nil
}

func (m *RoutingRuleSpec) GetCorsPolicy() *CorsPolicy {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_CorsPolicy); ok {
		return x.CorsPolicy
	}
	return nil
}

func (m *RoutingRuleSpec) GetMirror() *v1alpha1.ResourceRef {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_Mirror); ok {
		return x.Mirror
	}
	return nil
}

func (m *RoutingRuleSpec) GetHeaderManipulation() *HeaderManipulation {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_HeaderManipulation); ok {
		return x.HeaderManipulation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RoutingRuleSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RoutingRuleSpec_TrafficShift)(nil),
		(*RoutingRuleSpec_FaultInjection)(nil),
		(*RoutingRuleSpec_RequestTimeout)(nil),
		(*RoutingRuleSpec_Retries)(nil),
		(*RoutingRuleSpec_CorsPolicy)(nil),
		(*RoutingRuleSpec_Mirror)(nil),
		(*RoutingRuleSpec_HeaderManipulation)(nil),
	}
}

type RoutingRuleStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutingRuleStatus) Reset()         { *m = RoutingRuleStatus{} }
func (m *RoutingRuleStatus) String() string { return proto.CompactTextString(m) }
func (*RoutingRuleStatus) ProtoMessage()    {}
func (*RoutingRuleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{1}
}
func (m *RoutingRuleStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingRuleStatus.Unmarshal(m, b)
}
func (m *RoutingRuleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingRuleStatus.Marshal(b, m, deterministic)
}
func (m *RoutingRuleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingRuleStatus.Merge(m, src)
}
func (m *RoutingRuleStatus) XXX_Size() int {
	return xxx_messageInfo_RoutingRuleStatus.Size(m)
}
func (m *RoutingRuleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingRuleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingRuleStatus proto.InternalMessageInfo

// RetryPolicy contains mesh-specific retry configuration
// Different meshes support different Retry features
// Service Mesh Hub's RetryPolicy exposes config for multiple meshes simultaneously,
// Allowing the same RoutingRule to apply retries to different mesh types
// The configuration applied to the target mesh will use the corresponding
// config for each type, while other config types will be ignored
type RetryPolicy struct {
	// Number of retries for a given request
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout        *types.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RetryPolicy) Reset()         { *m = RetryPolicy{} }
func (m *RetryPolicy) String() string { return proto.CompactTextString(m) }
func (*RetryPolicy) ProtoMessage()    {}
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{2}
}
func (m *RetryPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryPolicy.Unmarshal(m, b)
}
func (m *RetryPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryPolicy.Marshal(b, m, deterministic)
}
func (m *RetryPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryPolicy.Merge(m, src)
}
func (m *RetryPolicy) XXX_Size() int {
	return xxx_messageInfo_RetryPolicy.Size(m)
}
func (m *RetryPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RetryPolicy proto.InternalMessageInfo

func (m *RetryPolicy) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *RetryPolicy) GetPerTryTimeout() *types.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

type MultiDestination struct {
	Destinations         []*MultiDestination_WeightedDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *MultiDestination) Reset()         { *m = MultiDestination{} }
func (m *MultiDestination) String() string { return proto.CompactTextString(m) }
func (*MultiDestination) ProtoMessage()    {}
func (*MultiDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{3}
}
func (m *MultiDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiDestination.Unmarshal(m, b)
}
func (m *MultiDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiDestination.Marshal(b, m, deterministic)
}
func (m *MultiDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDestination.Merge(m, src)
}
func (m *MultiDestination) XXX_Size() int {
	return xxx_messageInfo_MultiDestination.Size(m)
}
func (m *MultiDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDestination.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDestination proto.InternalMessageInfo

func (m *MultiDestination) GetDestinations() []*MultiDestination_WeightedDestination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type MultiDestination_WeightedDestination struct {
	Destination *v1alpha1.ResourceRef `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Routing to each destination will be balanced by the ratio of the destination's weight to the total weight on a route
	Weight               uint32   `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiDestination_WeightedDestination) Reset()         { *m = MultiDestination_WeightedDestination{} }
func (m *MultiDestination_WeightedDestination) String() string { return proto.CompactTextString(m) }
func (*MultiDestination_WeightedDestination) ProtoMessage()    {}
func (*MultiDestination_WeightedDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{3, 0}
}
func (m *MultiDestination_WeightedDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiDestination_WeightedDestination.Unmarshal(m, b)
}
func (m *MultiDestination_WeightedDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiDestination_WeightedDestination.Marshal(b, m, deterministic)
}
func (m *MultiDestination_WeightedDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDestination_WeightedDestination.Merge(m, src)
}
func (m *MultiDestination_WeightedDestination) XXX_Size() int {
	return xxx_messageInfo_MultiDestination_WeightedDestination.Size(m)
}
func (m *MultiDestination_WeightedDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDestination_WeightedDestination.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDestination_WeightedDestination proto.InternalMessageInfo

func (m *MultiDestination_WeightedDestination) GetDestination() *v1alpha1.ResourceRef {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *MultiDestination_WeightedDestination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// FaultInjection can be used to specify one or more faults to inject
// while forwarding http requests to the destination specified in a route.
// Faults include aborting the Http request from downstream service, and/or delaying
// proxying of requests. A fault rule MUST HAVE delay or abort.
type FaultInjection struct {
	// Types that are valid to be assigned to FaultInjectionType:
	//	*FaultInjection_Delay_
	//	*FaultInjection_Abort_
	FaultInjectionType isFaultInjection_FaultInjectionType `protobuf_oneof:"fault_injection_type"`
	// Percentage of requests to be faulted with the error code provided.
	// Values range between 0 and 100
	Percentage           float64  `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaultInjection) Reset()         { *m = FaultInjection{} }
func (m *FaultInjection) String() string { return proto.CompactTextString(m) }
func (*FaultInjection) ProtoMessage()    {}
func (*FaultInjection) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{4}
}
func (m *FaultInjection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection.Unmarshal(m, b)
}
func (m *FaultInjection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection.Marshal(b, m, deterministic)
}
func (m *FaultInjection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection.Merge(m, src)
}
func (m *FaultInjection) XXX_Size() int {
	return xxx_messageInfo_FaultInjection.Size(m)
}
func (m *FaultInjection) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection proto.InternalMessageInfo

type isFaultInjection_FaultInjectionType interface {
	isFaultInjection_FaultInjectionType()
}

type FaultInjection_Delay_ struct {
	Delay *FaultInjection_Delay `protobuf:"bytes,1,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}
type FaultInjection_Abort_ struct {
	Abort *FaultInjection_Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof" json:"abort,omitempty"`
}

func (*FaultInjection_Delay_) isFaultInjection_FaultInjectionType() {}
func (*FaultInjection_Abort_) isFaultInjection_FaultInjectionType() {}

func (m *FaultInjection) GetFaultInjectionType() isFaultInjection_FaultInjectionType {
	if m != nil {
		return m.FaultInjectionType
	}
	return nil
}

func (m *FaultInjection) GetDelay() *FaultInjection_Delay {
	if x, ok := m.GetFaultInjectionType().(*FaultInjection_Delay_); ok {
		return x.Delay
	}
	return nil
}

func (m *FaultInjection) GetAbort() *FaultInjection_Abort {
	if x, ok := m.GetFaultInjectionType().(*FaultInjection_Abort_); ok {
		return x.Abort
	}
	return nil
}

func (m *FaultInjection) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultInjection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultInjection_Delay_)(nil),
		(*FaultInjection_Abort_)(nil),
	}
}

// The _fixedDelay_ field is used to indicate the amount of delay in seconds.
// The optional _percentage_ field can be used to only delay a certain
// percentage of requests. If left unspecified, all request will be delayed.
type FaultInjection_Delay struct {
	// Types that are valid to be assigned to HttpDelayType:
	//	*FaultInjection_Delay_FixedDelay
	//	*FaultInjection_Delay_ExponentialDelay
	HttpDelayType isFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	// Percentage of requests on which the delay will be injected.
	// value from 0.0 to 100.0
	Percentage           float64  `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaultInjection_Delay) Reset()         { *m = FaultInjection_Delay{} }
func (m *FaultInjection_Delay) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Delay) ProtoMessage()    {}
func (*FaultInjection_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{4, 0}
}
func (m *FaultInjection_Delay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Delay.Unmarshal(m, b)
}
func (m *FaultInjection_Delay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Delay.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Delay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Delay.Merge(m, src)
}
func (m *FaultInjection_Delay) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Delay.Size(m)
}
func (m *FaultInjection_Delay) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Delay.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Delay proto.InternalMessageInfo

type isFaultInjection_Delay_HttpDelayType interface {
	isFaultInjection_Delay_HttpDelayType()
}

type FaultInjection_Delay_FixedDelay struct {
	FixedDelay *types.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,proto3,oneof" json:"fixed_delay,omitempty"`
}
type FaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *types.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,proto3,oneof" json:"exponential_delay,omitempty"`
}

func (*FaultInjection_Delay_FixedDelay) isFaultInjection_Delay_HttpDelayType()       {}
func (*FaultInjection_Delay_ExponentialDelay) isFaultInjection_Delay_HttpDelayType() {}

func (m *FaultInjection_Delay) GetHttpDelayType() isFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (m *FaultInjection_Delay) GetFixedDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*FaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *FaultInjection_Delay) GetExponentialDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*FaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

func (m *FaultInjection_Delay) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultInjection_Delay) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultInjection_Delay_FixedDelay)(nil),
		(*FaultInjection_Delay_ExponentialDelay)(nil),
	}
}

// The _httpStatus_ field is used to indicate the HTTP status code to
// return to the caller. The optional _percentage_ field can be used to only
// abort a certain percentage of requests. If not specified, all requests are
// aborted.
type FaultInjection_Abort struct {
	// Types that are valid to be assigned to ErrorType:
	//	*FaultInjection_Abort_HttpStatus
	ErrorType            isFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FaultInjection_Abort) Reset()         { *m = FaultInjection_Abort{} }
func (m *FaultInjection_Abort) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Abort) ProtoMessage()    {}
func (*FaultInjection_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{4, 1}
}
func (m *FaultInjection_Abort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Abort.Unmarshal(m, b)
}
func (m *FaultInjection_Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Abort.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Abort.Merge(m, src)
}
func (m *FaultInjection_Abort) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Abort.Size(m)
}
func (m *FaultInjection_Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Abort proto.InternalMessageInfo

type isFaultInjection_Abort_ErrorType interface {
	isFaultInjection_Abort_ErrorType()
}

type FaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,4,opt,name=http_status,json=httpStatus,proto3,oneof" json:"http_status,omitempty"`
}

func (*FaultInjection_Abort_HttpStatus) isFaultInjection_Abort_ErrorType() {}

func (m *FaultInjection_Abort) GetErrorType() isFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *FaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*FaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultInjection_Abort) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultInjection_Abort_HttpStatus)(nil),
	}
}

// manipulate request and response headers
type HeaderManipulation struct {
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders,proto3" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders,proto3" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders,proto3" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders,proto3" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeaderManipulation) Reset()         { *m = HeaderManipulation{} }
func (m *HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*HeaderManipulation) ProtoMessage()    {}
func (*HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{5}
}
func (m *HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderManipulation.Unmarshal(m, b)
}
func (m *HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderManipulation.Marshal(b, m, deterministic)
}
func (m *HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderManipulation.Merge(m, src)
}
func (m *HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_HeaderManipulation.Size(m)
}
func (m *HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderManipulation proto.InternalMessageInfo

func (m *HeaderManipulation) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The
	// content will be serialized into the Access-Control-Allow-Origin
	// header. Wildcard * will allow all origins.
	// $hide_from_docs
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin,proto3" json:"allow_origin,omitempty"` // Deprecated: Do not use.
	// String patterns that match allowed origins.
	// An origin is allowed if any of the string matchers match.
	// If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client.
	AllowOrigins []*StringMatch `protobuf:"bytes,7,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to
	// access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies how long the results of a preflight request can be
	// cached. Translates to the `Access-Control-Max-Age` header.
	MaxAge *types.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to
	// `Access-Control-Allow-Credentials` header.
	AllowCredentials     *types.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{6}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (m *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(m, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowOrigins() []*StringMatch {
	if m != nil {
		return m.AllowOrigins
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *types.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *types.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// Parameters for matching routes
type Matcher struct {
	// Types that are valid to be assigned to PathSpecifier:
	//	*Matcher_Prefix
	//	*Matcher_Exact
	//	*Matcher_Regex
	PathSpecifier isMatcher_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Specifies a set of headers that the route should match on. The router will
	// check the request’s headers against all the specified headers in the route
	// config. A match will happen if all the headers in the route are present in
	// the request with the same values (or based on presence if the value field
	// is not in the config).
	Headers []*HeaderMatcher `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	// Specifies a set of URL query parameters on which the route should
	// match. The router will check the query string from the *path* header
	// against all the specified query parameters. If the number of specified
	// query parameters is nonzero, they all must match the *path* header's
	// query string for a match to occur.
	QueryParameters []*QueryParameterMatcher `protobuf:"bytes,7,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// HTTP Method/Verb(s) to match on. If none specified, the matcher will ignore the HTTP Method
	Methods              []string `protobuf:"bytes,8,rep,name=methods,proto3" json:"methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Matcher) Reset()         { *m = Matcher{} }
func (m *Matcher) String() string { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()    {}
func (*Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{7}
}
func (m *Matcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher.Unmarshal(m, b)
}
func (m *Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher.Marshal(b, m, deterministic)
}
func (m *Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher.Merge(m, src)
}
func (m *Matcher) XXX_Size() int {
	return xxx_messageInfo_Matcher.Size(m)
}
func (m *Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher proto.InternalMessageInfo

type isMatcher_PathSpecifier interface {
	isMatcher_PathSpecifier()
}

type Matcher_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type Matcher_Exact struct {
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type Matcher_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*Matcher_Prefix) isMatcher_PathSpecifier() {}
func (*Matcher_Exact) isMatcher_PathSpecifier()  {}
func (*Matcher_Regex) isMatcher_PathSpecifier()  {}

func (m *Matcher) GetPathSpecifier() isMatcher_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (m *Matcher) GetPrefix() string {
	if x, ok := m.GetPathSpecifier().(*Matcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *Matcher) GetExact() string {
	if x, ok := m.GetPathSpecifier().(*Matcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *Matcher) GetRegex() string {
	if x, ok := m.GetPathSpecifier().(*Matcher_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *Matcher) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Matcher) GetQueryParameters() []*QueryParameterMatcher {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

func (m *Matcher) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Matcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Matcher_Prefix)(nil),
		(*Matcher_Exact)(nil),
		(*Matcher_Regex)(nil),
	}
}

// Describes how to match a given string in HTTP headers. Match is
// case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType            isStringMatch_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StringMatch) Reset()         { *m = StringMatch{} }
func (m *StringMatch) String() string { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()    {}
func (*StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{8}
}
func (m *StringMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMatch.Unmarshal(m, b)
}
func (m *StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMatch.Marshal(b, m, deterministic)
}
func (m *StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatch.Merge(m, src)
}
func (m *StringMatch) XXX_Size() int {
	return xxx_messageInfo_StringMatch.Size(m)
}
func (m *StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatch proto.InternalMessageInfo

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*StringMatch_Exact) isStringMatch_MatchType()  {}
func (*StringMatch_Prefix) isStringMatch_MatchType() {}
func (*StringMatch_Regex) isStringMatch_MatchType()  {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StringMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

type HeaderMatcher struct {
	// Types that are valid to be assigned to MatchType:
	//	*HeaderMatcher_Name
	//	*HeaderMatcher_Value
	//	*HeaderMatcher_Regex
	MatchType isHeaderMatcher_MatchType `protobuf_oneof:"match_type"`
	// If set to true, the result of the match will be inverted. Defaults to false.
	//
	// Examples:
	// * name=foo, invert_match=true: matches if no header named `foo` is present
	// * name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present
	// * name=foo, value=``\d{3}``, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present
	InvertMatch          bool     `protobuf:"varint,4,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeaderMatcher) Reset()         { *m = HeaderMatcher{} }
func (m *HeaderMatcher) String() string { return proto.CompactTextString(m) }
func (*HeaderMatcher) ProtoMessage()    {}
func (*HeaderMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{9}
}
func (m *HeaderMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderMatcher.Unmarshal(m, b)
}
func (m *HeaderMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderMatcher.Marshal(b, m, deterministic)
}
func (m *HeaderMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderMatcher.Merge(m, src)
}
func (m *HeaderMatcher) XXX_Size() int {
	return xxx_messageInfo_HeaderMatcher.Size(m)
}
func (m *HeaderMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderMatcher proto.InternalMessageInfo

type isHeaderMatcher_MatchType interface {
	isHeaderMatcher_MatchType()
}

type HeaderMatcher_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type HeaderMatcher_Value struct {
	Value string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}
type HeaderMatcher_Regex struct {
	Regex bool `protobuf:"varint,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*HeaderMatcher_Name) isHeaderMatcher_MatchType()  {}
func (*HeaderMatcher_Value) isHeaderMatcher_MatchType() {}
func (*HeaderMatcher_Regex) isHeaderMatcher_MatchType() {}

func (m *HeaderMatcher) GetMatchType() isHeaderMatcher_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *HeaderMatcher) GetName() string {
	if x, ok := m.GetMatchType().(*HeaderMatcher_Name); ok {
		return x.Name
	}
	return ""
}

func (m *HeaderMatcher) GetValue() string {
	if x, ok := m.GetMatchType().(*HeaderMatcher_Value); ok {
		return x.Value
	}
	return ""
}

func (m *HeaderMatcher) GetRegex() bool {
	if x, ok := m.GetMatchType().(*HeaderMatcher_Regex); ok {
		return x.Regex
	}
	return false
}

func (m *HeaderMatcher) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HeaderMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HeaderMatcher_Name)(nil),
		(*HeaderMatcher_Value)(nil),
		(*HeaderMatcher_Regex)(nil),
	}
}

// Query parameter matching treats the query string of a request's :path header
// as an ampersand-separated list of keys and/or key=value elements.
type QueryParameterMatcher struct {
	// Types that are valid to be assigned to MatchType:
	//	*QueryParameterMatcher_Name
	//	*QueryParameterMatcher_Value
	//	*QueryParameterMatcher_Regex
	MatchType            isQueryParameterMatcher_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *QueryParameterMatcher) Reset()         { *m = QueryParameterMatcher{} }
func (m *QueryParameterMatcher) String() string { return proto.CompactTextString(m) }
func (*QueryParameterMatcher) ProtoMessage()    {}
func (*QueryParameterMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_21b549e3da79240c, []int{10}
}
func (m *QueryParameterMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryParameterMatcher.Unmarshal(m, b)
}
func (m *QueryParameterMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryParameterMatcher.Marshal(b, m, deterministic)
}
func (m *QueryParameterMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParameterMatcher.Merge(m, src)
}
func (m *QueryParameterMatcher) XXX_Size() int {
	return xxx_messageInfo_QueryParameterMatcher.Size(m)
}
func (m *QueryParameterMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParameterMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParameterMatcher proto.InternalMessageInfo

type isQueryParameterMatcher_MatchType interface {
	isQueryParameterMatcher_MatchType()
}

type QueryParameterMatcher_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type QueryParameterMatcher_Value struct {
	Value string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}
type QueryParameterMatcher_Regex struct {
	Regex bool `protobuf:"varint,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*QueryParameterMatcher_Name) isQueryParameterMatcher_MatchType()  {}
func (*QueryParameterMatcher_Value) isQueryParameterMatcher_MatchType() {}
func (*QueryParameterMatcher_Regex) isQueryParameterMatcher_MatchType() {}

func (m *QueryParameterMatcher) GetMatchType() isQueryParameterMatcher_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *QueryParameterMatcher) GetName() string {
	if x, ok := m.GetMatchType().(*QueryParameterMatcher_Name); ok {
		return x.Name
	}
	return ""
}

func (m *QueryParameterMatcher) GetValue() string {
	if x, ok := m.GetMatchType().(*QueryParameterMatcher_Value); ok {
		return x.Value
	}
	return ""
}

func (m *QueryParameterMatcher) GetRegex() bool {
	if x, ok := m.GetMatchType().(*QueryParameterMatcher_Regex); ok {
		return x.Regex
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryParameterMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryParameterMatcher_Name)(nil),
		(*QueryParameterMatcher_Value)(nil),
		(*QueryParameterMatcher_Regex)(nil),
	}
}

func init() {
	proto.RegisterType((*RoutingRuleSpec)(nil), "config.zephyr.solo.io.RoutingRuleSpec")
	proto.RegisterType((*RoutingRuleStatus)(nil), "config.zephyr.solo.io.RoutingRuleStatus")
	proto.RegisterType((*RetryPolicy)(nil), "config.zephyr.solo.io.RetryPolicy")
	proto.RegisterType((*MultiDestination)(nil), "config.zephyr.solo.io.MultiDestination")
	proto.RegisterType((*MultiDestination_WeightedDestination)(nil), "config.zephyr.solo.io.MultiDestination.WeightedDestination")
	proto.RegisterType((*FaultInjection)(nil), "config.zephyr.solo.io.FaultInjection")
	proto.RegisterType((*FaultInjection_Delay)(nil), "config.zephyr.solo.io.FaultInjection.Delay")
	proto.RegisterType((*FaultInjection_Abort)(nil), "config.zephyr.solo.io.FaultInjection.Abort")
	proto.RegisterType((*HeaderManipulation)(nil), "config.zephyr.solo.io.HeaderManipulation")
	proto.RegisterMapType((map[string]string)(nil), "config.zephyr.solo.io.HeaderManipulation.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "config.zephyr.solo.io.HeaderManipulation.AppendResponseHeadersEntry")
	proto.RegisterType((*CorsPolicy)(nil), "config.zephyr.solo.io.CorsPolicy")
	proto.RegisterType((*Matcher)(nil), "config.zephyr.solo.io.Matcher")
	proto.RegisterType((*StringMatch)(nil), "config.zephyr.solo.io.StringMatch")
	proto.RegisterType((*HeaderMatcher)(nil), "config.zephyr.solo.io.HeaderMatcher")
	proto.RegisterType((*QueryParameterMatcher)(nil), "config.zephyr.solo.io.QueryParameterMatcher")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/config/v1alpha1/routing.proto", fileDescriptor_21b549e3da79240c)
}

var fileDescriptor_21b549e3da79240c = []byte{
	// 1298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0x8e, 0xed, 0xd8, 0x49, 0x8e, 0x93, 0xd8, 0x99, 0x7c, 0x74, 0x6b, 0xe9, 0xad, 0x5a, 0xbf,
	0x6f, 0xf5, 0xb6, 0x82, 0xae, 0xd5, 0x82, 0x50, 0x55, 0x10, 0x52, 0x9c, 0xd0, 0xb8, 0x17, 0x85,
	0x30, 0xa9, 0xa8, 0x84, 0x90, 0x56, 0x93, 0xf5, 0xb1, 0x3d, 0x64, 0xbd, 0xb3, 0x99, 0x9d, 0x4d,
	0x6d, 0xc4, 0x35, 0x37, 0x48, 0x5c, 0xf3, 0x7b, 0xf8, 0x07, 0xfc, 0x09, 0x2e, 0xf8, 0x15, 0x68,
	0x66, 0x76, 0xed, 0x75, 0x62, 0xd7, 0xa9, 0xc4, 0x9d, 0xcf, 0xc7, 0xf3, 0x9c, 0xb3, 0xe7, 0x63,
	0x66, 0x0c, 0xed, 0x3e, 0x57, 0x83, 0xe4, 0xdc, 0xf5, 0xc5, 0xb0, 0x15, 0x8b, 0x40, 0x3c, 0xe1,
	0xa2, 0x35, 0xc4, 0x78, 0xf0, 0x24, 0x92, 0xe2, 0x47, 0xf4, 0x55, 0xdc, 0x62, 0x11, 0x6f, 0xf9,
	0x22, 0xec, 0xf1, 0x7e, 0xeb, 0xea, 0x29, 0x0b, 0xa2, 0x01, 0x7b, 0xda, 0x92, 0x22, 0x51, 0x3c,
	0xec, 0xbb, 0x91, 0x14, 0x4a, 0x90, 0x7d, 0x6b, 0x76, 0x7f, 0xc2, 0x68, 0x30, 0x96, 0xae, 0xa6,
	0x71, 0xb9, 0x68, 0xdc, 0xeb, 0x0b, 0xd1, 0x0f, 0xb0, 0x65, 0x9c, 0xce, 0x93, 0x5e, 0xab, 0x9b,
	0x48, 0xa6, 0xb8, 0x08, 0x2d, 0xec, 0xa6, 0xfd, 0x9d, 0x64, 0x51, 0x84, 0x32, 0x4e, 0xed, 0x8f,
	0xe7, 0xe5, 0x21, 0x31, 0x97, 0x05, 0xf6, 0x32, 0x2a, 0x93, 0xfa, 0x05, 0x57, 0xc6, 0xeb, 0xea,
	0x69, 0x2b, 0x93, 0x53, 0xbb, 0xbb, 0x8c, 0x2a, 0xc6, 0x00, 0x7d, 0x25, 0xa4, 0xf5, 0x6f, 0xfe,
	0x5a, 0x81, 0x1a, 0xb5, 0xdf, 0x48, 0x93, 0x00, 0xcf, 0x22, 0xf4, 0xc9, 0x4b, 0xa8, 0xc5, 0x22,
	0x91, 0x3e, 0x7a, 0x99, 0xb3, 0x53, 0xb8, 0x5f, 0x78, 0x54, 0x7d, 0xf6, 0x1f, 0x57, 0x73, 0x5d,
	0xfb, 0x7a, 0xf7, 0x2c, 0x75, 0xa2, 0xdb, 0x16, 0x95, 0xc9, 0xe4, 0x14, 0xf6, 0xba, 0x18, 0x2b,
	0x1e, 0x9a, 0x5a, 0x4c, 0xc9, 0x8a, 0xb7, 0x21, 0xdb, 0xcd, 0x41, 0x27, 0x8c, 0xaf, 0xa0, 0x2e,
	0xf1, 0x32, 0xc1, 0x58, 0x79, 0x43, 0xa6, 0xfc, 0x01, 0xca, 0xd8, 0x29, 0x19, 0xb6, 0x7b, 0xee,
	0xdc, 0xd6, 0xb8, 0xaf, 0xad, 0x1b, 0xad, 0xa5, 0xb8, 0x54, 0x8e, 0xc9, 0xd7, 0xb0, 0xa5, 0x24,
	0xeb, 0xf5, 0xb8, 0xef, 0xc5, 0x03, 0xde, 0x53, 0xce, 0xaa, 0xe1, 0xf9, 0xff, 0x22, 0x9e, 0x24,
	0x50, 0xfc, 0x78, 0x9a, 0x52, 0x67, 0x85, 0x6e, 0xa6, 0xf8, 0x33, 0x0d, 0x27, 0xa7, 0x50, 0xeb,
	0xb1, 0x24, 0x50, 0x1e, 0x0f, 0x75, 0xe9, 0xb9, 0x08, 0x9d, 0xb2, 0x61, 0x7c, 0xb8, 0x80, 0xf1,
	0xa5, 0xf6, 0x7e, 0x95, 0x39, 0x77, 0x56, 0xe8, 0x76, 0x6f, 0x46, 0x43, 0x8e, 0x21, 0x4b, 0xda,
	0x53, 0x7c, 0x88, 0x22, 0x51, 0x4e, 0xc5, 0x30, 0xde, 0x75, 0xed, 0x3c, 0xb9, 0xd9, 0x3c, 0xb9,
	0xc7, 0xe9, 0xbc, 0x69, 0x96, 0x14, 0xf3, 0xc6, 0x42, 0xc8, 0x97, 0xb0, 0x26, 0x51, 0x49, 0x8e,
	0xb1, 0xb3, 0x66, 0xd0, 0xcd, 0x05, 0xf9, 0x50, 0x54, 0x72, 0x7c, 0x2a, 0x02, 0xee, 0x8f, 0x3b,
	0x2b, 0x34, 0x03, 0x91, 0x63, 0xa8, 0xfa, 0x42, 0xc6, 0x5e, 0x64, 0x2c, 0xce, 0xba, 0xe1, 0x78,
	0xb0, 0x80, 0xe3, 0x48, 0xc8, 0x78, 0x42, 0x01, 0xfe, 0x44, 0x22, 0x2f, 0xa0, 0x32, 0xe4, 0x52,
	0x0a, 0xe9, 0x6c, 0x18, 0x82, 0xfb, 0x73, 0x9b, 0x4f, 0xd1, 0x4e, 0x10, 0xc5, 0x5e, 0x67, 0x85,
	0xa6, 0x08, 0xf2, 0x03, 0xec, 0x0e, 0x90, 0x75, 0x51, 0x7a, 0x43, 0x16, 0xf2, 0x28, 0x09, 0xcc,
	0xa7, 0x3a, 0x60, 0x88, 0x1e, 0x2f, 0xc8, 0xa4, 0x63, 0x10, 0xaf, 0x73, 0x80, 0xce, 0x0a, 0x25,
	0x83, 0x1b, 0xda, 0x76, 0x15, 0x36, 0x64, 0x12, 0xa0, 0xa7, 0xc6, 0x11, 0x36, 0x77, 0x61, 0x27,
	0xbf, 0x0c, 0x8a, 0xa9, 0x24, 0x6e, 0x06, 0x50, 0xcd, 0xd5, 0x86, 0x34, 0x60, 0x9d, 0x29, 0x85,
	0xc3, 0x48, 0xc5, 0x66, 0x2d, 0xca, 0x74, 0x22, 0x93, 0x43, 0xa8, 0x45, 0x28, 0x3d, 0x25, 0xc7,
	0x93, 0x96, 0x15, 0x97, 0xb4, 0x8c, 0x6e, 0x45, 0x28, 0xdf, 0xc8, 0x71, 0xda, 0xaf, 0xe6, 0x5f,
	0x05, 0xa8, 0x5f, 0x1f, 0x36, 0xe2, 0xc1, 0x66, 0x6e, 0x1d, 0x74, 0xdc, 0xd2, 0xa3, 0xea, 0xb3,
	0xcf, 0x6f, 0x39, 0xab, 0xee, 0x5b, 0xe4, 0xfd, 0x81, 0xc2, 0x6e, 0x4e, 0x47, 0x67, 0x08, 0x1b,
	0x97, 0xb0, 0x3b, 0xc7, 0x89, 0xb4, 0xa1, 0x9a, 0x73, 0x4b, 0x4f, 0x81, 0xa5, 0xbd, 0xa3, 0x79,
	0x10, 0x39, 0x80, 0xca, 0x3b, 0x43, 0x6d, 0x4a, 0xb1, 0x45, 0x53, 0xa9, 0xf9, 0x67, 0x09, 0xb6,
	0x67, 0x77, 0x80, 0x1c, 0x41, 0xb9, 0x8b, 0x01, 0x1b, 0xa7, 0x81, 0x3e, 0xba, 0xd5, 0xe6, 0xb8,
	0xc7, 0x1a, 0xd2, 0x59, 0xa1, 0x16, 0xab, 0x49, 0xd8, 0xb9, 0x90, 0x59, 0xe5, 0x6f, 0x49, 0x72,
	0xa8, 0x21, 0x9a, 0xc4, 0x60, 0xc9, 0x3d, 0x80, 0x08, 0xa5, 0x8f, 0xa1, 0x62, 0x7d, 0x34, 0x8b,
	0x5c, 0xa0, 0x39, 0x4d, 0xe3, 0x8f, 0x02, 0x94, 0x4d, 0x5c, 0xf2, 0x05, 0x54, 0x7b, 0x7c, 0x84,
	0x5d, 0xcf, 0x66, 0x5e, 0x5c, 0xbe, 0xa1, 0x60, 0xfc, 0x2d, 0xba, 0x03, 0x3b, 0x38, 0x8a, 0x44,
	0x88, 0xa1, 0xe2, 0x2c, 0x48, 0x39, 0x4a, 0xcb, 0x39, 0xea, 0x39, 0x94, 0x65, 0x5a, 0x92, 0x71,
	0x7b, 0x07, 0x6a, 0x03, 0xa5, 0x22, 0x1b, 0xc2, 0x4c, 0x7b, 0xe3, 0x39, 0x94, 0xcd, 0x67, 0x93,
	0x07, 0x50, 0x35, 0xb6, 0xd8, 0x0c, 0xbc, 0x39, 0x09, 0xcb, 0x3a, 0x51, 0xad, 0xb4, 0x4b, 0xd0,
	0xde, 0x04, 0x40, 0xbd, 0x8d, 0x06, 0xd9, 0x3e, 0x80, 0xbd, 0x6b, 0x87, 0x9d, 0xdd, 0x9f, 0xdf,
	0x56, 0x81, 0xdc, 0xdc, 0x3c, 0xf2, 0x19, 0xdc, 0x91, 0x38, 0x14, 0x57, 0xe8, 0x49, 0x8c, 0x23,
	0x11, 0xc6, 0xe8, 0xd9, 0x4d, 0x8c, 0x9d, 0xcd, 0xfb, 0xa5, 0x47, 0x1b, 0x74, 0xdf, 0x9a, 0x69,
	0x6a, 0xb5, 0x14, 0x31, 0xf9, 0x19, 0xee, 0xe8, 0x7b, 0x32, 0xec, 0xde, 0xc4, 0x6d, 0x99, 0x0d,
	0x38, 0xbe, 0xf5, 0xf6, 0xbb, 0x87, 0x86, 0xe8, 0x5a, 0x84, 0xaf, 0x42, 0x25, 0xc7, 0x74, 0x9f,
	0xcd, 0xb3, 0x91, 0x4f, 0xe1, 0x60, 0x92, 0xb5, 0x3d, 0x86, 0xb3, 0xe0, 0xdb, 0x26, 0xe9, 0xbd,
	0x2c, 0x69, 0x63, 0xcc, 0x50, 0x63, 0x38, 0x98, 0xe4, 0x3c, 0x8b, 0xaa, 0x99, 0x94, 0x8f, 0x3e,
	0x3c, 0xe5, 0x3c, 0xbf, 0xcd, 0x78, 0x8f, 0xcd, 0x31, 0x35, 0x3a, 0xd0, 0x58, 0xfc, 0x95, 0xa4,
	0x0e, 0xa5, 0x0b, 0xb4, 0xab, 0xb5, 0x41, 0xf5, 0x4f, 0xb2, 0x07, 0xe5, 0x2b, 0x16, 0x24, 0x68,
	0x86, 0x76, 0x83, 0x5a, 0xe1, 0x45, 0xf1, 0x79, 0xa1, 0x71, 0x02, 0x77, 0x17, 0x06, 0xff, 0x10,
	0xa2, 0xe6, 0xdf, 0x45, 0x80, 0xe9, 0xa5, 0x40, 0x1e, 0xc2, 0x26, 0x0b, 0x02, 0xf1, 0xce, 0x13,
	0x92, 0xf7, 0x79, 0x68, 0xce, 0xb1, 0x8d, 0x76, 0xd1, 0x29, 0xd0, 0xaa, 0xd1, 0x7f, 0x63, 0xd4,
	0xe4, 0x04, 0xb6, 0xf2, 0x6e, 0xfa, 0xe6, 0x2a, 0xbd, 0xe7, 0xe6, 0x3a, 0x53, 0x92, 0x87, 0x7d,
	0x73, 0xb3, 0xd3, 0xcd, 0x1c, 0x4f, 0x4c, 0xfe, 0x9b, 0x11, 0x0d, 0x51, 0x0d, 0x44, 0x37, 0x76,
	0x8a, 0xa6, 0x73, 0xd6, 0xe9, 0xb5, 0xd5, 0x4d, 0x9d, 0xb2, 0x46, 0x95, 0x72, 0x4e, 0x59, 0x5b,
	0x1f, 0xc2, 0xb6, 0x5e, 0xb9, 0xdc, 0x04, 0xae, 0x1a, 0xaf, 0x2d, 0xab, 0xcd, 0xdc, 0x9e, 0xc1,
	0xda, 0x90, 0x8d, 0xbc, 0x6c, 0x05, 0xdf, 0x7b, 0xf0, 0x57, 0x86, 0x6c, 0x74, 0xd8, 0x47, 0x72,
	0x02, 0x3b, 0x36, 0xbe, 0x2f, 0xb1, 0x6b, 0x57, 0x3a, 0x4e, 0x6f, 0xfa, 0xc6, 0x0d, 0x74, 0x5b,
	0x88, 0xe0, 0x3b, 0x5d, 0x5e, 0x5a, 0x37, 0xa0, 0xa3, 0x29, 0xa6, 0xf9, 0x7b, 0x11, 0xd6, 0xd2,
	0xf7, 0x0d, 0x71, 0xa0, 0x12, 0x49, 0xec, 0xf1, 0x91, 0xed, 0x93, 0xbe, 0x4e, 0xad, 0x4c, 0x0e,
	0xa0, 0x8c, 0x23, 0xe6, 0xdb, 0xf3, 0x51, 0x1b, 0xac, 0xa8, 0xf5, 0x12, 0xfb, 0x38, 0x32, 0xc7,
	0x8f, 0xd1, 0x1b, 0x51, 0x3f, 0x20, 0xb2, 0x4f, 0xae, 0x98, 0x36, 0xfc, 0x6f, 0xc9, 0x04, 0xdb,
	0x07, 0x57, 0x06, 0x22, 0x6f, 0xa1, 0x7e, 0x99, 0xa0, 0x1c, 0x7b, 0x11, 0x93, 0x6c, 0x88, 0x4a,
	0x13, 0xd9, 0x7e, 0x7e, 0xbc, 0x80, 0xe8, 0x5b, 0xed, 0x7e, 0x9a, 0x79, 0x4f, 0x5e, 0x70, 0x97,
	0x33, 0xea, 0x98, 0x38, 0xb0, 0x96, 0xb5, 0x75, 0xdd, 0xf4, 0x22, 0x13, 0xdb, 0x75, 0xd8, 0x8e,
	0x98, 0x1a, 0x78, 0x71, 0x84, 0x3e, 0xef, 0x71, 0x94, 0x4d, 0x84, 0x6a, 0x6e, 0x4a, 0xa6, 0x35,
	0x28, 0xcc, 0xd6, 0x60, 0x5a, 0xb5, 0xe2, 0xcd, 0xaa, 0xcd, 0xab, 0x8e, 0x3e, 0x17, 0xcd, 0x4b,
	0xd4, 0x9e, 0x7f, 0xbf, 0x14, 0x60, 0x6b, 0xa6, 0x0c, 0x64, 0x0f, 0x56, 0x43, 0x36, 0xc4, 0x49,
	0x20, 0x23, 0x69, 0xb6, 0xdc, 0xc2, 0x68, 0x36, 0x23, 0xce, 0x46, 0x59, 0x9f, 0xf6, 0xe0, 0x01,
	0x6c, 0xf2, 0xf0, 0x0a, 0x65, 0xfa, 0xec, 0x35, 0x27, 0xf4, 0x3a, 0xad, 0x5a, 0x9d, 0x09, 0x75,
	0x2d, 0x91, 0x0b, 0xd8, 0x9f, 0x5b, 0xc5, 0x7f, 0x27, 0x9f, 0xd9, 0x60, 0xed, 0x57, 0xdf, 0x9f,
	0x2c, 0xfd, 0x6f, 0x15, 0x5d, 0xf4, 0x73, 0xff, 0xaf, 0xae, 0x75, 0x7c, 0xf2, 0xef, 0xe4, 0xbc,
	0x62, 0x06, 0xfd, 0x93, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xfa, 0x81, 0xff, 0xad, 0x0d,
	0x00, 0x00,
}
