// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	security_smh_solo_io_v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/security.smh.solo.io/v1alpha1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type VirtualMeshCertificateSigningRequestSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) bool) []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	// Return the Set as a map of key to resource.
	Map() map[string]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	// Insert a resource into the set.
	Insert(virtualMeshCertificateSigningRequest ...*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(virtualMeshCertificateSigningRequestSet VirtualMeshCertificateSigningRequestSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(virtualMeshCertificateSigningRequest ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(virtualMeshCertificateSigningRequest ezkube.ResourceId)
	// Return the union with the provided set
	Union(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet
	// Return the difference with the provided set
	Difference(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet
	// Return the intersection with the provided set
	Intersection(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest, error)
	// Get the length of the set
	Length() int
}

func makeGenericVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range virtualMeshCertificateSigningRequestList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type virtualMeshCertificateSigningRequestSet struct {
	set sksets.ResourceSet
}

func NewVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList ...*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) VirtualMeshCertificateSigningRequestSet {
	return &virtualMeshCertificateSigningRequestSet{set: makeGenericVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList)}
}

func NewVirtualMeshCertificateSigningRequestSetFromList(virtualMeshCertificateSigningRequestList *security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequestList) VirtualMeshCertificateSigningRequestSet {
	list := make([]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest, 0, len(virtualMeshCertificateSigningRequestList.Items))
	for idx := range virtualMeshCertificateSigningRequestList.Items {
		list = append(list, &virtualMeshCertificateSigningRequestList.Items[idx])
	}
	return &virtualMeshCertificateSigningRequestSet{set: makeGenericVirtualMeshCertificateSigningRequestSet(list)}
}

func (s *virtualMeshCertificateSigningRequestSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *virtualMeshCertificateSigningRequestSet) List(filterResource ...func(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) bool) []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest {

	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest))
		})
	}

	var virtualMeshCertificateSigningRequestList []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	for _, obj := range s.set.List(genericFilters...) {
		virtualMeshCertificateSigningRequestList = append(virtualMeshCertificateSigningRequestList, obj.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest))
	}
	return virtualMeshCertificateSigningRequestList
}

func (s *virtualMeshCertificateSigningRequestSet) Map() map[string]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest {
	newMap := map[string]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest)
	}
	return newMap
}

func (s *virtualMeshCertificateSigningRequestSet) Insert(
	virtualMeshCertificateSigningRequestList ...*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest,
) {
	for _, obj := range virtualMeshCertificateSigningRequestList {
		s.set.Insert(obj)
	}
}

func (s *virtualMeshCertificateSigningRequestSet) Has(virtualMeshCertificateSigningRequest ezkube.ResourceId) bool {
	return s.set.Has(virtualMeshCertificateSigningRequest)
}

func (s *virtualMeshCertificateSigningRequestSet) Equal(
	virtualMeshCertificateSigningRequestSet VirtualMeshCertificateSigningRequestSet,
) bool {
	return s.set.Equal(makeGenericVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestSet.List()))
}

func (s *virtualMeshCertificateSigningRequestSet) Delete(VirtualMeshCertificateSigningRequest ezkube.ResourceId) {
	s.set.Delete(VirtualMeshCertificateSigningRequest)
}

func (s *virtualMeshCertificateSigningRequestSet) Union(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet {
	return NewVirtualMeshCertificateSigningRequestSet(append(s.List(), set.List()...)...)
}

func (s *virtualMeshCertificateSigningRequestSet) Difference(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet {
	newSet := s.set.Difference(makeGenericVirtualMeshCertificateSigningRequestSet(set.List()))
	return &virtualMeshCertificateSigningRequestSet{set: newSet}
}

func (s *virtualMeshCertificateSigningRequestSet) Intersection(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet {
	newSet := s.set.Intersection(makeGenericVirtualMeshCertificateSigningRequestSet(set.List()))
	var virtualMeshCertificateSigningRequestList []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	for _, obj := range newSet.List() {
		virtualMeshCertificateSigningRequestList = append(virtualMeshCertificateSigningRequestList, obj.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest))
	}
	return NewVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList...)
}

func (s *virtualMeshCertificateSigningRequestSet) Find(id ezkube.ResourceId) (*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest, error) {
	obj, err := s.set.Find(&security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest), nil
}

func (s *virtualMeshCertificateSigningRequestSet) Length() int {
	return s.set.Length()
}
