// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/core/v1alpha1/selector.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Global selector used to select resources from any set of clusters, namespaces, and/or labels
//
//Specifies a method by which to select pods within a mesh for the application of rules and policies.
//
//Only one of (labels + namespaces + cluster) or (resource refs) may be provided. If all four are provided, it will be
//considered an error, and the Status of the top level resource will be updated to reflect an IllegalSelection.
//
//Currently only selection on the local cluster is supported, indicated by a nil cluster field.
//
//Valid:
//1.
//selector:
//labels:
//foo: bar
//hello: world
//namespaces:
//- default
//cluster: "cluster-name"
//2.
//selector:
//refs:
//- name: foo
//namespace: bar
//
//Invalid:
//1.
//selector:
//labels:
//foo: bar
//hello: world
//namespaces:
//- default
//cluster: "cluster-name"
//refs:
//- name: foo
//namespace: bar
//
//By default labels will select across all namespaces, unless a list of namespaces is provided, in which case
//it will only select from those. An empty or nil list is equal to AllNamespaces.
//
//If no labels are given, and only namespaces, the full list of resources from the namespace will be selected.
//
//The following selector will select all resources with the following labels in every namespace, in the local cluster:
//
//selector:
//labels:
//foo: bar
//hello: world
//
//Whereas the next selector will only select from the specified namespaces (foo, bar), in the local cluster:
//
//selector:
//labels:
//foo: bar
//hello: world
//namespaces
//- foo
//- bar
//
//This final selector will select all resources of a given type in the target namespace (foo), in the local cluster:
//
//selector
//namespaces
//- foo
//- bar
//labels:
//hello: world
//
//
type Selector struct {
	// map of labels to match against
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// list of namespaces to search
	Namespaces []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// If empty string or nil, select in the cluster local to the enclosing resource, else select in the referenced remote cluster
	Cluster *types.StringValue `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	//
	//Apply the selector to one or more services by adding their refs here.
	//If the resources are not in the local cluster, the "cluster" field must be populated with the remote cluster name.
	Refs                 []*ResourceRef `protobuf:"bytes,4,rep,name=refs,proto3" json:"refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Selector) Reset()         { *m = Selector{} }
func (m *Selector) String() string { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()    {}
func (*Selector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca43acbd26ca19e, []int{0}
}
func (m *Selector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selector.Unmarshal(m, b)
}
func (m *Selector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selector.Marshal(b, m, deterministic)
}
func (m *Selector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selector.Merge(m, src)
}
func (m *Selector) XXX_Size() int {
	return xxx_messageInfo_Selector.Size(m)
}
func (m *Selector) XXX_DiscardUnknown() {
	xxx_messageInfo_Selector.DiscardUnknown(m)
}

var xxx_messageInfo_Selector proto.InternalMessageInfo

func (m *Selector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Selector) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *Selector) GetCluster() *types.StringValue {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *Selector) GetRefs() []*ResourceRef {
	if m != nil {
		return m.Refs
	}
	return nil
}

//
//Selector capable of selecting specific service identities. Useful for binding policy rules.
//Either (namespaces, cluster, service_account_names) or service_accounts can be specified.
//If all fields are omitted, any source identity is permitted.
type IdentitySelector struct {
	// Types that are valid to be assigned to IdentitySelectorType:
	//	*IdentitySelector_Matcher_
	//	*IdentitySelector_ServiceAccountRefs_
	IdentitySelectorType isIdentitySelector_IdentitySelectorType `protobuf_oneof:"identity_selector_type"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *IdentitySelector) Reset()         { *m = IdentitySelector{} }
func (m *IdentitySelector) String() string { return proto.CompactTextString(m) }
func (*IdentitySelector) ProtoMessage()    {}
func (*IdentitySelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca43acbd26ca19e, []int{1}
}
func (m *IdentitySelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentitySelector.Unmarshal(m, b)
}
func (m *IdentitySelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentitySelector.Marshal(b, m, deterministic)
}
func (m *IdentitySelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentitySelector.Merge(m, src)
}
func (m *IdentitySelector) XXX_Size() int {
	return xxx_messageInfo_IdentitySelector.Size(m)
}
func (m *IdentitySelector) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentitySelector.DiscardUnknown(m)
}

var xxx_messageInfo_IdentitySelector proto.InternalMessageInfo

type isIdentitySelector_IdentitySelectorType interface {
	isIdentitySelector_IdentitySelectorType()
	Equal(interface{}) bool
}

type IdentitySelector_Matcher_ struct {
	Matcher *IdentitySelector_Matcher `protobuf:"bytes,1,opt,name=matcher,proto3,oneof" json:"matcher,omitempty"`
}
type IdentitySelector_ServiceAccountRefs_ struct {
	ServiceAccountRefs *IdentitySelector_ServiceAccountRefs `protobuf:"bytes,2,opt,name=service_account_refs,json=serviceAccountRefs,proto3,oneof" json:"service_account_refs,omitempty"`
}

func (*IdentitySelector_Matcher_) isIdentitySelector_IdentitySelectorType()            {}
func (*IdentitySelector_ServiceAccountRefs_) isIdentitySelector_IdentitySelectorType() {}

func (m *IdentitySelector) GetIdentitySelectorType() isIdentitySelector_IdentitySelectorType {
	if m != nil {
		return m.IdentitySelectorType
	}
	return nil
}

func (m *IdentitySelector) GetMatcher() *IdentitySelector_Matcher {
	if x, ok := m.GetIdentitySelectorType().(*IdentitySelector_Matcher_); ok {
		return x.Matcher
	}
	return nil
}

func (m *IdentitySelector) GetServiceAccountRefs() *IdentitySelector_ServiceAccountRefs {
	if x, ok := m.GetIdentitySelectorType().(*IdentitySelector_ServiceAccountRefs_); ok {
		return x.ServiceAccountRefs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IdentitySelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IdentitySelector_Matcher_)(nil),
		(*IdentitySelector_ServiceAccountRefs_)(nil),
	}
}

type IdentitySelector_Matcher struct {
	// Namespaces to allow. If not set, any namespace is allowed.
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Cluster to allow. If not set, any cluster is allowed.
	Clusters             []string `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentitySelector_Matcher) Reset()         { *m = IdentitySelector_Matcher{} }
func (m *IdentitySelector_Matcher) String() string { return proto.CompactTextString(m) }
func (*IdentitySelector_Matcher) ProtoMessage()    {}
func (*IdentitySelector_Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca43acbd26ca19e, []int{1, 0}
}
func (m *IdentitySelector_Matcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentitySelector_Matcher.Unmarshal(m, b)
}
func (m *IdentitySelector_Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentitySelector_Matcher.Marshal(b, m, deterministic)
}
func (m *IdentitySelector_Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentitySelector_Matcher.Merge(m, src)
}
func (m *IdentitySelector_Matcher) XXX_Size() int {
	return xxx_messageInfo_IdentitySelector_Matcher.Size(m)
}
func (m *IdentitySelector_Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentitySelector_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_IdentitySelector_Matcher proto.InternalMessageInfo

func (m *IdentitySelector_Matcher) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *IdentitySelector_Matcher) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type IdentitySelector_ServiceAccountRefs struct {
	// List of ServiceAccounts to allow. If not set, any ServiceAccount is allowed.
	ServiceAccounts      []*ResourceRef `protobuf:"bytes,1,rep,name=service_accounts,json=serviceAccounts,proto3" json:"service_accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *IdentitySelector_ServiceAccountRefs) Reset()         { *m = IdentitySelector_ServiceAccountRefs{} }
func (m *IdentitySelector_ServiceAccountRefs) String() string { return proto.CompactTextString(m) }
func (*IdentitySelector_ServiceAccountRefs) ProtoMessage()    {}
func (*IdentitySelector_ServiceAccountRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca43acbd26ca19e, []int{1, 1}
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Unmarshal(m, b)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Marshal(b, m, deterministic)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Merge(m, src)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_Size() int {
	return xxx_messageInfo_IdentitySelector_ServiceAccountRefs.Size(m)
}
func (m *IdentitySelector_ServiceAccountRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentitySelector_ServiceAccountRefs.DiscardUnknown(m)
}

var xxx_messageInfo_IdentitySelector_ServiceAccountRefs proto.InternalMessageInfo

func (m *IdentitySelector_ServiceAccountRefs) GetServiceAccounts() []*ResourceRef {
	if m != nil {
		return m.ServiceAccounts
	}
	return nil
}

func init() {
	proto.RegisterType((*Selector)(nil), "core.zephyr.solo.io.Selector")
	proto.RegisterMapType((map[string]string)(nil), "core.zephyr.solo.io.Selector.LabelsEntry")
	proto.RegisterType((*IdentitySelector)(nil), "core.zephyr.solo.io.IdentitySelector")
	proto.RegisterType((*IdentitySelector_Matcher)(nil), "core.zephyr.solo.io.IdentitySelector.Matcher")
	proto.RegisterType((*IdentitySelector_ServiceAccountRefs)(nil), "core.zephyr.solo.io.IdentitySelector.ServiceAccountRefs")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/core/v1alpha1/selector.proto", fileDescriptor_6ca43acbd26ca19e)
}

var fileDescriptor_6ca43acbd26ca19e = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x5f, 0x92, 0xb1, 0x6e, 0xee, 0x81, 0xca, 0x54, 0x28, 0x8a, 0x50, 0x15, 0xed, 0xd4, 0x1d,
	0xea, 0x68, 0x05, 0xa1, 0xc1, 0xad, 0x93, 0x26, 0x6d, 0x1a, 0x1c, 0x70, 0x25, 0x0e, 0x5c, 0x2a,
	0xd7, 0xbc, 0xfc, 0x61, 0x69, 0x6c, 0xd9, 0x4e, 0x51, 0xf8, 0x12, 0xdc, 0xf8, 0x0c, 0x7c, 0x2e,
	0x3e, 0x09, 0x8a, 0x93, 0x94, 0xd1, 0x56, 0xea, 0x6e, 0xcf, 0xcf, 0xbf, 0xf7, 0x7b, 0xbf, 0x9f,
	0x9f, 0x1f, 0x9a, 0x25, 0x99, 0x49, 0xcb, 0x25, 0xe1, 0x62, 0x15, 0x69, 0x91, 0x8b, 0x49, 0x26,
	0xa2, 0x15, 0xe8, 0x74, 0x22, 0x95, 0xf8, 0x06, 0xdc, 0xe8, 0x88, 0xc9, 0x2c, 0xe2, 0x42, 0x41,
	0xb4, 0xbe, 0x64, 0xb9, 0x4c, 0xd9, 0x65, 0xa4, 0x21, 0x07, 0x6e, 0x84, 0x22, 0x52, 0x09, 0x23,
	0xf0, 0x8b, 0xfa, 0x96, 0xfc, 0x00, 0x99, 0x56, 0x8a, 0xd4, 0x1c, 0x24, 0x13, 0xc1, 0x28, 0x11,
	0x22, 0xc9, 0x21, 0xb2, 0x90, 0x65, 0x19, 0x47, 0xdf, 0x15, 0x93, 0x12, 0x94, 0x6e, 0x8a, 0x82,
	0x8b, 0x43, 0x4d, 0x14, 0xc4, 0x2d, 0x74, 0x98, 0x88, 0x44, 0xd8, 0x30, 0xaa, 0xa3, 0x26, 0x7b,
	0xfe, 0xcb, 0x45, 0xa7, 0xf3, 0x56, 0x08, 0x9e, 0xa1, 0x93, 0x9c, 0x2d, 0x21, 0xd7, 0xbe, 0x13,
	0x7a, 0xe3, 0xfe, 0xf4, 0x82, 0xec, 0xd1, 0x44, 0x3a, 0x38, 0xf9, 0x60, 0xb1, 0x37, 0x85, 0x51,
	0x15, 0x6d, 0x0b, 0xf1, 0x08, 0xa1, 0x82, 0xad, 0x40, 0x4b, 0xc6, 0x41, 0xfb, 0x6e, 0xe8, 0x8d,
	0xcf, 0xe8, 0xa3, 0x0c, 0x7e, 0x8b, 0x7a, 0x3c, 0x2f, 0xb5, 0x01, 0xe5, 0x7b, 0xa1, 0x33, 0xee,
	0x4f, 0x5f, 0x91, 0xc6, 0x22, 0xe9, 0x2c, 0x92, 0xb9, 0x51, 0x59, 0x91, 0x7c, 0x66, 0x79, 0x09,
	0xb4, 0x03, 0xe3, 0x37, 0xe8, 0x58, 0x41, 0xac, 0xfd, 0x63, 0x2b, 0x2c, 0xdc, 0x2b, 0x8c, 0x82,
	0x16, 0xa5, 0xe2, 0x40, 0x21, 0xa6, 0x16, 0x1d, 0xbc, 0x43, 0xfd, 0x47, 0x22, 0xf1, 0x00, 0x79,
	0x0f, 0x50, 0xf9, 0x4e, 0xe8, 0x8c, 0xcf, 0x68, 0x1d, 0xe2, 0x21, 0x7a, 0xb6, 0xae, 0x1b, 0xf9,
	0xae, 0xcd, 0x35, 0x87, 0xf7, 0xee, 0x95, 0x73, 0xfe, 0xd3, 0x43, 0x83, 0xbb, 0xaf, 0x50, 0x98,
	0xcc, 0x54, 0x9b, 0x07, 0xba, 0x43, 0xbd, 0x15, 0x33, 0x3c, 0x05, 0x65, 0x49, 0xfa, 0xd3, 0xc9,
	0x5e, 0x21, 0xdb, 0x75, 0xe4, 0x63, 0x53, 0x74, 0x7b, 0x44, 0xbb, 0x7a, 0x9c, 0xa3, 0xa1, 0x06,
	0xb5, 0xce, 0x38, 0x2c, 0x18, 0xe7, 0xa2, 0x2c, 0xcc, 0xc2, 0x1a, 0x74, 0x2d, 0xef, 0xd5, 0xd3,
	0x78, 0xe7, 0x0d, 0xc3, 0xac, 0x21, 0xa0, 0x10, 0xeb, 0xdb, 0x23, 0x8a, 0xf5, 0x4e, 0x36, 0xb8,
	0x41, 0xbd, 0x56, 0xc3, 0xd6, 0x84, 0x9c, 0x9d, 0x09, 0x05, 0xe8, 0xb4, 0x7d, 0xf4, 0x6e, 0x7e,
	0x9b, 0x73, 0xc0, 0x10, 0xde, 0x6d, 0x89, 0xef, 0xd1, 0x60, 0xcb, 0x4a, 0xf7, 0x81, 0x0e, 0xcf,
	0xe9, 0xf9, 0xff, 0x62, 0xf5, 0xb5, 0x8f, 0x5e, 0x66, 0xad, 0xcd, 0x45, 0xb7, 0x21, 0x0b, 0x53,
	0x49, 0xb8, 0xfe, 0xf4, 0xfb, 0xcf, 0xc8, 0xf9, 0x72, 0x7f, 0x70, 0xd3, 0xe4, 0x43, 0xb2, 0x59,
	0x84, 0xad, 0xd6, 0xff, 0xf6, 0xa2, 0x66, 0xd4, 0xcb, 0x13, 0xfb, 0xe9, 0x5e, 0xff, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x67, 0xab, 0xad, 0xca, 0xbf, 0x03, 0x00, 0x00,
}

func (this *Selector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Selector)
	if !ok {
		that2, ok := that.(Selector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if !this.Refs[i].Equal(that1.Refs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentitySelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector)
	if !ok {
		that2, ok := that.(IdentitySelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IdentitySelectorType == nil {
		if this.IdentitySelectorType != nil {
			return false
		}
	} else if this.IdentitySelectorType == nil {
		return false
	} else if !this.IdentitySelectorType.Equal(that1.IdentitySelectorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentitySelector_Matcher_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_Matcher_)
	if !ok {
		that2, ok := that.(IdentitySelector_Matcher_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Matcher.Equal(that1.Matcher) {
		return false
	}
	return true
}
func (this *IdentitySelector_ServiceAccountRefs_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_ServiceAccountRefs_)
	if !ok {
		that2, ok := that.(IdentitySelector_ServiceAccountRefs_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceAccountRefs.Equal(that1.ServiceAccountRefs) {
		return false
	}
	return true
}
func (this *IdentitySelector_Matcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_Matcher)
	if !ok {
		that2, ok := that.(IdentitySelector_Matcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if this.Clusters[i] != that1.Clusters[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentitySelector_ServiceAccountRefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentitySelector_ServiceAccountRefs)
	if !ok {
		that2, ok := that.(IdentitySelector_ServiceAccountRefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServiceAccounts) != len(that1.ServiceAccounts) {
		return false
	}
	for i := range this.ServiceAccounts {
		if !this.ServiceAccounts[i].Equal(that1.ServiceAccounts[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
