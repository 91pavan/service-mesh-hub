/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeshGroupLister helps list MeshGroups.
type MeshGroupLister interface {
	// List lists all MeshGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MeshGroup, err error)
	// MeshGroups returns an object that can list and get MeshGroups.
	MeshGroups(namespace string) MeshGroupNamespaceLister
	MeshGroupListerExpansion
}

// meshGroupLister implements the MeshGroupLister interface.
type meshGroupLister struct {
	indexer cache.Indexer
}

// NewMeshGroupLister returns a new MeshGroupLister.
func NewMeshGroupLister(indexer cache.Indexer) MeshGroupLister {
	return &meshGroupLister{indexer: indexer}
}

// List lists all MeshGroups in the indexer.
func (s *meshGroupLister) List(selector labels.Selector) (ret []*v1alpha1.MeshGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshGroup))
	})
	return ret, err
}

// MeshGroups returns an object that can list and get MeshGroups.
func (s *meshGroupLister) MeshGroups(namespace string) MeshGroupNamespaceLister {
	return meshGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeshGroupNamespaceLister helps list and get MeshGroups.
type MeshGroupNamespaceLister interface {
	// List lists all MeshGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MeshGroup, err error)
	// Get retrieves the MeshGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MeshGroup, error)
	MeshGroupNamespaceListerExpansion
}

// meshGroupNamespaceLister implements the MeshGroupNamespaceLister
// interface.
type meshGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeshGroups in the indexer for a given namespace.
func (s meshGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MeshGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshGroup))
	})
	return ret, err
}

// Get retrieves the MeshGroup from the indexer for a given namespace and name.
func (s meshGroupNamespaceLister) Get(name string) (*v1alpha1.MeshGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("meshgroup"), name)
	}
	return obj.(*v1alpha1.MeshGroup), nil
}
