// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"log"
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewClusterRbacConfig(namespace, name string) *ClusterRbacConfig {
	clusterrbacconfig := &ClusterRbacConfig{}
	clusterrbacconfig.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return clusterrbacconfig
}

func (r *ClusterRbacConfig) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *ClusterRbacConfig) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ClusterRbacConfig) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	metaCopy.Generation = 0
	// investigate zeroing out owner refs as well
	return hashutils.HashAll(
		metaCopy,
		r.Mode,
		r.Inclusion,
		r.Exclusion,
		r.EnforcementMode,
	)
}

func (r *ClusterRbacConfig) GroupVersionKind() schema.GroupVersionKind {
	return ClusterRbacConfigGVK
}

type ClusterRbacConfigList []*ClusterRbacConfig

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ClusterRbacConfigList) Find(namespace, name string) (*ClusterRbacConfig, error) {
	for _, clusterRbacConfig := range list {
		if clusterRbacConfig.GetMetadata().Name == name {
			if namespace == "" || clusterRbacConfig.GetMetadata().Namespace == namespace {
				return clusterRbacConfig, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find clusterRbacConfig %v.%v", namespace, name)
}

func (list ClusterRbacConfigList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, clusterRbacConfig := range list {
		ress = append(ress, clusterRbacConfig)
	}
	return ress
}

func (list ClusterRbacConfigList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, clusterRbacConfig := range list {
		ress = append(ress, clusterRbacConfig)
	}
	return ress
}

func (list ClusterRbacConfigList) Names() []string {
	var names []string
	for _, clusterRbacConfig := range list {
		names = append(names, clusterRbacConfig.GetMetadata().Name)
	}
	return names
}

func (list ClusterRbacConfigList) NamespacesDotNames() []string {
	var names []string
	for _, clusterRbacConfig := range list {
		names = append(names, clusterRbacConfig.GetMetadata().Namespace+"."+clusterRbacConfig.GetMetadata().Name)
	}
	return names
}

func (list ClusterRbacConfigList) Sort() ClusterRbacConfigList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ClusterRbacConfigList) Clone() ClusterRbacConfigList {
	var clusterRbacConfigList ClusterRbacConfigList
	for _, clusterRbacConfig := range list {
		clusterRbacConfigList = append(clusterRbacConfigList, resources.Clone(clusterRbacConfig).(*ClusterRbacConfig))
	}
	return clusterRbacConfigList
}

func (list ClusterRbacConfigList) Each(f func(element *ClusterRbacConfig)) {
	for _, clusterRbacConfig := range list {
		f(clusterRbacConfig)
	}
}

func (list ClusterRbacConfigList) EachResource(f func(element resources.Resource)) {
	for _, clusterRbacConfig := range list {
		f(clusterRbacConfig)
	}
}

func (list ClusterRbacConfigList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ClusterRbacConfig) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for ClusterRbacConfig

func (o *ClusterRbacConfig) GetObjectKind() schema.ObjectKind {
	t := ClusterRbacConfigCrd.TypeMeta()
	return &t
}

func (o *ClusterRbacConfig) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ClusterRbacConfig)
}

func (o *ClusterRbacConfig) DeepCopyInto(out *ClusterRbacConfig) {
	clone := resources.Clone(o).(*ClusterRbacConfig)
	*out = *clone
}

var (
	ClusterRbacConfigCrd = crd.NewCrd(
		"clusterrbacconfigs",
		ClusterRbacConfigGVK.Group,
		ClusterRbacConfigGVK.Version,
		ClusterRbacConfigGVK.Kind,
		"crc",
		true,
		&ClusterRbacConfig{})
)

func init() {
	if err := crd.AddCrd(ClusterRbacConfigCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	ClusterRbacConfigGVK = schema.GroupVersionKind{
		Version: "v1alpha1",
		Group:   "rbac.istio.io",
		Kind:    "ClusterRbacConfig",
	}
)
