// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/external/istio/rbac/v1alpha1/rbac.proto

//// $title: RBAC
//// $description: Configuration for Role Based Access Control.
//// $location: https://istio.io/docs/reference/config/authorization/istio.rbac.v1alpha1.html
//
//// Istio RBAC (Role Based Access Control) defines ServiceRole and ServiceRoleBinding
//// objects.
////
//// A ServiceRole specification includes a list of rules (permissions). Each rule has
//// the following standard fields:
////
////   * services: a list of services.
////   * methods: A list of HTTP methods. You can set the value to `*` to include all HTTP methods.
////              This field should not be set for TCP services. The policy will be ignored.
////              For gRPC services, only `POST` is allowed; other methods will result in denying services.
////   * paths: HTTP paths or gRPC methods. Note that gRPC methods should be
////     presented in the form of "/packageName.serviceName/methodName" and are case sensitive.
////
//// In addition to the standard fields, operators can also use custom keys in the `constraints` field,
//// the supported keys are listed in the "constraints and properties" page.
////
//// Below is an example of ServiceRole object "product-viewer", which has "read" ("GET" and "HEAD")
//// access to "products.svc.cluster.local" service at versions "v1" and "v2". "path" is not specified,
//// so it applies to any path in the service.
////
//// ```yaml
//// apiVersion: "rbac.istio.io/v1alpha1"
//// kind: ServiceRole
//// metadata:
////   name: products-viewer
////   namespace: default
//// spec:
////   rules:
////   - services: ["products.svc.cluster.local"]
////     methods: ["GET", "HEAD"]
////     constraints:
////     - key: "destination.labels[version]"
////       values: ["v1", "v2"]
//// ```
////
//// A ServiceRoleBinding specification includes two parts:
////
////  * The `roleRef` field that refers to a ServiceRole object in the same namespace.
////  * A list of `subjects` that are assigned the roles.
////
//// In addition to a simple `user` field, operators can also use custom keys in the `properties` field,
//// the supported keys are listed in the "constraints and properties" page.
////
//// Below is an example of ServiceRoleBinding object "test-binding-products", which binds two subjects
//// to ServiceRole "product-viewer":
////
////   * User "alice@yahoo.com"
////   * Services in "abc" namespace.
////
//// ```yaml
//// apiVersion: "rbac.istio.io/v1alpha1"
//// kind: ServiceRoleBinding
//// metadata:
////   name: test-binding-products
////   namespace: default
//// spec:
////   subjects:
////   - user: alice@yahoo.com
////   - properties:
////       source.namespace: "abc"
////   roleRef:
////     kind: ServiceRole
////     name: "products-viewer"
//// ```

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// $hide_from_docs
// RBAC ServiceRoleBinding enforcement mode, used to verify new ServiceRoleBinding
// configs work as expected before rolling to production. RBAC engine only logs results
// from configs that are in permissive mode, and discards result before returning
// to the user.
type EnforcementMode int32

const (
	// Policy in ENFORCED mode has impact on user experience.
	// Policy is in ENFORCED mode by default.
	EnforcementMode_ENFORCED EnforcementMode = 0
	// Policy in PERMISSIVE mode isn't enforced and has no impact on users.
	// RBAC engine run policies in PERMISSIVE mode and logs stats.
	EnforcementMode_PERMISSIVE EnforcementMode = 1
)

var EnforcementMode_name = map[int32]string{
	0: "ENFORCED",
	1: "PERMISSIVE",
}

var EnforcementMode_value = map[string]int32{
	"ENFORCED":   0,
	"PERMISSIVE": 1,
}

func (x EnforcementMode) String() string {
	return proto.EnumName(EnforcementMode_name, int32(x))
}

func (EnforcementMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{0}
}

type RbacConfig_Mode int32

const (
	// Disable Istio RBAC completely, Istio RBAC policies will not be enforced.
	RbacConfig_OFF RbacConfig_Mode = 0
	// Enable Istio RBAC for all services and namespaces. Note Istio RBAC is deny-by-default
	// which means all requests will be denied if it's not allowed by RBAC rules.
	RbacConfig_ON RbacConfig_Mode = 1
	// Enable Istio RBAC only for services and namespaces specified in the inclusion field. Any other
	// services and namespaces not in the inclusion field will not be enforced by Istio RBAC policies.
	RbacConfig_ON_WITH_INCLUSION RbacConfig_Mode = 2
	// Enable Istio RBAC for all services and namespaces except those specified in the exclusion field. Any other
	// services and namespaces not in the exclusion field will be enforced by Istio RBAC policies.
	RbacConfig_ON_WITH_EXCLUSION RbacConfig_Mode = 3
)

var RbacConfig_Mode_name = map[int32]string{
	0: "OFF",
	1: "ON",
	2: "ON_WITH_INCLUSION",
	3: "ON_WITH_EXCLUSION",
}

var RbacConfig_Mode_value = map[string]int32{
	"OFF":               0,
	"ON":                1,
	"ON_WITH_INCLUSION": 2,
	"ON_WITH_EXCLUSION": 3,
}

func (x RbacConfig_Mode) String() string {
	return proto.EnumName(RbacConfig_Mode_name, int32(x))
}

func (RbacConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{0, 0}
}

type ClusterRbacConfig_Mode int32

const (
	// Disable Istio RBAC completely, Istio RBAC policies will not be enforced.
	ClusterRbacConfig_OFF ClusterRbacConfig_Mode = 0
	// Enable Istio RBAC for all services and namespaces. Note Istio RBAC is deny-by-default
	// which means all requests will be denied if it's not allowed by RBAC rules.
	ClusterRbacConfig_ON ClusterRbacConfig_Mode = 1
	// Enable Istio RBAC only for services and namespaces specified in the inclusion field. Any other
	// services and namespaces not in the inclusion field will not be enforced by Istio RBAC policies.
	ClusterRbacConfig_ON_WITH_INCLUSION ClusterRbacConfig_Mode = 2
	// Enable Istio RBAC for all services and namespaces except those specified in the exclusion field. Any other
	// services and namespaces not in the exclusion field will be enforced by Istio RBAC policies.
	ClusterRbacConfig_ON_WITH_EXCLUSION ClusterRbacConfig_Mode = 3
)

var ClusterRbacConfig_Mode_name = map[int32]string{
	0: "OFF",
	1: "ON",
	2: "ON_WITH_INCLUSION",
	3: "ON_WITH_EXCLUSION",
}

var ClusterRbacConfig_Mode_value = map[string]int32{
	"OFF":               0,
	"ON":                1,
	"ON_WITH_INCLUSION": 2,
	"ON_WITH_EXCLUSION": 3,
}

func (x ClusterRbacConfig_Mode) String() string {
	return proto.EnumName(ClusterRbacConfig_Mode_name, int32(x))
}

func (ClusterRbacConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{1, 0}
}

//// ServiceRoleBinding assigns a ServiceRole to a list of subjects.
//message ServiceRoleBinding {
//    // Required. List of subjects that are assigned the ServiceRole object.
//    repeated Subject subjects = 1;
//
//    // Required. Reference to the ServiceRole object.
//    RoleRef roleRef = 2;
//
//    // $hide_from_docs
//    // Indicates enforcement mode of the ServiceRoleBinding.
//    EnforcementMode mode = 3;
//
//    // $hide_from_docs
//    // Inline role definition. An inline role is a role that is defined inside an
//    // authorization policy, instead of explicitly defined in a ServiceRole object.
//    // Inline roles can be used for the role definitions that are not intended to
//    // be reused in other bindings, while explicit roles are reusable. Both inline
//    // roles (defined in "actions" field) and explicit roles (defined in ServiceRole)
//    // are supported. Users should use only one of them in a single binding.
//    // For example, the following “product-frontend” AuthorizationPolicy allows “frontend”
//    // service to view “product” service on “/info” path.
//    // ```yaml
//    // apiVersion: "rbac.istio.io/v1alpha1"
//    // kind: AuthorizationPolicy
//    // metadata:
//    //  name: product-frontend
//    //  namespace: ns1
//    // spec:
//    //  selector:
//    //    labels:
//    //      app: product
//    //  allow:
//    //  - subjects:
//    //    - names: ["cluster.local/ns/default/sa/frontend"]
//    //    actions:
//    //    - paths: ["/info"]
//    //      methods: ["GET"]
//    // Required. The set of access rules (permissions) that the role has.
//    repeated AccessRule actions = 4;
//
//    // $hide_from_docs
//    // A `role` inside a ServiceRoleBinding refers to the ServiceRole that this
//    // ServiceRoleBinding binds to. A ServiceRoleBinding can bind to a ServiceRole
//    // in the same namespace or the root namespace. A ServiceRole in the root namespace
//    // represents a mesh global ServiceRole.
//    // The value of `role` is the name of the ServiceRole, and it can start with or without a forward slash ("/").
//    // When a `role` starts with "/", e.g. "/service-viewer", it means that this ServiceRoleBinding
//    // refers to the ServiceRole in the configurable Istio root namespace.
//    // When a `role` starts without "/", this ServiceRoleBinding refers to the ServiceRole in the
//    // same namespace as the AuthorizationPolicy's, which contains said ServiceRoleBinding.
//    string role = 5;
//}
//
//// Subject defines an identity. The identity is either a user or identified by a set of `properties`.
//// The supported keys in `properties` are listed in "constraint and properties" page.
//message Subject {
//    // Optional. The user name/ID that the subject represents.
//    string user = 1;
//
//    // $hide_from_docs
//    // Optional. A list of subject names. This is matched to the
//    // `source.principal` attribute. If one of subject names is "*", it matches to a subject with any name.
//    // Prefix and suffix matches are supported.
//    repeated string names = 4;
//
//    // $hide_from_docs
//    // Optional. A list of subject names that must not be matched.
//    repeated string not_names = 5;
//
//    // $hide_from_docs
//    // Optional. The group that the subject belongs to.
//    // Deprecated. Use groups and not_groups instead.
//    string group = 2 [deprecated = true];
//
//    // $hide_from_docs
//    // Optional. A list of groups that the subject represents. This is matched to the
//    // `request.auth.claims[groups]` attribute. If not specified, it applies to any groups.
//    repeated string groups = 6;
//
//    // $hide_from_docs
//    // Optional. A list of groups that must not be matched.
//    repeated string not_groups = 7;
//
//    // $hide_from_docs
//    // Optional. A list of namespaces that the subject represents. This is matched to
//    // the `source.namespace` attribute. If not specified, it applies to any namespaces.
//    repeated string namespaces = 8;
//
//    // $hide_from_docs
//    // Optional. A list of namespaces that must not be matched.
//    repeated string not_namespaces = 9;
//
//    // $hide_from_docs
//    // Optional. A list of IP address or CIDR ranges that the subject represents.
//    // E.g. 192.168.100.2 or 10.1.0.0/16. If not specified, it applies to any IP addresses.
//    repeated string ips = 10;
//
//    // $hide_from_docs
//    // Optional. A list of IP addresses or CIDR ranges that must not be matched.
//    repeated string not_ips = 11;
//
//    // Optional. The set of properties that identify the subject.
//    map<string, string> properties = 3;
//
//    // $hide_from_docs
//    // Next available field number: 12
//}
//
//// RoleRef refers to a role object.
//message RoleRef {
//    // Required. The type of the role being referenced.
//    // Currently, "ServiceRole" is the only supported value for "kind".
//    string kind = 1;
//
//    // Required. The name of the ServiceRole object being referenced.
//    // The ServiceRole object must be in the same namespace as the ServiceRoleBinding object.
//    string name = 2;
//}
//
//// RbacConfig implements the ClusterRbaConfig Custom Resource Definition for controlling Istio RBAC behavior.
//// The ClusterRbaConfig Custom Resource is a singleton where only one ClusterRbaConfig should be created
//// globally in the mesh and the namespace should be the same to other Istio components, which usually is `istio-system`.
////
//// Below is an example of an `ClusterRbacConfig` resource called `istio-rbac-config` which enables Istio RBAC for all
//// services in the default namespace.
////
//// ```yaml
//// apiVersion: "rbac.istio.io/v1alpha1"
//// kind: ClusterRbacConfig
//// metadata:
////   name: default
////   namespace: istio-system
//// spec:
////   mode: ON_WITH_INCLUSION
////   inclusion:
////     namespaces: [ "default" ]
//// ```
type RbacConfig struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by operator during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// Istio RBAC mode.
	Mode RbacConfig_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=istio.rbac.v1alpha1.RbacConfig_Mode" json:"mode,omitempty"`
	// A list of services or namespaces that should be enforced by Istio RBAC policies. Note: This field have
	// effect only when mode is ON_WITH_INCLUSION and will be ignored for any other modes.
	Inclusion *RbacConfig_Target `protobuf:"bytes,2,opt,name=inclusion,proto3" json:"inclusion,omitempty"`
	// A list of services or namespaces that should not be enforced by Istio RBAC policies. Note: This field have
	// effect only when mode is ON_WITH_EXCLUSION and will be ignored for any other modes.
	Exclusion *RbacConfig_Target `protobuf:"bytes,3,opt,name=exclusion,proto3" json:"exclusion,omitempty"`
	// $hide_from_docs
	// Indicates enforcement mode of the RbacConfig, in ENFORCED mode by default.
	// It's used to verify new RbacConfig work as expected before rolling to production.
	// When setting as PERMISSIVE, RBAC isn't enforced and has no impact on users.
	// RBAC engine run RbacConfig in PERMISSIVE mode and logs stats.
	// Invalid to set RbacConfig in PERMISSIVE and ServiceRoleBinding in ENFORCED mode.
	EnforcementMode      EnforcementMode `protobuf:"varint,4,opt,name=enforcement_mode,json=enforcementMode,proto3,enum=istio.rbac.v1alpha1.EnforcementMode" json:"enforcement_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RbacConfig) Reset()         { *m = RbacConfig{} }
func (m *RbacConfig) String() string { return proto.CompactTextString(m) }
func (*RbacConfig) ProtoMessage()    {}
func (*RbacConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{0}
}
func (m *RbacConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RbacConfig.Unmarshal(m, b)
}
func (m *RbacConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RbacConfig.Marshal(b, m, deterministic)
}
func (m *RbacConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RbacConfig.Merge(m, src)
}
func (m *RbacConfig) XXX_Size() int {
	return xxx_messageInfo_RbacConfig.Size(m)
}
func (m *RbacConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RbacConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RbacConfig proto.InternalMessageInfo

func (m *RbacConfig) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *RbacConfig) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *RbacConfig) GetMode() RbacConfig_Mode {
	if m != nil {
		return m.Mode
	}
	return RbacConfig_OFF
}

func (m *RbacConfig) GetInclusion() *RbacConfig_Target {
	if m != nil {
		return m.Inclusion
	}
	return nil
}

func (m *RbacConfig) GetExclusion() *RbacConfig_Target {
	if m != nil {
		return m.Exclusion
	}
	return nil
}

func (m *RbacConfig) GetEnforcementMode() EnforcementMode {
	if m != nil {
		return m.EnforcementMode
	}
	return EnforcementMode_ENFORCED
}

// Target defines a list of services or namespaces.
type RbacConfig_Target struct {
	// A list of services.
	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// A list of namespaces.
	Namespaces           []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RbacConfig_Target) Reset()         { *m = RbacConfig_Target{} }
func (m *RbacConfig_Target) String() string { return proto.CompactTextString(m) }
func (*RbacConfig_Target) ProtoMessage()    {}
func (*RbacConfig_Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{0, 0}
}
func (m *RbacConfig_Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RbacConfig_Target.Unmarshal(m, b)
}
func (m *RbacConfig_Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RbacConfig_Target.Marshal(b, m, deterministic)
}
func (m *RbacConfig_Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RbacConfig_Target.Merge(m, src)
}
func (m *RbacConfig_Target) XXX_Size() int {
	return xxx_messageInfo_RbacConfig_Target.Size(m)
}
func (m *RbacConfig_Target) XXX_DiscardUnknown() {
	xxx_messageInfo_RbacConfig_Target.DiscardUnknown(m)
}

var xxx_messageInfo_RbacConfig_Target proto.InternalMessageInfo

func (m *RbacConfig_Target) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *RbacConfig_Target) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

//
//Necessary to have a second nearly identical object, because Istio builds the 2
//crds from the single proto
type ClusterRbacConfig struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by operator during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// Istio RBAC mode.
	Mode ClusterRbacConfig_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=istio.rbac.v1alpha1.ClusterRbacConfig_Mode" json:"mode,omitempty"`
	// A list of services or namespaces that should be enforced by Istio RBAC policies. Note: This field have
	// effect only when mode is ON_WITH_INCLUSION and will be ignored for any other modes.
	Inclusion *ClusterRbacConfig_Target `protobuf:"bytes,2,opt,name=inclusion,proto3" json:"inclusion,omitempty"`
	// A list of services or namespaces that should not be enforced by Istio RBAC policies. Note: This field have
	// effect only when mode is ON_WITH_EXCLUSION and will be ignored for any other modes.
	Exclusion *ClusterRbacConfig_Target `protobuf:"bytes,3,opt,name=exclusion,proto3" json:"exclusion,omitempty"`
	// $hide_from_docs
	// Indicates enforcement mode of the RbacConfig, in ENFORCED mode by default.
	// It's used to verify new RbacConfig work as expected before rolling to production.
	// When setting as PERMISSIVE, RBAC isn't enforced and has no impact on users.
	// RBAC engine run RbacConfig in PERMISSIVE mode and logs stats.
	// Invalid to set RbacConfig in PERMISSIVE and ServiceRoleBinding in ENFORCED mode.
	EnforcementMode      EnforcementMode `protobuf:"varint,4,opt,name=enforcement_mode,json=enforcementMode,proto3,enum=istio.rbac.v1alpha1.EnforcementMode" json:"enforcement_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ClusterRbacConfig) Reset()         { *m = ClusterRbacConfig{} }
func (m *ClusterRbacConfig) String() string { return proto.CompactTextString(m) }
func (*ClusterRbacConfig) ProtoMessage()    {}
func (*ClusterRbacConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{1}
}
func (m *ClusterRbacConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterRbacConfig.Unmarshal(m, b)
}
func (m *ClusterRbacConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterRbacConfig.Marshal(b, m, deterministic)
}
func (m *ClusterRbacConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterRbacConfig.Merge(m, src)
}
func (m *ClusterRbacConfig) XXX_Size() int {
	return xxx_messageInfo_ClusterRbacConfig.Size(m)
}
func (m *ClusterRbacConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterRbacConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterRbacConfig proto.InternalMessageInfo

func (m *ClusterRbacConfig) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *ClusterRbacConfig) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *ClusterRbacConfig) GetMode() ClusterRbacConfig_Mode {
	if m != nil {
		return m.Mode
	}
	return ClusterRbacConfig_OFF
}

func (m *ClusterRbacConfig) GetInclusion() *ClusterRbacConfig_Target {
	if m != nil {
		return m.Inclusion
	}
	return nil
}

func (m *ClusterRbacConfig) GetExclusion() *ClusterRbacConfig_Target {
	if m != nil {
		return m.Exclusion
	}
	return nil
}

func (m *ClusterRbacConfig) GetEnforcementMode() EnforcementMode {
	if m != nil {
		return m.EnforcementMode
	}
	return EnforcementMode_ENFORCED
}

// Target defines a list of services or namespaces.
type ClusterRbacConfig_Target struct {
	// A list of services.
	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// A list of namespaces.
	Namespaces           []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterRbacConfig_Target) Reset()         { *m = ClusterRbacConfig_Target{} }
func (m *ClusterRbacConfig_Target) String() string { return proto.CompactTextString(m) }
func (*ClusterRbacConfig_Target) ProtoMessage()    {}
func (*ClusterRbacConfig_Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_74695df94c167244, []int{1, 0}
}
func (m *ClusterRbacConfig_Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterRbacConfig_Target.Unmarshal(m, b)
}
func (m *ClusterRbacConfig_Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterRbacConfig_Target.Marshal(b, m, deterministic)
}
func (m *ClusterRbacConfig_Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterRbacConfig_Target.Merge(m, src)
}
func (m *ClusterRbacConfig_Target) XXX_Size() int {
	return xxx_messageInfo_ClusterRbacConfig_Target.Size(m)
}
func (m *ClusterRbacConfig_Target) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterRbacConfig_Target.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterRbacConfig_Target proto.InternalMessageInfo

func (m *ClusterRbacConfig_Target) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ClusterRbacConfig_Target) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio.rbac.v1alpha1.EnforcementMode", EnforcementMode_name, EnforcementMode_value)
	proto.RegisterEnum("istio.rbac.v1alpha1.RbacConfig_Mode", RbacConfig_Mode_name, RbacConfig_Mode_value)
	proto.RegisterEnum("istio.rbac.v1alpha1.ClusterRbacConfig_Mode", ClusterRbacConfig_Mode_name, ClusterRbacConfig_Mode_value)
	proto.RegisterType((*RbacConfig)(nil), "istio.rbac.v1alpha1.RbacConfig")
	proto.RegisterType((*RbacConfig_Target)(nil), "istio.rbac.v1alpha1.RbacConfig.Target")
	proto.RegisterType((*ClusterRbacConfig)(nil), "istio.rbac.v1alpha1.ClusterRbacConfig")
	proto.RegisterType((*ClusterRbacConfig_Target)(nil), "istio.rbac.v1alpha1.ClusterRbacConfig.Target")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/external/istio/rbac/v1alpha1/rbac.proto", fileDescriptor_74695df94c167244)
}

var fileDescriptor_74695df94c167244 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x5d, 0x52, 0x53, 0x36, 0x33, 0x6d, 0x99, 0x19, 0x53, 0xa8, 0xd0, 0x36, 0x55, 0x08, 0x0d,
	0xd0, 0x12, 0x6d, 0x5c, 0xa6, 0x5d, 0x90, 0xd6, 0xa5, 0x50, 0x6d, 0x6d, 0x50, 0x3a, 0xfe, 0x88,
	0x4b, 0xe5, 0xba, 0x6e, 0x6a, 0xd6, 0xc4, 0x51, 0xec, 0x56, 0x3d, 0xf7, 0xd3, 0xf0, 0x11, 0xf8,
	0x08, 0xdc, 0xf8, 0x06, 0x3b, 0xf0, 0x0d, 0x8a, 0xc4, 0x85, 0x13, 0x8a, 0x9b, 0xfe, 0x5b, 0x27,
	0xca, 0x6e, 0x48, 0xdc, 0xe2, 0xf7, 0xfc, 0x9e, 0xfd, 0x9c, 0xa7, 0x1f, 0x3c, 0xf7, 0x99, 0x6c,
	0x75, 0xea, 0x16, 0xe1, 0x81, 0x2d, 0x78, 0x9b, 0xef, 0x33, 0x6e, 0x07, 0x54, 0xb4, 0xf6, 0xa3,
	0x98, 0x7f, 0xa2, 0x44, 0x0a, 0x1b, 0x47, 0xcc, 0xa6, 0x3d, 0x49, 0xe3, 0x10, 0xb7, 0x6d, 0x26,
	0x24, 0xe3, 0x76, 0x5c, 0xc7, 0xc4, 0xee, 0x1e, 0xe0, 0x76, 0xd4, 0xc2, 0x07, 0x6a, 0x65, 0x45,
	0x31, 0x97, 0x1c, 0xdd, 0x57, 0xbc, 0xa5, 0x90, 0x11, 0x9f, 0xdb, 0x56, 0xbe, 0x97, 0x4c, 0x2a,
	0xab, 0xee, 0x81, 0x1d, 0x50, 0x89, 0x1b, 0x58, 0xe2, 0xa1, 0x28, 0xf7, 0xe8, 0x3a, 0x2f, 0x24,
	0x96, 0x1d, 0x91, 0xb2, 0x73, 0xea, 0xd1, 0x3a, 0xe5, 0x37, 0x7d, 0xee, 0x73, 0xf5, 0x69, 0x27,
	0x5f, 0x29, 0x8a, 0x68, 0x4f, 0x0e, 0x41, 0xda, 0x4b, 0x77, 0xe6, 0xbf, 0x01, 0x08, 0xbd, 0x3a,
	0x26, 0x05, 0x1e, 0x36, 0x99, 0x8f, 0x5e, 0xc1, 0xec, 0xf0, 0x20, 0xb3, 0xb1, 0xab, 0xed, 0xdd,
	0x3b, 0xdc, 0xb4, 0x08, 0x8f, 0xa9, 0x95, 0xd8, 0x5b, 0x8c, 0x5b, 0x55, 0xc5, 0x9d, 0x3c, 0xfc,
	0x7a, 0xb5, 0xb3, 0xf4, 0xe3, 0x6a, 0x67, 0x43, 0x52, 0x21, 0x1b, 0xac, 0xd9, 0x3c, 0xce, 0x33,
	0x3f, 0xe4, 0x31, 0xcd, 0x7b, 0xa9, 0x1c, 0x1d, 0xc1, 0xe5, 0x51, 0x22, 0x93, 0x2a, 0xab, 0xad,
	0x59, 0xab, 0x72, 0xca, 0x9e, 0x80, 0xc4, 0xcc, 0x1b, 0xef, 0x46, 0x47, 0x10, 0x04, 0xbc, 0x41,
	0x4d, 0x6d, 0x57, 0xdb, 0x5b, 0x3b, 0x7c, 0x6c, 0xdd, 0xf0, 0x7a, 0xd6, 0xe4, 0xc6, 0x56, 0x99,
	0x37, 0xa8, 0xa7, 0x14, 0xe8, 0x14, 0xae, 0xb0, 0x90, 0xb4, 0x3b, 0x82, 0xf1, 0xd0, 0xd4, 0xd5,
	0xa1, 0x4f, 0x16, 0xc9, 0x2f, 0x70, 0xec, 0x53, 0xe9, 0x4d, 0x84, 0x89, 0x0b, 0xed, 0x8d, 0x5c,
	0x32, 0xb7, 0x73, 0x19, 0x0b, 0x91, 0x0b, 0x0d, 0x1a, 0x36, 0x79, 0x4c, 0x68, 0x40, 0x43, 0x59,
	0x53, 0x89, 0xc0, 0x1f, 0x12, 0x39, 0x93, 0xcd, 0x2a, 0xd1, 0x3a, 0x9d, 0x05, 0x72, 0xa7, 0x30,
	0x3b, 0x3c, 0x05, 0xe5, 0xe0, 0xb2, 0xa0, 0x71, 0x97, 0x11, 0x2a, 0x4c, 0x6d, 0x37, 0xb3, 0xb7,
	0xe2, 0x8d, 0xd7, 0x68, 0x1b, 0xc2, 0x10, 0x07, 0x54, 0x44, 0x38, 0x61, 0x75, 0xc5, 0x4e, 0x21,
	0x79, 0x07, 0x82, 0xc4, 0x0d, 0xdd, 0x85, 0x19, 0xb7, 0x58, 0x34, 0x96, 0x50, 0x16, 0xea, 0x6e,
	0xc5, 0xd0, 0xd0, 0x03, 0xb8, 0xe1, 0x56, 0x6a, 0xef, 0x4b, 0x17, 0xaf, 0x6b, 0xa5, 0x4a, 0xe1,
	0xfc, 0x6d, 0xb5, 0xe4, 0x56, 0x0c, 0x7d, 0x1a, 0x76, 0x3e, 0x8c, 0xe0, 0xcc, 0x71, 0xae, 0x3f,
	0x00, 0x00, 0xea, 0x31, 0xe9, 0x0f, 0xc0, 0x1a, 0x5a, 0x4d, 0xa2, 0xd4, 0x88, 0x7a, 0x0a, 0x91,
	0xff, 0x05, 0xe0, 0x46, 0xa1, 0xdd, 0x11, 0x92, 0xc6, 0xff, 0x56, 0xb1, 0x5e, 0xce, 0x14, 0xeb,
	0xf9, 0x8d, 0xbf, 0x61, 0xee, 0xe2, 0xd3, 0xfd, 0x3a, 0x9b, 0xef, 0xd7, 0xfe, 0x5f, 0xba, 0xcc,
	0xd7, 0xec, 0x6c, 0xbe, 0x66, 0xb7, 0x35, 0xfb, 0x5f, 0xda, 0xf6, 0xb4, 0x3f, 0x00, 0x77, 0x60,
	0x86, 0xa8, 0xba, 0x6d, 0xa1, 0x4d, 0x32, 0x7c, 0x91, 0xda, 0x74, 0xed, 0xfa, 0x03, 0xa0, 0x9b,
	0xda, 0x33, 0x1b, 0xae, 0x5f, 0xcb, 0x86, 0x56, 0xe1, 0xb2, 0x53, 0x29, 0xba, 0x5e, 0xc1, 0x39,
	0x35, 0x96, 0xd0, 0x1a, 0x84, 0x6f, 0x1c, 0xaf, 0x5c, 0xaa, 0x56, 0x4b, 0xef, 0x1c, 0x43, 0x3b,
	0x71, 0xbf, 0xfc, 0x04, 0xda, 0xe7, 0xef, 0xdb, 0xda, 0x47, 0x67, 0xe1, 0xd0, 0x8f, 0x2e, 0xfd,
	0x85, 0x83, 0xbf, 0x9e, 0x55, 0x73, 0xf5, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x15,
	0x57, 0x0d, 0x44, 0x06, 0x00, 0x00,
}

func (this *RbacConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RbacConfig)
	if !ok {
		that2, ok := that.(RbacConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.Inclusion.Equal(that1.Inclusion) {
		return false
	}
	if !this.Exclusion.Equal(that1.Exclusion) {
		return false
	}
	if this.EnforcementMode != that1.EnforcementMode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RbacConfig_Target) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RbacConfig_Target)
	if !ok {
		that2, ok := that.(RbacConfig_Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if this.Services[i] != that1.Services[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClusterRbacConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterRbacConfig)
	if !ok {
		that2, ok := that.(ClusterRbacConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.Inclusion.Equal(that1.Inclusion) {
		return false
	}
	if !this.Exclusion.Equal(that1.Exclusion) {
		return false
	}
	if this.EnforcementMode != that1.EnforcementMode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClusterRbacConfig_Target) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterRbacConfig_Target)
	if !ok {
		that2, ok := that.(ClusterRbacConfig_Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if this.Services[i] != that1.Services[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
