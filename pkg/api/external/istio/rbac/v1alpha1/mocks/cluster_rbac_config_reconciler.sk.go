// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/external/istio/rbac/v1alpha1/cluster_rbac_config_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/external/istio/rbac/v1alpha1"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
)

// MockClusterRbacConfigReconciler is a mock of ClusterRbacConfigReconciler interface
type MockClusterRbacConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRbacConfigReconcilerMockRecorder
}

// MockClusterRbacConfigReconcilerMockRecorder is the mock recorder for MockClusterRbacConfigReconciler
type MockClusterRbacConfigReconcilerMockRecorder struct {
	mock *MockClusterRbacConfigReconciler
}

// NewMockClusterRbacConfigReconciler creates a new mock instance
func NewMockClusterRbacConfigReconciler(ctrl *gomock.Controller) *MockClusterRbacConfigReconciler {
	mock := &MockClusterRbacConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockClusterRbacConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRbacConfigReconciler) EXPECT() *MockClusterRbacConfigReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockClusterRbacConfigReconciler) Reconcile(namespace string, desiredResources v1alpha1.ClusterRbacConfigList, transition v1alpha1.TransitionClusterRbacConfigFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockClusterRbacConfigReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockClusterRbacConfigReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
