// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/external/istio/networking/v1alpha3/gateway.proto

// `Gateway` describes a load balancer operating at the edge of the mesh
// receiving incoming or outgoing HTTP/TCP connections. The specification
// describes a set of ports that should be exposed, the type of protocol to
// use, SNI configuration for the load balancer, etc.
//
// For example, the following Gateway configuration sets up a proxy to act
// as a load balancer exposing port 80 and 9080 (http), 443 (https),
// 9443(https) and port 2379 (TCP) for ingress.  The gateway will be
// applied to the proxy running on a pod with labels `app:
// my-gateway-controller`. While Istio will configure the proxy to listen
// on these ports, it is the responsibility of the user to ensure that
// external traffic to these ports are allowed into the mesh.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Gateway
// metadata:
//   name: my-gateway
//   namespace: some-config-namespace
// spec:
//   selector:
//     app: my-gateway-controller
//   servers:
//   - port:
//       number: 80
//       name: http
//       protocol: HTTP
//     hosts:
//     - uk.bookinfo.com
//     - eu.bookinfo.com
//     tls:
//       httpsRedirect: true # sends 301 redirect for http requests
//   - port:
//       number: 443
//       name: https-443
//       protocol: HTTPS
//     hosts:
//     - uk.bookinfo.com
//     - eu.bookinfo.com
//     tls:
//       mode: SIMPLE # enables HTTPS on this port
//       serverCertificate: /etc/certs/servercert.pem
//       privateKey: /etc/certs/privatekey.pem
//   - port:
//       number: 9443
//       name: https-9443
//       protocol: HTTPS
//     hosts:
//     - "bookinfo-namespace/*.bookinfo.com"
//     tls:
//       mode: SIMPLE # enables HTTPS on this port
//       credentialName: bookinfo-secret # fetches certs from Kubernetes secret
//   - port:
//       number: 9080
//       name: http-wildcard
//       protocol: HTTP
//     hosts:
//     - "*"
//   - port:
//       number: 2379 # to expose internal service via external port 2379
//       name: mongo
//       protocol: MONGO
//     hosts:
//     - "*"
// ```
//
// The Gateway specification above describes the L4-L6 properties of a load
// balancer. A `VirtualService` can then be bound to a gateway to control
// the forwarding of traffic arriving at a particular host or gateway port.
//
// For example, the following VirtualService splits traffic for
// `https://uk.bookinfo.com/reviews`, `https://eu.bookinfo.com/reviews`,
// `http://uk.bookinfo.com:9080/reviews`,
// `http://eu.bookinfo.com:9080/reviews` into two versions (prod and qa) of
// an internal reviews service on port 9080. In addition, requests
// containing the cookie "user: dev-123" will be sent to special port 7777
// in the qa version. The same rule is also applicable inside the mesh for
// requests to the "reviews.prod.svc.cluster.local" service. This rule is
// applicable across ports 443, 9080. Note that `http://uk.bookinfo.com`
// gets redirected to `https://uk.bookinfo.com` (i.e. 80 redirects to 443).
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: bookinfo-rule
//   namespace: bookinfo-namespace
// spec:
//   hosts:
//   - reviews.prod.svc.cluster.local
//   - uk.bookinfo.com
//   - eu.bookinfo.com
//   gateways:
//   - some-config-namespace/my-gateway
//   - mesh # applies to all the sidecars in the mesh
//   http:
//   - match:
//     - headers:
//         cookie:
//           exact: "user=dev-123"
//     route:
//     - destination:
//         port:
//           number: 7777
//         host: reviews.qa.svc.cluster.local
//   - match:
//     - uri:
//         prefix: /reviews/
//     route:
//     - destination:
//         port:
//           number: 9080 # can be omitted if it's the only port for reviews
//         host: reviews.prod.svc.cluster.local
//       weight: 80
//     - destination:
//         host: reviews.qa.svc.cluster.local
//       weight: 20
// ```
//
// The following VirtualService forwards traffic arriving at (external)
// port 27017 to internal Mongo server on port 5555. This rule is not
// applicable internally in the mesh as the gateway list omits the
// reserved name `mesh`.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: bookinfo-Mongo
//   namespace: bookinfo-namespace
// spec:
//   hosts:
//   - mongosvr.prod.svc.cluster.local # name of internal Mongo service
//   gateways:
//   - some-config-namespace/my-gateway # can omit the namespace if gateway is in same
//                                        namespace as virtual service.
//   tcp:
//   - match:
//     - port: 27017
//     route:
//     - destination:
//         host: mongo.prod.svc.cluster.local
//         port:
//           number: 5555
// ```
//
// It is possible to restrict the set of virtual services that can bind to
// a gateway server using the namespace/hostname syntax in the hosts field.
// For example, the following Gateway allows any virtual service in the ns1
// namespace to bind to it, while restricting only the virtual service with
// foo.bar.com host in the ns2 namespace to bind to it.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Gateway
// metadata:
//   name: my-gateway
//   namespace: some-config-namespace
// spec:
//   selector:
//     app: my-gateway-controller
//   servers:
//   - port:
//       number: 80
//       name: http
//       protocol: HTTP
//     hosts:
//     - "ns1/*"
//     - "ns2/foo.bar.com"
// ```
//

package v1alpha3

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TLS modes enforced by the proxy
type Server_TLSOptions_TLSmode int32

const (
	// The SNI string presented by the client will be used as the match
	// criterion in a VirtualService TLS route to determine the
	// destination service from the service registry.
	Server_TLSOptions_PASSTHROUGH Server_TLSOptions_TLSmode = 0
	// Secure connections with standard TLS semantics.
	Server_TLSOptions_SIMPLE Server_TLSOptions_TLSmode = 1
	// Secure connections to the downstream using mutual TLS by presenting
	// server certificates for authentication.
	Server_TLSOptions_MUTUAL Server_TLSOptions_TLSmode = 2
	// Similar to the passthrough mode, except servers with this TLS mode
	// do not require an associated VirtualService to map from the SNI
	// value to service in the registry. The destination details such as
	// the service/subset/port are encoded in the SNI value. The proxy
	// will forward to the upstream (Envoy) cluster (a group of
	// endpoints) specified by the SNI value. This server is typically
	// used to provide connectivity between services in disparate L3
	// networks that otherwise do not have direct connectivity between
	// their respective endpoints. Use of this mode assumes that both the
	// source and the destination are using Istio mTLS to secure traffic.
	Server_TLSOptions_AUTO_PASSTHROUGH Server_TLSOptions_TLSmode = 3
	// Secure connections from the downstream using mutual TLS by presenting
	// server certificates for authentication.
	// Compared to Mutual mode, this mode uses certificates, representing
	// gateway workload identity, generated automatically by Istio for
	// mTLS authentication. When this mode is used, all other fields in
	// `TLSOptions` should be empty.
	Server_TLSOptions_ISTIO_MUTUAL Server_TLSOptions_TLSmode = 4
)

var Server_TLSOptions_TLSmode_name = map[int32]string{
	0: "PASSTHROUGH",
	1: "SIMPLE",
	2: "MUTUAL",
	3: "AUTO_PASSTHROUGH",
	4: "ISTIO_MUTUAL",
}

var Server_TLSOptions_TLSmode_value = map[string]int32{
	"PASSTHROUGH":      0,
	"SIMPLE":           1,
	"MUTUAL":           2,
	"AUTO_PASSTHROUGH": 3,
	"ISTIO_MUTUAL":     4,
}

func (x Server_TLSOptions_TLSmode) String() string {
	return proto.EnumName(Server_TLSOptions_TLSmode_name, int32(x))
}

func (Server_TLSOptions_TLSmode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e7fc5d92826f6a9, []int{1, 0, 0}
}

// TLS protocol versions.
type Server_TLSOptions_TLSProtocol int32

const (
	// Automatically choose the optimal TLS version.
	Server_TLSOptions_TLS_AUTO Server_TLSOptions_TLSProtocol = 0
	// TLS version 1.0
	Server_TLSOptions_TLSV1_0 Server_TLSOptions_TLSProtocol = 1
	// TLS version 1.1
	Server_TLSOptions_TLSV1_1 Server_TLSOptions_TLSProtocol = 2
	// TLS version 1.2
	Server_TLSOptions_TLSV1_2 Server_TLSOptions_TLSProtocol = 3
	// TLS version 1.3
	Server_TLSOptions_TLSV1_3 Server_TLSOptions_TLSProtocol = 4
)

var Server_TLSOptions_TLSProtocol_name = map[int32]string{
	0: "TLS_AUTO",
	1: "TLSV1_0",
	2: "TLSV1_1",
	3: "TLSV1_2",
	4: "TLSV1_3",
}

var Server_TLSOptions_TLSProtocol_value = map[string]int32{
	"TLS_AUTO": 0,
	"TLSV1_0":  1,
	"TLSV1_1":  2,
	"TLSV1_2":  3,
	"TLSV1_3":  4,
}

func (x Server_TLSOptions_TLSProtocol) String() string {
	return proto.EnumName(Server_TLSOptions_TLSProtocol_name, int32(x))
}

func (Server_TLSOptions_TLSProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e7fc5d92826f6a9, []int{1, 0, 1}
}

type Gateway struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by supergloo during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// REQUIRED: A list of server specifications.
	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	// REQUIRED: One or more labels that indicate a specific set of pods/VMs
	// on which this gateway configuration should be applied. The scope of
	// label search is restricted to the configuration namespace in which the
	// the resource is present. In other words, the Gateway resource must
	// reside in the same namespace as the gateway workload instance.
	Selector             map[string]string `protobuf:"bytes,2,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Gateway) Reset()         { *m = Gateway{} }
func (m *Gateway) String() string { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()    {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7fc5d92826f6a9, []int{0}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gateway.Unmarshal(m, b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
}
func (m *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(m, src)
}
func (m *Gateway) XXX_Size() int {
	return xxx_messageInfo_Gateway.Size(m)
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *Gateway) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *Gateway) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *Gateway) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

// `Server` describes the properties of the proxy on a given load balancer
// port. For example,
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Gateway
// metadata:
//   name: my-ingress
// spec:
//   selector:
//     app: my-ingress-gateway
//   servers:
//   - port:
//       number: 80
//       name: http2
//       protocol: HTTP2
//     hosts:
//     - "*"
// ```
//
// Another example
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Gateway
// metadata:
//   name: my-tcp-ingress
// spec:
//   selector:
//     app: my-tcp-ingress-gateway
//   servers:
//   - port:
//       number: 27018
//       name: mongo
//       protocol: MONGO
//     hosts:
//     - "*"
// ```
//
// The following is an example of TLS configuration for port 443
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Gateway
// metadata:
//   name: my-tls-ingress
// spec:
//   selector:
//     app: my-tls-ingress-gateway
//   servers:
//   - port:
//       number: 443
//       name: https
//       protocol: HTTPS
//     hosts:
//     - "*"
//     tls:
//       mode: SIMPLE
//       serverCertificate: /etc/certs/server.pem
//       privateKey: /etc/certs/privatekey.pem
// ```
type Server struct {
	// REQUIRED: The Port on which the proxy should listen for incoming
	// connections.
	Port *Port `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	// $hide_from_docs
	// The ip or the Unix domain socket to which the listener should be bound
	// to. Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar`
	// (Linux abstract namespace). When using Unix domain sockets, the port
	// number should be 0.
	Bind string `protobuf:"bytes,4,opt,name=bind,proto3" json:"bind,omitempty"`
	// REQUIRED. One or more hosts exposed by this gateway.
	// While typically applicable to
	// HTTP services, it can also be used for TCP services using TLS with SNI.
	// A host is specified as a `dnsName` with an optional `namespace/` prefix.
	// The `dnsName` should be specified using FQDN format, optionally including
	// a wildcard character in the left-most component (e.g., `prod/*.example.com`).
	// Set the `dnsName` to `*` to select all `VirtualService` hosts from the
	// specified namespace (e.g.,`prod/*`).
	//
	// The `namespace` can be set to `*` or `.`, representing any or the current
	// namespace, respectively. For example, `*/foo.example.com` selects the
	// service from any available namespace while `./foo.example.com` only selects
	// the service from the namespace of the sidecar. The default, if no `namespace/`
	// is specified, is `*/`, that is, select services from any namespace.
	// Any associated `DestinationRule` in the selected namespace will also be used.
	//
	// A `VirtualService` must be bound to the gateway and must have one or
	// more hosts that match the hosts specified in a server. The match
	// could be an exact match or a suffix match with the server's hosts. For
	// example, if the server's hosts specifies `*.example.com`, a
	// `VirtualService` with hosts `dev.example.com` or `prod.example.com` will
	// match. However, a `VirtualService` with host `example.com` or
	// `newexample.com` will not match.
	//
	// NOTE: Only virtual services exported to the gateway's namespace
	// (e.g., `exportTo` value of `*`) can be referenced.
	// Private configurations (e.g., `exportTo` set to `.`) will not be
	// available. Refer to the `exportTo` setting in `VirtualService`,
	// `DestinationRule`, and `ServiceEntry` configurations for details.
	Hosts []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Set of TLS related options that govern the server's behavior. Use
	// these options to control if all http requests should be redirected to
	// https, and the TLS modes to use.
	Tls *Server_TLSOptions `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// The loopback IP endpoint or Unix domain socket to which traffic should
	// be forwarded to by default. Format should be `127.0.0.1:PORT` or
	// `unix:///path/to/socket` or `unix://@foobar` (Linux abstract namespace).
	DefaultEndpoint      string   `protobuf:"bytes,5,opt,name=default_endpoint,json=defaultEndpoint,proto3" json:"default_endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7fc5d92826f6a9, []int{1}
}
func (m *Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Server.Unmarshal(m, b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Server.Marshal(b, m, deterministic)
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return xxx_messageInfo_Server.Size(m)
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *Server) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

func (m *Server) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Server) GetTls() *Server_TLSOptions {
	if m != nil {
		return m.Tls
	}
	return nil
}

func (m *Server) GetDefaultEndpoint() string {
	if m != nil {
		return m.DefaultEndpoint
	}
	return ""
}

type Server_TLSOptions struct {
	// If set to true, the load balancer will send a 301 redirect for all
	// http connections, asking the clients to use HTTPS.
	HttpsRedirect bool `protobuf:"varint,1,opt,name=https_redirect,json=httpsRedirect,proto3" json:"https_redirect,omitempty"`
	// Optional: Indicates whether connections to this port should be
	// secured using TLS. The value of this field determines how TLS is
	// enforced.
	Mode Server_TLSOptions_TLSmode `protobuf:"varint,2,opt,name=mode,proto3,enum=istio.networking.v1alpha3.Server_TLSOptions_TLSmode" json:"mode,omitempty"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
	// holding the server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,3,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
	// holding the server's private key.
	PrivateKey string `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// REQUIRED if mode is `MUTUAL`. The path to a file containing
	// certificate authority certificates to use in verifying a presented
	// client side certificate.
	CaCertificates string `protobuf:"bytes,5,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// The credentialName stands for a unique identifier that can be used
	// to identify the serverCertificate and the privateKey. The
	// credentialName appended with suffix "-cacert" is used to identify
	// the CaCertificates associated with this server. Gateway workloads
	// capable of fetching credentials from a remote credential store such
	// as Kubernetes secrets, will be configured to retrieve the
	// serverCertificate and the privateKey using credentialName, instead
	// of using the file system paths specified above. If using mutual TLS,
	// gateway workload instances will retrieve the CaCertificates using
	// credentialName-cacert. The semantics of the name are platform
	// dependent.  In Kubernetes, the default Istio supplied credential
	// server expects the credentialName to match the name of the
	// Kubernetes secret that holds the server certificate, the private
	// key, and the CA certificate (if using mutual TLS). Set the
	// `ISTIO_META_USER_SDS` metadata variable in the gateway's proxy to
	// enable the dynamic credential fetching feature.
	CredentialName string `protobuf:"bytes,10,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	// A list of alternate names to verify the subject identity in the
	// certificate presented by the client.
	SubjectAltNames []string `protobuf:"bytes,6,rep,name=subject_alt_names,json=subjectAltNames,proto3" json:"subject_alt_names,omitempty"`
	// An optional list of base64-encoded SHA-256 hashes of the SKPIs of
	// authorized client certificates.
	// Note: When both verify_certificate_hash and verify_certificate_spki
	// are specified, a hash matching either value will result in the
	// certificate being accepted.
	VerifyCertificateSpki []string `protobuf:"bytes,11,rep,name=verify_certificate_spki,json=verifyCertificateSpki,proto3" json:"verify_certificate_spki,omitempty"`
	// An optional list of hex-encoded SHA-256 hashes of the
	// authorized client certificates. Both simple and colon separated
	// formats are acceptable.
	// Note: When both verify_certificate_hash and verify_certificate_spki
	// are specified, a hash matching either value will result in the
	// certificate being accepted.
	VerifyCertificateHash []string `protobuf:"bytes,12,rep,name=verify_certificate_hash,json=verifyCertificateHash,proto3" json:"verify_certificate_hash,omitempty"`
	// Optional: Minimum TLS protocol version.
	MinProtocolVersion Server_TLSOptions_TLSProtocol `protobuf:"varint,7,opt,name=min_protocol_version,json=minProtocolVersion,proto3,enum=istio.networking.v1alpha3.Server_TLSOptions_TLSProtocol" json:"min_protocol_version,omitempty"`
	// Optional: Maximum TLS protocol version.
	MaxProtocolVersion Server_TLSOptions_TLSProtocol `protobuf:"varint,8,opt,name=max_protocol_version,json=maxProtocolVersion,proto3,enum=istio.networking.v1alpha3.Server_TLSOptions_TLSProtocol" json:"max_protocol_version,omitempty"`
	// Optional: If specified, only support the specified cipher list.
	// Otherwise default to the default cipher list supported by Envoy.
	CipherSuites         []string `protobuf:"bytes,9,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server_TLSOptions) Reset()         { *m = Server_TLSOptions{} }
func (m *Server_TLSOptions) String() string { return proto.CompactTextString(m) }
func (*Server_TLSOptions) ProtoMessage()    {}
func (*Server_TLSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7fc5d92826f6a9, []int{1, 0}
}
func (m *Server_TLSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Server_TLSOptions.Unmarshal(m, b)
}
func (m *Server_TLSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Server_TLSOptions.Marshal(b, m, deterministic)
}
func (m *Server_TLSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server_TLSOptions.Merge(m, src)
}
func (m *Server_TLSOptions) XXX_Size() int {
	return xxx_messageInfo_Server_TLSOptions.Size(m)
}
func (m *Server_TLSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Server_TLSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Server_TLSOptions proto.InternalMessageInfo

func (m *Server_TLSOptions) GetHttpsRedirect() bool {
	if m != nil {
		return m.HttpsRedirect
	}
	return false
}

func (m *Server_TLSOptions) GetMode() Server_TLSOptions_TLSmode {
	if m != nil {
		return m.Mode
	}
	return Server_TLSOptions_PASSTHROUGH
}

func (m *Server_TLSOptions) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *Server_TLSOptions) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *Server_TLSOptions) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *Server_TLSOptions) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *Server_TLSOptions) GetSubjectAltNames() []string {
	if m != nil {
		return m.SubjectAltNames
	}
	return nil
}

func (m *Server_TLSOptions) GetVerifyCertificateSpki() []string {
	if m != nil {
		return m.VerifyCertificateSpki
	}
	return nil
}

func (m *Server_TLSOptions) GetVerifyCertificateHash() []string {
	if m != nil {
		return m.VerifyCertificateHash
	}
	return nil
}

func (m *Server_TLSOptions) GetMinProtocolVersion() Server_TLSOptions_TLSProtocol {
	if m != nil {
		return m.MinProtocolVersion
	}
	return Server_TLSOptions_TLS_AUTO
}

func (m *Server_TLSOptions) GetMaxProtocolVersion() Server_TLSOptions_TLSProtocol {
	if m != nil {
		return m.MaxProtocolVersion
	}
	return Server_TLSOptions_TLS_AUTO
}

func (m *Server_TLSOptions) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

// Port describes the properties of a specific port of a service.
type Port struct {
	// REQUIRED: A valid non-negative integer port number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// REQUIRED: The protocol exposed on the port.
	// MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS.
	// TLS implies the connection will be routed based on the SNI header to
	// the destination without terminating the TLS connection.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Label assigned to the port.
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7fc5d92826f6a9, []int{2}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("istio.networking.v1alpha3.Server_TLSOptions_TLSmode", Server_TLSOptions_TLSmode_name, Server_TLSOptions_TLSmode_value)
	proto.RegisterEnum("istio.networking.v1alpha3.Server_TLSOptions_TLSProtocol", Server_TLSOptions_TLSProtocol_name, Server_TLSOptions_TLSProtocol_value)
	proto.RegisterType((*Gateway)(nil), "istio.networking.v1alpha3.Gateway")
	proto.RegisterMapType((map[string]string)(nil), "istio.networking.v1alpha3.Gateway.SelectorEntry")
	proto.RegisterType((*Server)(nil), "istio.networking.v1alpha3.Server")
	proto.RegisterType((*Server_TLSOptions)(nil), "istio.networking.v1alpha3.Server.TLSOptions")
	proto.RegisterType((*Port)(nil), "istio.networking.v1alpha3.Port")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/external/istio/networking/v1alpha3/gateway.proto", fileDescriptor_8e7fc5d92826f6a9)
}

var fileDescriptor_8e7fc5d92826f6a9 = []byte{
	// 892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0xb5, 0x24, 0x46, 0x96, 0xaf, 0xfc, 0xa0, 0x07, 0xaa, 0xcb, 0x68, 0x51, 0xbb, 0x2a, 0x8a,
	0xba, 0x45, 0x4d, 0x46, 0x72, 0x51, 0x18, 0x0e, 0x50, 0xc0, 0x2e, 0x0c, 0xdb, 0x88, 0x1c, 0xb9,
	0xa4, 0x94, 0x45, 0x36, 0xc4, 0x88, 0x1a, 0x89, 0x13, 0x91, 0x1c, 0x62, 0x66, 0x24, 0x5b, 0xdb,
	0x7c, 0x4d, 0xbf, 0xa1, 0x5f, 0xd0, 0xaf, 0xc8, 0xa2, 0x40, 0x77, 0xdd, 0xa4, 0x5f, 0x50, 0x70,
	0x38, 0xb2, 0x94, 0xb6, 0x4e, 0x62, 0x64, 0xa5, 0xfb, 0x38, 0xe7, 0xdc, 0xc7, 0x0c, 0x47, 0xd0,
	0x1b, 0x51, 0x19, 0x4e, 0xfa, 0x76, 0xc0, 0x62, 0x47, 0xb0, 0x88, 0x1d, 0x50, 0xe6, 0xc4, 0x44,
	0x84, 0x07, 0x29, 0x67, 0xaf, 0x48, 0x20, 0x85, 0x83, 0x53, 0xea, 0x90, 0x5b, 0x49, 0x78, 0x82,
	0x23, 0x87, 0x0a, 0x49, 0x99, 0x93, 0x10, 0x79, 0xc3, 0xf8, 0x98, 0x26, 0x23, 0x67, 0xda, 0xc4,
	0x51, 0x1a, 0xe2, 0x43, 0x67, 0x84, 0x25, 0xb9, 0xc1, 0x33, 0x3b, 0xe5, 0x4c, 0x32, 0xf4, 0x58,
	0x01, 0xed, 0x05, 0xd0, 0x9e, 0x03, 0xeb, 0xb5, 0x11, 0x1b, 0x31, 0x85, 0x72, 0x32, 0x2b, 0x27,
	0xd4, 0x9b, 0xff, 0xd3, 0x87, 0xfa, 0x1d, 0x53, 0xa9, 0x5a, 0x98, 0x36, 0x9d, 0x98, 0x48, 0x3c,
	0xc0, 0x12, 0x6b, 0x8a, 0xf3, 0x11, 0x14, 0x21, 0xb1, 0x9c, 0x88, 0x07, 0xd4, 0x98, 0xfb, 0x39,
	0xa5, 0xf1, 0x57, 0x11, 0x56, 0xcf, 0xf3, 0xc9, 0xd0, 0x39, 0x94, 0x73, 0x39, 0x6b, 0xb0, 0x57,
	0xd8, 0xaf, 0xb6, 0x6a, 0x76, 0xc0, 0x38, 0xb1, 0x33, 0x86, 0x4d, 0x99, 0xed, 0xa9, 0xdc, 0xe9,
	0xe3, 0xdf, 0xdf, 0xec, 0xae, 0xfc, 0xfd, 0x66, 0x77, 0x5b, 0x12, 0x21, 0x07, 0x74, 0x38, 0x3c,
	0x6e, 0xd0, 0x51, 0xc2, 0x38, 0x69, 0xb8, 0x9a, 0x8e, 0x8e, 0xa0, 0x32, 0x1f, 0xc5, 0x22, 0x4a,
	0x6a, 0xe7, 0x5d, 0xa9, 0x2b, 0x9d, 0x3d, 0x35, 0x32, 0x31, 0xf7, 0x0e, 0x8d, 0x9e, 0xc2, 0xaa,
	0x20, 0x7c, 0x4a, 0xb8, 0xb0, 0x0a, 0x7b, 0xa5, 0xfd, 0x6a, 0xeb, 0x4b, 0xfb, 0xde, 0x45, 0xdb,
	0x9e, 0x42, 0xba, 0x73, 0x06, 0x6a, 0x43, 0x45, 0x90, 0x88, 0x04, 0x92, 0x71, 0xab, 0xa8, 0xd8,
	0x4f, 0xde, 0xc3, 0xd6, 0x53, 0xdb, 0x9e, 0xa6, 0x9c, 0x25, 0x92, 0xcf, 0xdc, 0x3b, 0x85, 0xfa,
	0x53, 0xd8, 0x78, 0x27, 0x85, 0x4c, 0x28, 0x8d, 0xc9, 0xcc, 0x2a, 0xec, 0x15, 0xf6, 0xd7, 0xdc,
	0xcc, 0x44, 0x35, 0x78, 0x34, 0xc5, 0xd1, 0x84, 0x58, 0x45, 0x15, 0xcb, 0x9d, 0xe3, 0xe2, 0x51,
	0xe1, 0x78, 0xe7, 0xf5, 0x5b, 0xc3, 0x80, 0xe2, 0xe8, 0xe6, 0xf5, 0x5b, 0x03, 0x50, 0x45, 0xdf,
	0x1d, 0xd1, 0xf8, 0xad, 0x02, 0xe5, 0xbc, 0x6d, 0x74, 0x08, 0x46, 0xca, 0xb8, 0x54, 0x7a, 0xd5,
	0xd6, 0xee, 0x7b, 0x3a, 0xbd, 0x66, 0x5c, 0xba, 0x0a, 0x8c, 0x10, 0x18, 0x7d, 0x9a, 0x0c, 0x2c,
	0x43, 0x15, 0x54, 0x76, 0xd6, 0x45, 0xc8, 0x84, 0x14, 0x6a, 0xe6, 0x35, 0x37, 0x77, 0xd0, 0x4f,
	0x50, 0x92, 0x91, 0xb0, 0x4a, 0x4a, 0xfd, 0xfb, 0x0f, 0x6e, 0xd1, 0xee, 0xb6, 0xbd, 0x4e, 0x2a,
	0x29, 0x4b, 0x84, 0x9b, 0x11, 0xd1, 0xb7, 0x60, 0x0e, 0xc8, 0x10, 0x4f, 0x22, 0xe9, 0x93, 0x64,
	0x90, 0x32, 0x9a, 0x48, 0xeb, 0x91, 0xaa, 0xba, 0xa5, 0xe3, 0x67, 0x3a, 0x5c, 0xff, 0xb3, 0x0c,
	0xb0, 0xa0, 0xa3, 0xaf, 0x61, 0x33, 0x94, 0x32, 0x15, 0x3e, 0x27, 0x03, 0xca, 0x49, 0x90, 0x8f,
	0x58, 0x71, 0x37, 0x54, 0xd4, 0xd5, 0x41, 0x74, 0x01, 0x46, 0xcc, 0x06, 0xf9, 0xee, 0x36, 0x5b,
	0x3f, 0x3c, 0xa4, 0xc3, 0xcc, 0xcc, 0xb8, 0xae, 0x52, 0x40, 0x07, 0x80, 0xf2, 0x2b, 0xe0, 0x07,
	0x84, 0x4b, 0x3a, 0xa4, 0x01, 0x96, 0x44, 0x4d, 0xbe, 0xe6, 0x6e, 0xe7, 0x99, 0x9f, 0x17, 0x09,
	0xb4, 0x0b, 0xd5, 0x94, 0xd3, 0x29, 0x96, 0xc4, 0xcf, 0xce, 0x33, 0x5f, 0x25, 0xe8, 0xd0, 0x33,
	0x32, 0x43, 0xdf, 0xc0, 0x56, 0x80, 0x97, 0xb5, 0x84, 0x9e, 0x7c, 0x33, 0xc0, 0x4b, 0x42, 0x42,
	0x01, 0x39, 0x19, 0x90, 0x44, 0x52, 0x1c, 0xf9, 0x09, 0x8e, 0x89, 0x05, 0x1a, 0x78, 0x17, 0x7e,
	0x8e, 0x63, 0x82, 0xbe, 0x83, 0x6d, 0x31, 0xe9, 0x67, 0xcf, 0x8d, 0x8f, 0x23, 0xa9, 0x90, 0xc2,
	0x2a, 0xab, 0xe3, 0xda, 0xd2, 0x89, 0x93, 0x48, 0x66, 0x50, 0x81, 0x7e, 0x84, 0xcf, 0xa7, 0x84,
	0xd3, 0xe1, 0x6c, 0xb9, 0x03, 0x5f, 0xa4, 0x63, 0x6a, 0x55, 0x15, 0xe3, 0xb3, 0x3c, 0xbd, 0xd4,
	0x89, 0x97, 0x8e, 0xe9, 0x3d, 0xbc, 0x10, 0x8b, 0xd0, 0x5a, 0xbf, 0x87, 0x77, 0x81, 0x45, 0x88,
	0x5e, 0x41, 0x2d, 0xa6, 0x89, 0xaf, 0x9e, 0x83, 0x80, 0x45, 0x7e, 0xf6, 0x29, 0x51, 0x96, 0x58,
	0xab, 0xea, 0x5c, 0x8e, 0x1e, 0x7a, 0x2e, 0xd7, 0x5a, 0xc7, 0x45, 0x31, 0x4d, 0xe6, 0xce, 0x8b,
	0x5c, 0x53, 0xd5, 0xc2, 0xb7, 0xff, 0xad, 0x55, 0xf9, 0xe4, 0x5a, 0xf8, 0xf6, 0xdf, 0xb5, 0xbe,
	0x82, 0x8d, 0x80, 0xa6, 0x21, 0xe1, 0xbe, 0x98, 0xd0, 0xec, 0x0c, 0xd7, 0xd4, 0x16, 0xd6, 0xf3,
	0xa0, 0xa7, 0x62, 0x8d, 0x97, 0xb0, 0xaa, 0xef, 0x12, 0xda, 0x82, 0xea, 0xf5, 0x89, 0xe7, 0x75,
	0x2f, 0xdc, 0x4e, 0xef, 0xfc, 0xc2, 0x5c, 0x41, 0x00, 0x65, 0xef, 0xf2, 0xea, 0xba, 0x7d, 0x66,
	0x16, 0x32, 0xfb, 0xaa, 0xd7, 0xed, 0x9d, 0xb4, 0xcd, 0x22, 0xaa, 0x81, 0x79, 0xd2, 0xeb, 0x76,
	0xfc, 0x65, 0x74, 0x09, 0x99, 0xb0, 0x7e, 0xe9, 0x75, 0x2f, 0x3b, 0xbe, 0xc6, 0x19, 0x8d, 0x0e,
	0x54, 0x97, 0x7a, 0x44, 0xeb, 0x50, 0xe9, 0xb6, 0x3d, 0x3f, 0xa3, 0x9a, 0x2b, 0xa8, 0xaa, 0x0a,
	0xbf, 0x68, 0xfa, 0x4f, 0xcc, 0xc2, 0xc2, 0x69, 0x9a, 0xc5, 0x85, 0xd3, 0x32, 0x4b, 0x0b, 0xe7,
	0xd0, 0x34, 0x1a, 0xcf, 0xc1, 0xc8, 0x9e, 0x02, 0xb4, 0x03, 0xe5, 0x64, 0x12, 0xf7, 0x09, 0x57,
	0x1f, 0xd6, 0x86, 0xab, 0x3d, 0x54, 0x87, 0xca, 0x7c, 0xb3, 0xfa, 0x45, 0xba, 0xf3, 0xb3, 0x87,
	0x43, 0xdd, 0xcf, 0xfc, 0xab, 0x50, 0xf6, 0xe9, 0x2f, 0xbf, 0xfe, 0xf1, 0x45, 0xe1, 0xe5, 0xb3,
	0x0f, 0xfe, 0x41, 0xa6, 0xe3, 0xd1, 0x47, 0xfe, 0x49, 0xf6, 0xcb, 0xaa, 0xe0, 0xe1, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x52, 0xed, 0xee, 0xdd, 0x76, 0x07, 0x00, 0x00,
}

func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if len(this.Servers) != len(that1.Servers) {
		return false
	}
	for i := range this.Servers {
		if !this.Servers[i].Equal(that1.Servers[i]) {
			return false
		}
	}
	if len(this.Selector) != len(that1.Selector) {
		return false
	}
	for i := range this.Selector {
		if this.Selector[i] != that1.Selector[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Server) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Server)
	if !ok {
		that2, ok := that.(Server)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Port.Equal(that1.Port) {
		return false
	}
	if this.Bind != that1.Bind {
		return false
	}
	if len(this.Hosts) != len(that1.Hosts) {
		return false
	}
	for i := range this.Hosts {
		if this.Hosts[i] != that1.Hosts[i] {
			return false
		}
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	if this.DefaultEndpoint != that1.DefaultEndpoint {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Server_TLSOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Server_TLSOptions)
	if !ok {
		that2, ok := that.(Server_TLSOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpsRedirect != that1.HttpsRedirect {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.ServerCertificate != that1.ServerCertificate {
		return false
	}
	if this.PrivateKey != that1.PrivateKey {
		return false
	}
	if this.CaCertificates != that1.CaCertificates {
		return false
	}
	if this.CredentialName != that1.CredentialName {
		return false
	}
	if len(this.SubjectAltNames) != len(that1.SubjectAltNames) {
		return false
	}
	for i := range this.SubjectAltNames {
		if this.SubjectAltNames[i] != that1.SubjectAltNames[i] {
			return false
		}
	}
	if len(this.VerifyCertificateSpki) != len(that1.VerifyCertificateSpki) {
		return false
	}
	for i := range this.VerifyCertificateSpki {
		if this.VerifyCertificateSpki[i] != that1.VerifyCertificateSpki[i] {
			return false
		}
	}
	if len(this.VerifyCertificateHash) != len(that1.VerifyCertificateHash) {
		return false
	}
	for i := range this.VerifyCertificateHash {
		if this.VerifyCertificateHash[i] != that1.VerifyCertificateHash[i] {
			return false
		}
	}
	if this.MinProtocolVersion != that1.MinProtocolVersion {
		return false
	}
	if this.MaxProtocolVersion != that1.MaxProtocolVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Port)
	if !ok {
		that2, ok := that.(Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
