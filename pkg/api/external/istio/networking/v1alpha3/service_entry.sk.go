// Code generated by solo-kit. DO NOT EDIT.

package v1alpha3

import (
	"log"
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewServiceEntry(namespace, name string) *ServiceEntry {
	serviceentry := &ServiceEntry{}
	serviceentry.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return serviceentry
}

func (r *ServiceEntry) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *ServiceEntry) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ServiceEntry) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	metaCopy.Generation = 0
	// investigate zeroing out owner refs as well
	return hashutils.HashAll(
		metaCopy,
		r.Hosts,
		r.Addresses,
		r.Ports,
		r.Location,
		r.Resolution,
		r.Endpoints,
		r.ExportTo,
		r.SubjectAltNames,
	)
}

func (r *ServiceEntry) GroupVersionKind() schema.GroupVersionKind {
	return ServiceEntryGVK
}

type ServiceEntryList []*ServiceEntry

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ServiceEntryList) Find(namespace, name string) (*ServiceEntry, error) {
	for _, serviceEntry := range list {
		if serviceEntry.GetMetadata().Name == name {
			if namespace == "" || serviceEntry.GetMetadata().Namespace == namespace {
				return serviceEntry, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find serviceEntry %v.%v", namespace, name)
}

func (list ServiceEntryList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, serviceEntry := range list {
		ress = append(ress, serviceEntry)
	}
	return ress
}

func (list ServiceEntryList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, serviceEntry := range list {
		ress = append(ress, serviceEntry)
	}
	return ress
}

func (list ServiceEntryList) Names() []string {
	var names []string
	for _, serviceEntry := range list {
		names = append(names, serviceEntry.GetMetadata().Name)
	}
	return names
}

func (list ServiceEntryList) NamespacesDotNames() []string {
	var names []string
	for _, serviceEntry := range list {
		names = append(names, serviceEntry.GetMetadata().Namespace+"."+serviceEntry.GetMetadata().Name)
	}
	return names
}

func (list ServiceEntryList) Sort() ServiceEntryList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ServiceEntryList) Clone() ServiceEntryList {
	var serviceEntryList ServiceEntryList
	for _, serviceEntry := range list {
		serviceEntryList = append(serviceEntryList, resources.Clone(serviceEntry).(*ServiceEntry))
	}
	return serviceEntryList
}

func (list ServiceEntryList) Each(f func(element *ServiceEntry)) {
	for _, serviceEntry := range list {
		f(serviceEntry)
	}
}

func (list ServiceEntryList) EachResource(f func(element resources.Resource)) {
	for _, serviceEntry := range list {
		f(serviceEntry)
	}
}

func (list ServiceEntryList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ServiceEntry) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for ServiceEntry

func (o *ServiceEntry) GetObjectKind() schema.ObjectKind {
	t := ServiceEntryCrd.TypeMeta()
	return &t
}

func (o *ServiceEntry) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ServiceEntry)
}

func (o *ServiceEntry) DeepCopyInto(out *ServiceEntry) {
	clone := resources.Clone(o).(*ServiceEntry)
	*out = *clone
}

var (
	ServiceEntryCrd = crd.NewCrd(
		"serviceentries",
		ServiceEntryGVK.Group,
		ServiceEntryGVK.Version,
		ServiceEntryGVK.Kind,
		"se",
		false,
		&ServiceEntry{})
)

func init() {
	if err := crd.AddCrd(ServiceEntryCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	ServiceEntryGVK = schema.GroupVersionKind{
		Version: "v1alpha3",
		Group:   "networking.istio.io",
		Kind:    "ServiceEntry",
	}
)
