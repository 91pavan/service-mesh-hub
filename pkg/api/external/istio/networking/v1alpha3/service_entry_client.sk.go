// Code generated by solo-kit. DO NOT EDIT.

package v1alpha3

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ServiceEntryWatcher interface {
	// watch namespace-scoped Serviceentries
	Watch(namespace string, opts clients.WatchOpts) (<-chan ServiceEntryList, <-chan error, error)
}

type ServiceEntryClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*ServiceEntry, error)
	Write(resource *ServiceEntry, opts clients.WriteOpts) (*ServiceEntry, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ServiceEntryList, error)
	ServiceEntryWatcher
}

type serviceEntryClient struct {
	rc clients.ResourceClient
}

func NewServiceEntryClient(rcFactory factory.ResourceClientFactory) (ServiceEntryClient, error) {
	return NewServiceEntryClientWithToken(rcFactory, "")
}

func NewServiceEntryClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ServiceEntryClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &ServiceEntry{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base ServiceEntry resource client")
	}
	return NewServiceEntryClientWithBase(rc), nil
}

func NewServiceEntryClientWithBase(rc clients.ResourceClient) ServiceEntryClient {
	return &serviceEntryClient{
		rc: rc,
	}
}

func (client *serviceEntryClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *serviceEntryClient) Register() error {
	return client.rc.Register()
}

func (client *serviceEntryClient) Read(namespace, name string, opts clients.ReadOpts) (*ServiceEntry, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ServiceEntry), nil
}

func (client *serviceEntryClient) Write(serviceEntry *ServiceEntry, opts clients.WriteOpts) (*ServiceEntry, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(serviceEntry, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ServiceEntry), nil
}

func (client *serviceEntryClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *serviceEntryClient) List(namespace string, opts clients.ListOpts) (ServiceEntryList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToServiceEntry(resourceList), nil
}

func (client *serviceEntryClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ServiceEntryList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	serviceentriesChan := make(chan ServiceEntryList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				serviceentriesChan <- convertToServiceEntry(resourceList)
			case <-opts.Ctx.Done():
				close(serviceentriesChan)
				return
			}
		}
	}()
	return serviceentriesChan, errs, nil
}

func convertToServiceEntry(resources resources.ResourceList) ServiceEntryList {
	var serviceEntryList ServiceEntryList
	for _, resource := range resources {
		serviceEntryList = append(serviceEntryList, resource.(*ServiceEntry))
	}
	return serviceEntryList
}
