// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewPolicy(namespace, name string) *Policy {
	policy := &Policy{}
	policy.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return policy
}

func (r *Policy) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *Policy) SetStatus(status core.Status) {
	r.Status = status
}

func (r *Policy) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *Policy) GroupVersionKind() schema.GroupVersionKind {
	return PolicyGVK
}

type PolicyList []*Policy

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list PolicyList) Find(namespace, name string) (*Policy, error) {
	for _, policy := range list {
		if policy.GetMetadata().Name == name {
			if namespace == "" || policy.GetMetadata().Namespace == namespace {
				return policy, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find policy %v.%v", namespace, name)
}

func (list PolicyList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, policy := range list {
		ress = append(ress, policy)
	}
	return ress
}

func (list PolicyList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, policy := range list {
		ress = append(ress, policy)
	}
	return ress
}

func (list PolicyList) Names() []string {
	var names []string
	for _, policy := range list {
		names = append(names, policy.GetMetadata().Name)
	}
	return names
}

func (list PolicyList) NamespacesDotNames() []string {
	var names []string
	for _, policy := range list {
		names = append(names, policy.GetMetadata().Namespace+"."+policy.GetMetadata().Name)
	}
	return names
}

func (list PolicyList) Sort() PolicyList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list PolicyList) Clone() PolicyList {
	var policyList PolicyList
	for _, policy := range list {
		policyList = append(policyList, resources.Clone(policy).(*Policy))
	}
	return policyList
}

func (list PolicyList) Each(f func(element *Policy)) {
	for _, policy := range list {
		f(policy)
	}
}

func (list PolicyList) EachResource(f func(element resources.Resource)) {
	for _, policy := range list {
		f(policy)
	}
}

func (list PolicyList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *Policy) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for Policy

func (o *Policy) GetObjectKind() schema.ObjectKind {
	t := PolicyCrd.TypeMeta()
	return &t
}

func (o *Policy) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*Policy)
}

func (o *Policy) DeepCopyInto(out *Policy) {
	clone := resources.Clone(o).(*Policy)
	*out = *clone
}

var (
	PolicyCrd = crd.NewCrd(
		"policies",
		PolicyGVK.Group,
		PolicyGVK.Version,
		PolicyGVK.Kind,
		"policy",
		false,
		&Policy{})
)

func init() {
	if err := crd.AddCrd(PolicyCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	PolicyGVK = schema.GroupVersionKind{
		Version: "v1alpha1",
		Group:   "authentication.istio.io",
		Kind:    "Policy",
	}
)
