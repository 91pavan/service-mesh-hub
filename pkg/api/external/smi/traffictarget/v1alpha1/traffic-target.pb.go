// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/external/smi/traffictarget/v1alpha1/traffic-target.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TrafficTarget associates a set of traffic definitions (rules) with a service identity which is allocated to a group of pods.
// Access is controlled via referenced TrafficSpecs and by a list of source service identities.
// * If a pod which holds the referenced service identity makes a call to the destination on one of the defined routes then access
//   will be allowed
// * Any pod which attempts to connect and is not in the defined list of sources will be denied
// * Any pod which is in the defined list, but attempts to connect on a route which is not in the list of the
//   TrafficSpecs will be denied
type TrafficTarget struct {
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by controllers during validation
	Status core.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Destination is the pod or group of pods to allow ingress traffic
	Destination *IdentityBindingSubject `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// Sources are the pod or group of pods to allow ingress traffic
	Sources []*IdentityBindingSubject `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
	// Rules are the traffic rules to allow (HTTPRoutes | TCPRoute),
	Specs                []*TrafficTargetSpec `protobuf:"bytes,5,rep,name=specs,proto3" json:"specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TrafficTarget) Reset()         { *m = TrafficTarget{} }
func (m *TrafficTarget) String() string { return proto.CompactTextString(m) }
func (*TrafficTarget) ProtoMessage()    {}
func (*TrafficTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_008857e4c9138ea8, []int{0}
}
func (m *TrafficTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTarget.Unmarshal(m, b)
}
func (m *TrafficTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTarget.Marshal(b, m, deterministic)
}
func (m *TrafficTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTarget.Merge(m, src)
}
func (m *TrafficTarget) XXX_Size() int {
	return xxx_messageInfo_TrafficTarget.Size(m)
}
func (m *TrafficTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTarget.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTarget proto.InternalMessageInfo

func (m *TrafficTarget) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *TrafficTarget) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *TrafficTarget) GetDestination() *IdentityBindingSubject {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *TrafficTarget) GetSources() []*IdentityBindingSubject {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *TrafficTarget) GetSpecs() []*TrafficTargetSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

// TrafficTargetSpec is the TrafficSpec to allow for a TrafficTarget
type TrafficTargetSpec struct {
	// Kind is the kind of TrafficSpec to allow
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the TrafficSpec to use
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Matches is a list of TrafficSpec routes to allow traffic for
	Matches              []string `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficTargetSpec) Reset()         { *m = TrafficTargetSpec{} }
func (m *TrafficTargetSpec) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetSpec) ProtoMessage()    {}
func (*TrafficTargetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_008857e4c9138ea8, []int{1}
}
func (m *TrafficTargetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetSpec.Unmarshal(m, b)
}
func (m *TrafficTargetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetSpec.Marshal(b, m, deterministic)
}
func (m *TrafficTargetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetSpec.Merge(m, src)
}
func (m *TrafficTargetSpec) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetSpec.Size(m)
}
func (m *TrafficTargetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetSpec proto.InternalMessageInfo

func (m *TrafficTargetSpec) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *TrafficTargetSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrafficTargetSpec) GetMatches() []string {
	if m != nil {
		return m.Matches
	}
	return nil
}

// IdentityBindingSubject is a Kubernetes objects which should be allowed access to the TrafficTarget
type IdentityBindingSubject struct {
	// Kind is the type of Subject to allow ingress (ServiceAccount | Group)
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the Subject, i.e. ServiceAccountName
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace where the Subject is deployed
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Port defines a TCP port to apply the TrafficTarget to
	Port                 string   `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityBindingSubject) Reset()         { *m = IdentityBindingSubject{} }
func (m *IdentityBindingSubject) String() string { return proto.CompactTextString(m) }
func (*IdentityBindingSubject) ProtoMessage()    {}
func (*IdentityBindingSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_008857e4c9138ea8, []int{2}
}
func (m *IdentityBindingSubject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityBindingSubject.Unmarshal(m, b)
}
func (m *IdentityBindingSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityBindingSubject.Marshal(b, m, deterministic)
}
func (m *IdentityBindingSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityBindingSubject.Merge(m, src)
}
func (m *IdentityBindingSubject) XXX_Size() int {
	return xxx_messageInfo_IdentityBindingSubject.Size(m)
}
func (m *IdentityBindingSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityBindingSubject.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityBindingSubject proto.InternalMessageInfo

func (m *IdentityBindingSubject) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *IdentityBindingSubject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IdentityBindingSubject) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *IdentityBindingSubject) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func init() {
	proto.RegisterType((*TrafficTarget)(nil), "smi.traffictarget.v1alpha1.TrafficTarget")
	proto.RegisterType((*TrafficTargetSpec)(nil), "smi.traffictarget.v1alpha1.TrafficTargetSpec")
	proto.RegisterType((*IdentityBindingSubject)(nil), "smi.traffictarget.v1alpha1.IdentityBindingSubject")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/external/smi/traffictarget/v1alpha1/traffic-target.proto", fileDescriptor_008857e4c9138ea8)
}

var fileDescriptor_008857e4c9138ea8 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x29, 0xc9, 0x36, 0xe2, 0x69, 0xc0, 0xac, 0x69, 0x0a, 0xd5, 0xb4, 0x55, 0xb9, 0xb0,
	0x4b, 0x1d, 0x75, 0x5c, 0xd0, 0x8e, 0xe5, 0x80, 0x90, 0xc6, 0x25, 0x2d, 0x1c, 0x90, 0x38, 0xb8,
	0xce, 0xd7, 0xd4, 0xb4, 0xb1, 0x2d, 0xfb, 0xeb, 0x54, 0xae, 0x7b, 0x16, 0x0e, 0x3c, 0x02, 0x8f,
	0xc0, 0x53, 0xec, 0xc0, 0x1b, 0x0c, 0x89, 0x3b, 0x8a, 0xd3, 0x00, 0xd1, 0x18, 0x4c, 0x3b, 0xe5,
	0xf3, 0xff, 0xef, 0xff, 0x2f, 0x5f, 0xfc, 0xc5, 0xe4, 0x7d, 0x21, 0x71, 0xb6, 0x9c, 0x30, 0xa1,
	0xcb, 0xd4, 0xe9, 0x85, 0xee, 0x4b, 0x9d, 0x96, 0xe0, 0x66, 0x7d, 0x63, 0xf5, 0x07, 0x10, 0xe8,
	0x52, 0x6e, 0x64, 0x0a, 0x2b, 0x04, 0xab, 0xf8, 0x22, 0x75, 0xa5, 0x4c, 0xd1, 0xf2, 0xe9, 0x54,
	0x0a, 0xe4, 0xb6, 0x00, 0x4c, 0xcf, 0x07, 0x7c, 0x61, 0x66, 0x7c, 0xd0, 0xc8, 0xfd, 0x5a, 0x67,
	0xc6, 0x6a, 0xd4, 0xb4, 0xeb, 0x4a, 0xc9, 0x5a, 0x01, 0xd6, 0x04, 0xba, 0x7b, 0x85, 0x2e, 0xb4,
	0xdf, 0x96, 0x56, 0x55, 0x9d, 0xe8, 0x52, 0x58, 0x61, 0x2d, 0xc2, 0x6a, 0x4d, 0xe9, 0x1e, 0xfa,
	0xce, 0xe6, 0x12, 0x7d, 0x33, 0xe7, 0x83, 0xb4, 0x04, 0xe4, 0x39, 0x47, 0x7e, 0x93, 0xdf, 0xac,
	0xd7, 0xfe, 0xc1, 0x35, 0x1f, 0x39, 0x2e, 0x5d, 0xed, 0x26, 0x9f, 0x02, 0xb2, 0x33, 0xae, 0x5b,
	0x1c, 0xfb, 0x16, 0xe9, 0x73, 0xf2, 0xa0, 0x79, 0x43, 0xdc, 0xe9, 0x75, 0x8e, 0xb7, 0x4f, 0xf6,
	0x99, 0xd0, 0x16, 0x58, 0xc5, 0x61, 0x52, 0xb3, 0xd7, 0x6b, 0x77, 0x18, 0x7e, 0xbd, 0x3c, 0xba,
	0x97, 0xfd, 0xda, 0x4d, 0x5f, 0x92, 0xcd, 0x9a, 0x1d, 0xdf, 0xf7, 0xb9, 0xbd, 0x76, 0x6e, 0xe4,
	0xbd, 0xe1, 0x93, 0x2a, 0xf5, 0xfd, 0xf2, 0x68, 0x17, 0xc1, 0x61, 0x2e, 0xa7, 0xd3, 0xd3, 0x44,
	0x16, 0x4a, 0x5b, 0x48, 0xb2, 0x75, 0x9c, 0x8e, 0xc9, 0x76, 0x0e, 0x0e, 0xa5, 0xe2, 0x28, 0xb5,
	0x8a, 0x03, 0x4f, 0x3b, 0x61, 0x37, 0x1f, 0x27, 0x7b, 0x95, 0x83, 0x42, 0x89, 0x1f, 0x87, 0x52,
	0xe5, 0x52, 0x15, 0xa3, 0xe5, 0xa4, 0x9a, 0x5f, 0xf6, 0x27, 0x86, 0x9e, 0x91, 0x2d, 0xa7, 0x97,
	0x56, 0x80, 0x8b, 0xc3, 0x5e, 0x70, 0x47, 0x62, 0x83, 0xa0, 0x2f, 0xc8, 0x86, 0x33, 0x20, 0x5c,
	0xbc, 0xe1, 0x59, 0xfd, 0x7f, 0xb1, 0x5a, 0x07, 0x3c, 0x32, 0x20, 0xb2, 0x3a, 0x7b, 0xfa, 0xf4,
	0xe2, 0x2a, 0x7c, 0x44, 0x76, 0x5a, 0xb1, 0x8b, 0xab, 0xf0, 0x31, 0x7d, 0xd8, 0x92, 0x5c, 0xf2,
	0x86, 0xec, 0x5e, 0x83, 0x50, 0x4a, 0xc2, 0xb9, 0x54, 0xb9, 0x9f, 0x52, 0x94, 0xf9, 0xba, 0xd2,
	0x14, 0x2f, 0xc1, 0x4f, 0x20, 0xca, 0x7c, 0x4d, 0x63, 0xb2, 0x55, 0x72, 0x14, 0x33, 0x70, 0x71,
	0xd0, 0x0b, 0x8e, 0xa3, 0xac, 0x59, 0x26, 0x96, 0xec, 0xff, 0xfd, 0x3b, 0x6f, 0xcd, 0x3e, 0x20,
	0x51, 0xf5, 0x74, 0x86, 0x0b, 0xf0, 0x83, 0x8a, 0xb2, 0xdf, 0x42, 0x95, 0x30, 0xda, 0x62, 0x1c,
	0xd6, 0x89, 0xaa, 0x1e, 0xbe, 0xfd, 0xf2, 0x23, 0xec, 0x7c, 0xfe, 0x76, 0xd8, 0x79, 0x77, 0xf6,
	0xdf, 0xeb, 0x67, 0xe6, 0xc5, 0x6d, 0xaf, 0xe0, 0x64, 0xd3, 0xff, 0xd0, 0xcf, 0x7e, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x3e, 0xb2, 0x30, 0x6f, 0xd5, 0x03, 0x00, 0x00,
}

func (this *TrafficTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTarget)
	if !ok {
		that2, ok := that.(TrafficTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if len(this.Sources) != len(that1.Sources) {
		return false
	}
	for i := range this.Sources {
		if !this.Sources[i].Equal(that1.Sources[i]) {
			return false
		}
	}
	if len(this.Specs) != len(that1.Specs) {
		return false
	}
	for i := range this.Specs {
		if !this.Specs[i].Equal(that1.Specs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetSpec)
	if !ok {
		that2, ok := that.(TrafficTargetSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Matches) != len(that1.Matches) {
		return false
	}
	for i := range this.Matches {
		if this.Matches[i] != that1.Matches[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IdentityBindingSubject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IdentityBindingSubject)
	if !ok {
		that2, ok := that.(IdentityBindingSubject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
