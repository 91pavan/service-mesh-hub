// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/external/smi/trafficsplit/v1alpha2/traffic-split.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TrafficSplit allows users to incrementally direct percentages of traffic
// between various services. It will be used by clients such as ingress
// controllers or service mesh sidecars to split the outgoing traffic to
// different destinations.
type TrafficSplit struct {
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Spec                 *TrafficSplitSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TrafficSplit) Reset()         { *m = TrafficSplit{} }
func (m *TrafficSplit) String() string { return proto.CompactTextString(m) }
func (*TrafficSplit) ProtoMessage()    {}
func (*TrafficSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb32cb495875581b, []int{0}
}
func (m *TrafficSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplit.Unmarshal(m, b)
}
func (m *TrafficSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplit.Marshal(b, m, deterministic)
}
func (m *TrafficSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplit.Merge(m, src)
}
func (m *TrafficSplit) XXX_Size() int {
	return xxx_messageInfo_TrafficSplit.Size(m)
}
func (m *TrafficSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplit.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplit proto.InternalMessageInfo

func (m *TrafficSplit) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *TrafficSplit) GetSpec() *TrafficSplitSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// TrafficSplitSpec is the specification for a TrafficSplit
type TrafficSplitSpec struct {
	Service              string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Backends             []*TrafficSplitBackend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TrafficSplitSpec) Reset()         { *m = TrafficSplitSpec{} }
func (m *TrafficSplitSpec) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitSpec) ProtoMessage()    {}
func (*TrafficSplitSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb32cb495875581b, []int{1}
}
func (m *TrafficSplitSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitSpec.Unmarshal(m, b)
}
func (m *TrafficSplitSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitSpec.Marshal(b, m, deterministic)
}
func (m *TrafficSplitSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitSpec.Merge(m, src)
}
func (m *TrafficSplitSpec) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitSpec.Size(m)
}
func (m *TrafficSplitSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitSpec proto.InternalMessageInfo

func (m *TrafficSplitSpec) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TrafficSplitSpec) GetBackends() []*TrafficSplitBackend {
	if m != nil {
		return m.Backends
	}
	return nil
}

// TrafficSplitBackend defines a backend
type TrafficSplitBackend struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Weight               int32    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficSplitBackend) Reset()         { *m = TrafficSplitBackend{} }
func (m *TrafficSplitBackend) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitBackend) ProtoMessage()    {}
func (*TrafficSplitBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb32cb495875581b, []int{2}
}
func (m *TrafficSplitBackend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitBackend.Unmarshal(m, b)
}
func (m *TrafficSplitBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitBackend.Marshal(b, m, deterministic)
}
func (m *TrafficSplitBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitBackend.Merge(m, src)
}
func (m *TrafficSplitBackend) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitBackend.Size(m)
}
func (m *TrafficSplitBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitBackend.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitBackend proto.InternalMessageInfo

func (m *TrafficSplitBackend) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TrafficSplitBackend) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*TrafficSplit)(nil), "smi.trafficsplit.v1alpha1.TrafficSplit")
	proto.RegisterType((*TrafficSplitSpec)(nil), "smi.trafficsplit.v1alpha1.TrafficSplitSpec")
	proto.RegisterType((*TrafficSplitBackend)(nil), "smi.trafficsplit.v1alpha1.TrafficSplitBackend")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/external/smi/trafficsplit/v1alpha2/traffic-split.proto", fileDescriptor_fb32cb495875581b)
}

var fileDescriptor_fb32cb495875581b = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0x1d, 0x4e, 0xc4, 0x82, 0x7f, 0x32, 0x0d, 0x99, 0x1c, 0x94, 0x90, 0x98, 0x90, 0x28,
	0x6d, 0x86, 0x17, 0xe3, 0xc5, 0x84, 0x8b, 0x89, 0xc6, 0x83, 0xc3, 0x93, 0x9e, 0x4a, 0x29, 0x5b,
	0x65, 0xa3, 0xcd, 0x5a, 0x90, 0x33, 0x9f, 0xc6, 0xa3, 0x1f, 0xc3, 0x4f, 0xe1, 0xc1, 0x6f, 0xc0,
	0x37, 0x30, 0x74, 0x1b, 0x59, 0x0c, 0xea, 0x3c, 0x6d, 0xef, 0xbb, 0xe7, 0xd7, 0xe7, 0x79, 0xd7,
	0x17, 0x3c, 0x79, 0x4c, 0xf9, 0xe3, 0x1e, 0x24, 0x3c, 0x44, 0x92, 0x07, 0xbc, 0xc5, 0x38, 0x0a,
	0xa9, 0xf4, 0x5b, 0x22, 0xe2, 0xcf, 0x94, 0x28, 0x89, 0xb0, 0x60, 0x88, 0x4e, 0x15, 0x8d, 0x46,
	0x38, 0x40, 0x32, 0x64, 0x48, 0x45, 0x78, 0x30, 0x60, 0x44, 0x8a, 0x80, 0x29, 0x34, 0x71, 0x70,
	0x20, 0x7c, 0xdc, 0x4e, 0xbb, 0x2d, 0xdd, 0x86, 0x22, 0xe2, 0x8a, 0x5b, 0x87, 0x32, 0x64, 0x30,
	0x2b, 0x87, 0x89, 0xdc, 0xa9, 0x1d, 0x78, 0xdc, 0xe3, 0x5a, 0x85, 0x16, 0x6f, 0x31, 0x50, 0x73,
	0x56, 0xa4, 0xd1, 0xcf, 0x21, 0x53, 0x3a, 0xc8, 0xc4, 0x41, 0x21, 0x55, 0xb8, 0x8f, 0x15, 0x4e,
	0x90, 0xb3, 0x1c, 0x48, 0x44, 0x07, 0xff, 0x30, 0x48, 0xeb, 0x04, 0x41, 0x79, 0x10, 0x85, 0xd5,
	0x58, 0xc6, 0x40, 0xe3, 0xcd, 0x00, 0x95, 0x87, 0x78, 0xe8, 0xee, 0x62, 0x68, 0xeb, 0x02, 0x94,
	0xd2, 0xd0, 0x36, 0xad, 0x1b, 0xcd, 0x72, 0xbb, 0x0a, 0x09, 0x8f, 0x28, 0x5c, 0x1c, 0x03, 0x19,
	0x87, 0x77, 0xc9, 0xd7, 0x8e, 0xf9, 0xfe, 0x71, 0xbc, 0xe6, 0x2e, 0xd5, 0xd6, 0x15, 0x30, 0xa5,
	0xa0, 0xc4, 0x36, 0x34, 0x75, 0x0a, 0x7f, 0xfc, 0x9f, 0x30, 0x6b, 0xd8, 0x15, 0x94, 0xb8, 0x1a,
	0xbc, 0x3c, 0x99, 0xcd, 0xcd, 0x1d, 0x50, 0xc9, 0x32, 0xb3, 0xb9, 0xb9, 0x6b, 0x6d, 0x67, 0x3b,
	0xb2, 0x31, 0x05, 0x7b, 0xdf, 0x0f, 0xb0, 0x6c, 0xb0, 0x29, 0x69, 0x34, 0x61, 0x84, 0x6a, 0xfb,
	0x2d, 0x37, 0x2d, 0xad, 0x1b, 0x50, 0xea, 0x61, 0x32, 0xa4, 0xa3, 0xbe, 0xb4, 0x0b, 0xf5, 0xf5,
	0x66, 0xb9, 0x0d, 0x73, 0x26, 0xeb, 0xc4, 0x98, 0xbb, 0xe4, 0x1b, 0xd7, 0x60, 0x7f, 0x85, 0xe0,
	0x17, 0xf3, 0x2a, 0x28, 0xbe, 0x50, 0xe6, 0xf9, 0xca, 0x2e, 0xd4, 0x8d, 0xe6, 0x86, 0x9b, 0x54,
	0x9d, 0xfb, 0xd7, 0xcf, 0x23, 0xe3, 0xf1, 0xf6, 0xcf, 0x75, 0x16, 0x43, 0x2f, 0xe7, 0x4a, 0xf7,
	0x8a, 0xfa, 0x3e, 0xcf, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xd6, 0x02, 0xc0, 0x24, 0x03,
	0x00, 0x00,
}

func (this *TrafficSplit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplit)
	if !ok {
		that2, ok := that.(TrafficSplit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitSpec)
	if !ok {
		that2, ok := that.(TrafficSplitSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if len(this.Backends) != len(that1.Backends) {
		return false
	}
	for i := range this.Backends {
		if !this.Backends[i].Equal(that1.Backends[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitBackend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitBackend)
	if !ok {
		that2, ok := that.(TrafficSplitBackend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
