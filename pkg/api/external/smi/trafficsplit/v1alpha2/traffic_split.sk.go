// Code generated by solo-kit. DO NOT EDIT.

package v1alpha2

import (
	"log"
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewTrafficSplit(namespace, name string) *TrafficSplit {
	trafficsplit := &TrafficSplit{}
	trafficsplit.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return trafficsplit
}

func (r *TrafficSplit) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *TrafficSplit) SetStatus(status core.Status) {
	r.Status = status
}

func (r *TrafficSplit) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	metaCopy.Generation = 0
	// investigate zeroing out owner refs as well
	return hashutils.HashAll(
		metaCopy,
		r.Spec,
	)
}

func (r *TrafficSplit) GroupVersionKind() schema.GroupVersionKind {
	return TrafficSplitGVK
}

type TrafficSplitList []*TrafficSplit

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list TrafficSplitList) Find(namespace, name string) (*TrafficSplit, error) {
	for _, trafficSplit := range list {
		if trafficSplit.GetMetadata().Name == name {
			if namespace == "" || trafficSplit.GetMetadata().Namespace == namespace {
				return trafficSplit, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find trafficSplit %v.%v", namespace, name)
}

func (list TrafficSplitList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, trafficSplit := range list {
		ress = append(ress, trafficSplit)
	}
	return ress
}

func (list TrafficSplitList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, trafficSplit := range list {
		ress = append(ress, trafficSplit)
	}
	return ress
}

func (list TrafficSplitList) Names() []string {
	var names []string
	for _, trafficSplit := range list {
		names = append(names, trafficSplit.GetMetadata().Name)
	}
	return names
}

func (list TrafficSplitList) NamespacesDotNames() []string {
	var names []string
	for _, trafficSplit := range list {
		names = append(names, trafficSplit.GetMetadata().Namespace+"."+trafficSplit.GetMetadata().Name)
	}
	return names
}

func (list TrafficSplitList) Sort() TrafficSplitList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list TrafficSplitList) Clone() TrafficSplitList {
	var trafficSplitList TrafficSplitList
	for _, trafficSplit := range list {
		trafficSplitList = append(trafficSplitList, resources.Clone(trafficSplit).(*TrafficSplit))
	}
	return trafficSplitList
}

func (list TrafficSplitList) Each(f func(element *TrafficSplit)) {
	for _, trafficSplit := range list {
		f(trafficSplit)
	}
}

func (list TrafficSplitList) EachResource(f func(element resources.Resource)) {
	for _, trafficSplit := range list {
		f(trafficSplit)
	}
}

func (list TrafficSplitList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *TrafficSplit) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for TrafficSplit

func (o *TrafficSplit) GetObjectKind() schema.ObjectKind {
	t := TrafficSplitCrd.TypeMeta()
	return &t
}

func (o *TrafficSplit) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*TrafficSplit)
}

func (o *TrafficSplit) DeepCopyInto(out *TrafficSplit) {
	clone := resources.Clone(o).(*TrafficSplit)
	*out = *clone
}

var (
	TrafficSplitCrd = crd.NewCrd(
		"trafficsplits",
		TrafficSplitGVK.Group,
		TrafficSplitGVK.Version,
		TrafficSplitGVK.Kind,
		"trafficsplit",
		false,
		&TrafficSplit{})
)

func init() {
	if err := crd.AddCrd(TrafficSplitCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	TrafficSplitGVK = schema.GroupVersionKind{
		Version: "v1alpha2",
		Group:   "split.smi-spec.io",
		Kind:    "TrafficSplit",
	}
)
