// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/external/smi/httproutegroup/v1alpha1/http-route-group.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HTTPRouteGroup is used to describe HTTP/1 and HTTP/2 traffic.
// It enumerates the routes that can be served by an application.
type HTTPRouteGroup struct {
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by supergloo during validation
	Status core.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Routes for inbound traffic
	Matches              []*HTTPMatch `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HTTPRouteGroup) Reset()         { *m = HTTPRouteGroup{} }
func (m *HTTPRouteGroup) String() string { return proto.CompactTextString(m) }
func (*HTTPRouteGroup) ProtoMessage()    {}
func (*HTTPRouteGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_2481898165965c72, []int{0}
}
func (m *HTTPRouteGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRouteGroup.Unmarshal(m, b)
}
func (m *HTTPRouteGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRouteGroup.Marshal(b, m, deterministic)
}
func (m *HTTPRouteGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRouteGroup.Merge(m, src)
}
func (m *HTTPRouteGroup) XXX_Size() int {
	return xxx_messageInfo_HTTPRouteGroup.Size(m)
}
func (m *HTTPRouteGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRouteGroup.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRouteGroup proto.InternalMessageInfo

func (m *HTTPRouteGroup) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *HTTPRouteGroup) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *HTTPRouteGroup) GetMatches() []*HTTPMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

type HTTPMatch struct {
	// Name is the name of the match for referencing in a TrafficTarget
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Methods for inbound traffic as defined in RFC 7231
	// https://tools.ietf.org/html/rfc7231#section-4
	Methods []string `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
	// PathRegex is a regular expression defining the route
	PathRegex            string   `protobuf:"bytes,3,opt,name=pathRegex,proto3" json:"pathRegex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPMatch) Reset()         { *m = HTTPMatch{} }
func (m *HTTPMatch) String() string { return proto.CompactTextString(m) }
func (*HTTPMatch) ProtoMessage()    {}
func (*HTTPMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2481898165965c72, []int{1}
}
func (m *HTTPMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPMatch.Unmarshal(m, b)
}
func (m *HTTPMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPMatch.Marshal(b, m, deterministic)
}
func (m *HTTPMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPMatch.Merge(m, src)
}
func (m *HTTPMatch) XXX_Size() int {
	return xxx_messageInfo_HTTPMatch.Size(m)
}
func (m *HTTPMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPMatch.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPMatch proto.InternalMessageInfo

func (m *HTTPMatch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPMatch) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *HTTPMatch) GetPathRegex() string {
	if m != nil {
		return m.PathRegex
	}
	return ""
}

func init() {
	proto.RegisterType((*HTTPRouteGroup)(nil), "smi.httproutegroup.v1alpha1.HTTPRouteGroup")
	proto.RegisterType((*HTTPMatch)(nil), "smi.httproutegroup.v1alpha1.HTTPMatch")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/external/smi/httproutegroup/v1alpha1/http-route-group.proto", fileDescriptor_2481898165965c72)
}

var fileDescriptor_2481898165965c72 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0xeb, 0xd3, 0x30,
	0x18, 0xc6, 0xad, 0xfd, 0xb3, 0xd9, 0x0c, 0x04, 0xc3, 0x90, 0x3a, 0xc5, 0x8d, 0x1e, 0x64, 0x07,
	0x9b, 0xd0, 0x79, 0x11, 0x4f, 0xb2, 0xcb, 0xbc, 0x0c, 0xa4, 0x1b, 0x08, 0x9e, 0xcc, 0xba, 0xac,
	0x8d, 0x5b, 0x96, 0x90, 0xbc, 0x1d, 0xfb, 0x48, 0x7e, 0x14, 0xbf, 0x80, 0xd7, 0x1d, 0xfc, 0x08,
	0x7e, 0x02, 0x49, 0xd6, 0x4e, 0x06, 0xa2, 0xfb, 0x9f, 0x9a, 0xbc, 0xcf, 0xfb, 0x4b, 0x9f, 0x87,
	0xf7, 0x45, 0x5f, 0x4a, 0x01, 0x55, 0xbd, 0x22, 0x85, 0x92, 0xd4, 0xaa, 0x9d, 0x4a, 0x85, 0xa2,
	0x92, 0xdb, 0x2a, 0xd5, 0x46, 0x7d, 0xe5, 0x05, 0x58, 0xca, 0xb4, 0xa0, 0xfc, 0x08, 0xdc, 0xec,
	0xd9, 0x8e, 0x5a, 0x29, 0x68, 0x05, 0xa0, 0x8d, 0xaa, 0x81, 0x97, 0x46, 0xd5, 0x9a, 0x1e, 0x32,
	0xb6, 0xd3, 0x15, 0xcb, 0x7c, 0x3d, 0xf5, 0x42, 0xea, 0x15, 0xa2, 0x8d, 0x02, 0x85, 0x9f, 0x5b,
	0x29, 0xc8, 0x35, 0x43, 0x5a, 0x66, 0xd0, 0x2f, 0x55, 0xa9, 0x7c, 0x1f, 0x75, 0xa7, 0x33, 0x32,
	0xc8, 0xfe, 0x62, 0xca, 0x7f, 0xb7, 0x02, 0xbc, 0x9f, 0x43, 0x46, 0x25, 0x07, 0xb6, 0x66, 0xc0,
	0x1a, 0xe4, 0xf5, 0x0d, 0x88, 0xe1, 0x9b, 0x7b, 0xfc, 0xa0, 0xbd, 0x37, 0x08, 0xbd, 0x05, 0x01,
	0x06, 0xb5, 0x3d, 0x03, 0xc9, 0x8f, 0x00, 0x3d, 0xfe, 0xb0, 0x5c, 0x7e, 0xcc, 0x5d, 0xec, 0x99,
	0x8b, 0x8d, 0xdf, 0xa2, 0x47, 0xad, 0xed, 0x38, 0x18, 0x05, 0xe3, 0xde, 0xe4, 0x29, 0x29, 0x94,
	0xe1, 0xc4, 0x3d, 0x44, 0x84, 0x22, 0xf3, 0x46, 0x9d, 0xde, 0x7d, 0x3f, 0x0d, 0x1f, 0xe4, 0x97,
	0x6e, 0x3c, 0x43, 0x9d, 0xf3, 0xe3, 0xf1, 0x43, 0xcf, 0xf5, 0xaf, 0xb9, 0x85, 0xd7, 0xa6, 0xcf,
	0x1c, 0xf5, 0xeb, 0x34, 0x7c, 0x02, 0xdc, 0xc2, 0x5a, 0x6c, 0x36, 0xef, 0x12, 0x51, 0xee, 0x95,
	0xe1, 0x49, 0xde, 0xe0, 0xf8, 0x3d, 0xea, 0x4a, 0x06, 0x45, 0xc5, 0x6d, 0x1c, 0x8e, 0xc2, 0x71,
	0x6f, 0xf2, 0x8a, 0xfc, 0x63, 0x3e, 0xc4, 0x05, 0x98, 0xbb, 0xfe, 0xbc, 0xc5, 0x92, 0x4f, 0x28,
	0xba, 0x54, 0x31, 0x46, 0x77, 0x7b, 0x26, 0xb9, 0x4f, 0x13, 0xe5, 0xfe, 0x8c, 0x63, 0xd4, 0x95,
	0x1c, 0x2a, 0xb5, 0x76, 0x66, 0xc3, 0x71, 0x94, 0xb7, 0x57, 0xfc, 0x02, 0x45, 0x9a, 0x41, 0x95,
	0xf3, 0x92, 0x1f, 0xe3, 0xd0, 0x23, 0x7f, 0x0a, 0xd3, 0xc5, 0xb7, 0x9f, 0x2f, 0x83, 0xcf, 0xf3,
	0xff, 0x2e, 0xa4, 0xde, 0x96, 0x37, 0x2f, 0xe5, 0xaa, 0xe3, 0x87, 0xf1, 0xe6, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xce, 0x41, 0x9e, 0x8d, 0xe8, 0x02, 0x00, 0x00,
}

func (this *HTTPRouteGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRouteGroup)
	if !ok {
		that2, ok := that.(HTTPRouteGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if len(this.Matches) != len(that1.Matches) {
		return false
	}
	for i := range this.Matches {
		if !this.Matches[i].Equal(that1.Matches[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPMatch)
	if !ok {
		that2, ok := that.(HTTPMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if this.Methods[i] != that1.Methods[i] {
			return false
		}
	}
	if this.PathRegex != that1.PathRegex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
