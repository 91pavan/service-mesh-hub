/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeshGroupCertificateSigningRequestLister helps list MeshGroupCertificateSigningRequests.
type MeshGroupCertificateSigningRequestLister interface {
	// List lists all MeshGroupCertificateSigningRequests in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MeshGroupCertificateSigningRequest, err error)
	// MeshGroupCertificateSigningRequests returns an object that can list and get MeshGroupCertificateSigningRequests.
	MeshGroupCertificateSigningRequests(namespace string) MeshGroupCertificateSigningRequestNamespaceLister
	MeshGroupCertificateSigningRequestListerExpansion
}

// meshGroupCertificateSigningRequestLister implements the MeshGroupCertificateSigningRequestLister interface.
type meshGroupCertificateSigningRequestLister struct {
	indexer cache.Indexer
}

// NewMeshGroupCertificateSigningRequestLister returns a new MeshGroupCertificateSigningRequestLister.
func NewMeshGroupCertificateSigningRequestLister(indexer cache.Indexer) MeshGroupCertificateSigningRequestLister {
	return &meshGroupCertificateSigningRequestLister{indexer: indexer}
}

// List lists all MeshGroupCertificateSigningRequests in the indexer.
func (s *meshGroupCertificateSigningRequestLister) List(selector labels.Selector) (ret []*v1alpha1.MeshGroupCertificateSigningRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshGroupCertificateSigningRequest))
	})
	return ret, err
}

// MeshGroupCertificateSigningRequests returns an object that can list and get MeshGroupCertificateSigningRequests.
func (s *meshGroupCertificateSigningRequestLister) MeshGroupCertificateSigningRequests(namespace string) MeshGroupCertificateSigningRequestNamespaceLister {
	return meshGroupCertificateSigningRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeshGroupCertificateSigningRequestNamespaceLister helps list and get MeshGroupCertificateSigningRequests.
type MeshGroupCertificateSigningRequestNamespaceLister interface {
	// List lists all MeshGroupCertificateSigningRequests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MeshGroupCertificateSigningRequest, err error)
	// Get retrieves the MeshGroupCertificateSigningRequest from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MeshGroupCertificateSigningRequest, error)
	MeshGroupCertificateSigningRequestNamespaceListerExpansion
}

// meshGroupCertificateSigningRequestNamespaceLister implements the MeshGroupCertificateSigningRequestNamespaceLister
// interface.
type meshGroupCertificateSigningRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeshGroupCertificateSigningRequests in the indexer for a given namespace.
func (s meshGroupCertificateSigningRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MeshGroupCertificateSigningRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshGroupCertificateSigningRequest))
	})
	return ret, err
}

// Get retrieves the MeshGroupCertificateSigningRequest from the indexer for a given namespace and name.
func (s meshGroupCertificateSigningRequestNamespaceLister) Get(name string) (*v1alpha1.MeshGroupCertificateSigningRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("meshgroupcertificatesigningrequest"), name)
	}
	return obj.(*v1alpha1.MeshGroupCertificateSigningRequest), nil
}
