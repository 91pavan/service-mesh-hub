// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/gogo/protobuf/proto"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TODO: modify as needed to populate additional fields
func NewEncryptionRule(namespace, name string) *EncryptionRule {
	return &EncryptionRule{
		Metadata: core.Metadata{
			Name:      name,
			Namespace: namespace,
		},
	}
}

func (r *EncryptionRule) SetStatus(status core.Status) {
	r.Status = status
}

func (r *EncryptionRule) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *EncryptionRule) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.TargetMesh,
		r.Spec,
	)
}

type EncryptionRuleList []*EncryptionRule
type EcryptionrulesByNamespace map[string]EncryptionRuleList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list EncryptionRuleList) Find(namespace, name string) (*EncryptionRule, error) {
	for _, encryptionRule := range list {
		if encryptionRule.Metadata.Name == name {
			if namespace == "" || encryptionRule.Metadata.Namespace == namespace {
				return encryptionRule, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find encryptionRule %v.%v", namespace, name)
}

func (list EncryptionRuleList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, encryptionRule := range list {
		ress = append(ress, encryptionRule)
	}
	return ress
}

func (list EncryptionRuleList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, encryptionRule := range list {
		ress = append(ress, encryptionRule)
	}
	return ress
}

func (list EncryptionRuleList) Names() []string {
	var names []string
	for _, encryptionRule := range list {
		names = append(names, encryptionRule.Metadata.Name)
	}
	return names
}

func (list EncryptionRuleList) NamespacesDotNames() []string {
	var names []string
	for _, encryptionRule := range list {
		names = append(names, encryptionRule.Metadata.Namespace+"."+encryptionRule.Metadata.Name)
	}
	return names
}

func (list EncryptionRuleList) Sort() EncryptionRuleList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].Metadata.Less(list[j].Metadata)
	})
	return list
}

func (list EncryptionRuleList) Clone() EncryptionRuleList {
	var encryptionRuleList EncryptionRuleList
	for _, encryptionRule := range list {
		encryptionRuleList = append(encryptionRuleList, proto.Clone(encryptionRule).(*EncryptionRule))
	}
	return encryptionRuleList
}

func (list EncryptionRuleList) Each(f func(element *EncryptionRule)) {
	for _, encryptionRule := range list {
		f(encryptionRule)
	}
}

func (list EncryptionRuleList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *EncryptionRule) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (list EncryptionRuleList) ByNamespace() EcryptionrulesByNamespace {
	byNamespace := make(EcryptionrulesByNamespace)
	for _, encryptionRule := range list {
		byNamespace.Add(encryptionRule)
	}
	return byNamespace
}

func (byNamespace EcryptionrulesByNamespace) Add(encryptionRule ...*EncryptionRule) {
	for _, item := range encryptionRule {
		byNamespace[item.Metadata.Namespace] = append(byNamespace[item.Metadata.Namespace], item)
	}
}

func (byNamespace EcryptionrulesByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace EcryptionrulesByNamespace) List() EncryptionRuleList {
	var list EncryptionRuleList
	for _, encryptionRuleList := range byNamespace {
		list = append(list, encryptionRuleList...)
	}
	return list.Sort()
}

func (byNamespace EcryptionrulesByNamespace) Clone() EcryptionrulesByNamespace {
	return byNamespace.List().Clone().ByNamespace()
}

var _ resources.Resource = &EncryptionRule{}

// Kubernetes Adapter for EncryptionRule

func (o *EncryptionRule) GetObjectKind() schema.ObjectKind {
	t := EncryptionRuleCrd.TypeMeta()
	return &t
}

func (o *EncryptionRule) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*EncryptionRule)
}

var EncryptionRuleCrd = crd.NewCrd("supergloo.solo.io",
	"ecryptionrules",
	"supergloo.solo.io",
	"v1",
	"EncryptionRule",
	"er",
	false,
	&EncryptionRule{})
