// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewMeshBridge(namespace, name string) *MeshBridge {
	meshbridge := &MeshBridge{}
	meshbridge.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return meshbridge
}

func (r *MeshBridge) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *MeshBridge) SetStatus(status core.Status) {
	r.Status = status
}

func (r *MeshBridge) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *MeshBridge) GroupVersionKind() schema.GroupVersionKind {
	return MeshBridgeGVK
}

type MeshBridgeList []*MeshBridge

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list MeshBridgeList) Find(namespace, name string) (*MeshBridge, error) {
	for _, meshBridge := range list {
		if meshBridge.GetMetadata().Name == name {
			if namespace == "" || meshBridge.GetMetadata().Namespace == namespace {
				return meshBridge, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find meshBridge %v.%v", namespace, name)
}

func (list MeshBridgeList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, meshBridge := range list {
		ress = append(ress, meshBridge)
	}
	return ress
}

func (list MeshBridgeList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, meshBridge := range list {
		ress = append(ress, meshBridge)
	}
	return ress
}

func (list MeshBridgeList) Names() []string {
	var names []string
	for _, meshBridge := range list {
		names = append(names, meshBridge.GetMetadata().Name)
	}
	return names
}

func (list MeshBridgeList) NamespacesDotNames() []string {
	var names []string
	for _, meshBridge := range list {
		names = append(names, meshBridge.GetMetadata().Namespace+"."+meshBridge.GetMetadata().Name)
	}
	return names
}

func (list MeshBridgeList) Sort() MeshBridgeList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list MeshBridgeList) Clone() MeshBridgeList {
	var meshBridgeList MeshBridgeList
	for _, meshBridge := range list {
		meshBridgeList = append(meshBridgeList, resources.Clone(meshBridge).(*MeshBridge))
	}
	return meshBridgeList
}

func (list MeshBridgeList) Each(f func(element *MeshBridge)) {
	for _, meshBridge := range list {
		f(meshBridge)
	}
}

func (list MeshBridgeList) EachResource(f func(element resources.Resource)) {
	for _, meshBridge := range list {
		f(meshBridge)
	}
}

func (list MeshBridgeList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *MeshBridge) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for MeshBridge

func (o *MeshBridge) GetObjectKind() schema.ObjectKind {
	t := MeshBridgeCrd.TypeMeta()
	return &t
}

func (o *MeshBridge) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*MeshBridge)
}

func (o *MeshBridge) DeepCopyInto(out *MeshBridge) {
	clone := resources.Clone(o).(*MeshBridge)
	*out = *clone
}

var (
	MeshBridgeCrd = crd.NewCrd(
		"meshbridges",
		MeshBridgeGVK.Group,
		MeshBridgeGVK.Version,
		MeshBridgeGVK.Kind,
		"mb",
		false,
		&MeshBridge{})
)

func init() {
	if err := crd.AddCrd(MeshBridgeCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	MeshBridgeGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "zephyr.solo.io",
		Kind:    "MeshBridge",
	}
)
