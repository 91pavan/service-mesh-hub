// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/reconcile"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
)

// Option to copy anything from the original to the desired before writing. Return value of false means don't update
type TransitionMeshBridgeFunc func(original, desired *MeshBridge) (bool, error)

type MeshBridgeReconciler interface {
	Reconcile(namespace string, desiredResources MeshBridgeList, transition TransitionMeshBridgeFunc, opts clients.ListOpts) error
}

func meshBridgesToResources(list MeshBridgeList) resources.ResourceList {
	var resourceList resources.ResourceList
	for _, meshBridge := range list {
		resourceList = append(resourceList, meshBridge)
	}
	return resourceList
}

func NewMeshBridgeReconciler(client MeshBridgeClient) MeshBridgeReconciler {
	return &meshBridgeReconciler{
		base: reconcile.NewReconciler(client.BaseClient()),
	}
}

type meshBridgeReconciler struct {
	base reconcile.Reconciler
}

func (r *meshBridgeReconciler) Reconcile(namespace string, desiredResources MeshBridgeList, transition TransitionMeshBridgeFunc, opts clients.ListOpts) error {
	opts = opts.WithDefaults()
	opts.Ctx = contextutils.WithLogger(opts.Ctx, "meshBridge_reconciler")
	var transitionResources reconcile.TransitionResourcesFunc
	if transition != nil {
		transitionResources = func(original, desired resources.Resource) (bool, error) {
			return transition(original.(*MeshBridge), desired.(*MeshBridge))
		}
	}
	return r.base.Reconcile(namespace, meshBridgesToResources(desiredResources), transitionResources, opts)
}
