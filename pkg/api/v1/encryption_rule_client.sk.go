// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type EncryptionRuleClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*EncryptionRule, error)
	Write(resource *EncryptionRule, opts clients.WriteOpts) (*EncryptionRule, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (EncryptionRuleList, error)
	Watch(namespace string, opts clients.WatchOpts) (<-chan EncryptionRuleList, <-chan error, error)
}

type encryptionRuleClient struct {
	rc clients.ResourceClient
}

func NewEncryptionRuleClient(rcFactory factory.ResourceClientFactory) (EncryptionRuleClient, error) {
	return NewEncryptionRuleClientWithToken(rcFactory, "")
}

func NewEncryptionRuleClientWithToken(rcFactory factory.ResourceClientFactory, token string) (EncryptionRuleClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &EncryptionRule{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base EncryptionRule resource client")
	}
	return NewEncryptionRuleClientWithBase(rc), nil
}

func NewEncryptionRuleClientWithBase(rc clients.ResourceClient) EncryptionRuleClient {
	return &encryptionRuleClient{
		rc: rc,
	}
}

func (client *encryptionRuleClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *encryptionRuleClient) Register() error {
	return client.rc.Register()
}

func (client *encryptionRuleClient) Read(namespace, name string, opts clients.ReadOpts) (*EncryptionRule, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*EncryptionRule), nil
}

func (client *encryptionRuleClient) Write(encryptionRule *EncryptionRule, opts clients.WriteOpts) (*EncryptionRule, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(encryptionRule, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*EncryptionRule), nil
}

func (client *encryptionRuleClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *encryptionRuleClient) List(namespace string, opts clients.ListOpts) (EncryptionRuleList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToEncryptionRule(resourceList), nil
}

func (client *encryptionRuleClient) Watch(namespace string, opts clients.WatchOpts) (<-chan EncryptionRuleList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	ecryptionrulesChan := make(chan EncryptionRuleList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				ecryptionrulesChan <- convertToEncryptionRule(resourceList)
			case <-opts.Ctx.Done():
				close(ecryptionrulesChan)
				return
			}
		}
	}()
	return ecryptionrulesChan, errs, nil
}

func convertToEncryptionRule(resources resources.ResourceList) EncryptionRuleList {
	var encryptionRuleList EncryptionRuleList
	for _, resource := range resources {
		encryptionRuleList = append(encryptionRuleList, resource.(*EncryptionRule))
	}
	return encryptionRuleList
}
