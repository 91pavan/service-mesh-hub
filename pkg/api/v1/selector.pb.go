// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/v1/selector.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// specifies a method by which to select pods
// with in a mesh for the application of rules and policies
type PodSelector struct {
	// specify the type of selector to use with selectorType
	//
	// Types that are valid to be assigned to SelectorType:
	//	*PodSelector_LabelSelector_
	//	*PodSelector_UpstreamSelector_
	//	*PodSelector_ServiceSelector_
	//	*PodSelector_NamespaceSelector_
	SelectorType         isPodSelector_SelectorType `protobuf_oneof:"selector_type"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PodSelector) Reset()         { *m = PodSelector{} }
func (m *PodSelector) String() string { return proto.CompactTextString(m) }
func (*PodSelector) ProtoMessage()    {}
func (*PodSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e146a27078be6c, []int{0}
}
func (m *PodSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSelector.Unmarshal(m, b)
}
func (m *PodSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSelector.Marshal(b, m, deterministic)
}
func (m *PodSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSelector.Merge(m, src)
}
func (m *PodSelector) XXX_Size() int {
	return xxx_messageInfo_PodSelector.Size(m)
}
func (m *PodSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSelector.DiscardUnknown(m)
}

var xxx_messageInfo_PodSelector proto.InternalMessageInfo

type isPodSelector_SelectorType interface {
	isPodSelector_SelectorType()
	Equal(interface{}) bool
}

type PodSelector_LabelSelector_ struct {
	LabelSelector *PodSelector_LabelSelector `protobuf:"bytes,1,opt,name=label_selector,json=labelSelector,proto3,oneof" json:"label_selector,omitempty"`
}
type PodSelector_UpstreamSelector_ struct {
	UpstreamSelector *PodSelector_UpstreamSelector `protobuf:"bytes,2,opt,name=upstream_selector,json=upstreamSelector,proto3,oneof" json:"upstream_selector,omitempty"`
}
type PodSelector_ServiceSelector_ struct {
	ServiceSelector *PodSelector_ServiceSelector `protobuf:"bytes,4,opt,name=service_selector,json=serviceSelector,proto3,oneof" json:"service_selector,omitempty"`
}
type PodSelector_NamespaceSelector_ struct {
	NamespaceSelector *PodSelector_NamespaceSelector `protobuf:"bytes,3,opt,name=namespace_selector,json=namespaceSelector,proto3,oneof" json:"namespace_selector,omitempty"`
}

func (*PodSelector_LabelSelector_) isPodSelector_SelectorType()     {}
func (*PodSelector_UpstreamSelector_) isPodSelector_SelectorType()  {}
func (*PodSelector_ServiceSelector_) isPodSelector_SelectorType()   {}
func (*PodSelector_NamespaceSelector_) isPodSelector_SelectorType() {}

func (m *PodSelector) GetSelectorType() isPodSelector_SelectorType {
	if m != nil {
		return m.SelectorType
	}
	return nil
}

func (m *PodSelector) GetLabelSelector() *PodSelector_LabelSelector {
	if x, ok := m.GetSelectorType().(*PodSelector_LabelSelector_); ok {
		return x.LabelSelector
	}
	return nil
}

func (m *PodSelector) GetUpstreamSelector() *PodSelector_UpstreamSelector {
	if x, ok := m.GetSelectorType().(*PodSelector_UpstreamSelector_); ok {
		return x.UpstreamSelector
	}
	return nil
}

func (m *PodSelector) GetServiceSelector() *PodSelector_ServiceSelector {
	if x, ok := m.GetSelectorType().(*PodSelector_ServiceSelector_); ok {
		return x.ServiceSelector
	}
	return nil
}

func (m *PodSelector) GetNamespaceSelector() *PodSelector_NamespaceSelector {
	if x, ok := m.GetSelectorType().(*PodSelector_NamespaceSelector_); ok {
		return x.NamespaceSelector
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PodSelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PodSelector_LabelSelector_)(nil),
		(*PodSelector_UpstreamSelector_)(nil),
		(*PodSelector_ServiceSelector_)(nil),
		(*PodSelector_NamespaceSelector_)(nil),
	}
}

// select pods by their labels
type PodSelector_LabelSelector struct {
	LabelsToMatch        map[string]string `protobuf:"bytes,1,rep,name=labels_to_match,json=labelsToMatch,proto3" json:"labels_to_match,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PodSelector_LabelSelector) Reset()         { *m = PodSelector_LabelSelector{} }
func (m *PodSelector_LabelSelector) String() string { return proto.CompactTextString(m) }
func (*PodSelector_LabelSelector) ProtoMessage()    {}
func (*PodSelector_LabelSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e146a27078be6c, []int{0, 0}
}
func (m *PodSelector_LabelSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSelector_LabelSelector.Unmarshal(m, b)
}
func (m *PodSelector_LabelSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSelector_LabelSelector.Marshal(b, m, deterministic)
}
func (m *PodSelector_LabelSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSelector_LabelSelector.Merge(m, src)
}
func (m *PodSelector_LabelSelector) XXX_Size() int {
	return xxx_messageInfo_PodSelector_LabelSelector.Size(m)
}
func (m *PodSelector_LabelSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSelector_LabelSelector.DiscardUnknown(m)
}

var xxx_messageInfo_PodSelector_LabelSelector proto.InternalMessageInfo

func (m *PodSelector_LabelSelector) GetLabelsToMatch() map[string]string {
	if m != nil {
		return m.LabelsToMatch
	}
	return nil
}

// select pods based on their services or subsets of services.
// upstream CRDs will be created by discovery corresponding to
// kubernetes services and the available subsets of those services
type PodSelector_UpstreamSelector struct {
	// apply the selector to one or more of their upstreams by adding their refs here
	Upstreams            []core.ResourceRef `protobuf:"bytes,1,rep,name=upstreams,proto3" json:"upstreams"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PodSelector_UpstreamSelector) Reset()         { *m = PodSelector_UpstreamSelector{} }
func (m *PodSelector_UpstreamSelector) String() string { return proto.CompactTextString(m) }
func (*PodSelector_UpstreamSelector) ProtoMessage()    {}
func (*PodSelector_UpstreamSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e146a27078be6c, []int{0, 1}
}
func (m *PodSelector_UpstreamSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSelector_UpstreamSelector.Unmarshal(m, b)
}
func (m *PodSelector_UpstreamSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSelector_UpstreamSelector.Marshal(b, m, deterministic)
}
func (m *PodSelector_UpstreamSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSelector_UpstreamSelector.Merge(m, src)
}
func (m *PodSelector_UpstreamSelector) XXX_Size() int {
	return xxx_messageInfo_PodSelector_UpstreamSelector.Size(m)
}
func (m *PodSelector_UpstreamSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSelector_UpstreamSelector.DiscardUnknown(m)
}

var xxx_messageInfo_PodSelector_UpstreamSelector proto.InternalMessageInfo

func (m *PodSelector_UpstreamSelector) GetUpstreams() []core.ResourceRef {
	if m != nil {
		return m.Upstreams
	}
	return nil
}

// select pods based on the services they back
type PodSelector_ServiceSelector struct {
	// apply the selector to one or more services by adding their refs here
	Services             []core.ResourceRef `protobuf:"bytes,1,rep,name=services,proto3" json:"services"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PodSelector_ServiceSelector) Reset()         { *m = PodSelector_ServiceSelector{} }
func (m *PodSelector_ServiceSelector) String() string { return proto.CompactTextString(m) }
func (*PodSelector_ServiceSelector) ProtoMessage()    {}
func (*PodSelector_ServiceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e146a27078be6c, []int{0, 2}
}
func (m *PodSelector_ServiceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSelector_ServiceSelector.Unmarshal(m, b)
}
func (m *PodSelector_ServiceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSelector_ServiceSelector.Marshal(b, m, deterministic)
}
func (m *PodSelector_ServiceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSelector_ServiceSelector.Merge(m, src)
}
func (m *PodSelector_ServiceSelector) XXX_Size() int {
	return xxx_messageInfo_PodSelector_ServiceSelector.Size(m)
}
func (m *PodSelector_ServiceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSelector_ServiceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_PodSelector_ServiceSelector proto.InternalMessageInfo

func (m *PodSelector_ServiceSelector) GetServices() []core.ResourceRef {
	if m != nil {
		return m.Services
	}
	return nil
}

// select all pods in these namespaces
type PodSelector_NamespaceSelector struct {
	Namespaces           []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodSelector_NamespaceSelector) Reset()         { *m = PodSelector_NamespaceSelector{} }
func (m *PodSelector_NamespaceSelector) String() string { return proto.CompactTextString(m) }
func (*PodSelector_NamespaceSelector) ProtoMessage()    {}
func (*PodSelector_NamespaceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e146a27078be6c, []int{0, 3}
}
func (m *PodSelector_NamespaceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSelector_NamespaceSelector.Unmarshal(m, b)
}
func (m *PodSelector_NamespaceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSelector_NamespaceSelector.Marshal(b, m, deterministic)
}
func (m *PodSelector_NamespaceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSelector_NamespaceSelector.Merge(m, src)
}
func (m *PodSelector_NamespaceSelector) XXX_Size() int {
	return xxx_messageInfo_PodSelector_NamespaceSelector.Size(m)
}
func (m *PodSelector_NamespaceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSelector_NamespaceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_PodSelector_NamespaceSelector proto.InternalMessageInfo

func (m *PodSelector_NamespaceSelector) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterType((*PodSelector)(nil), "zephyr.solo.io.PodSelector")
	proto.RegisterType((*PodSelector_LabelSelector)(nil), "zephyr.solo.io.PodSelector.LabelSelector")
	proto.RegisterMapType((map[string]string)(nil), "zephyr.solo.io.PodSelector.LabelSelector.LabelsToMatchEntry")
	proto.RegisterType((*PodSelector_UpstreamSelector)(nil), "zephyr.solo.io.PodSelector.UpstreamSelector")
	proto.RegisterType((*PodSelector_ServiceSelector)(nil), "zephyr.solo.io.PodSelector.ServiceSelector")
	proto.RegisterType((*PodSelector_NamespaceSelector)(nil), "zephyr.solo.io.PodSelector.NamespaceSelector")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/v1/selector.proto", fileDescriptor_a8e146a27078be6c)
}

var fileDescriptor_a8e146a27078be6c = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0xbb, 0x4d, 0x2c, 0xe6, 0x84, 0x34, 0xc9, 0xd0, 0x8b, 0x76, 0x2f, 0x6a, 0xf1, 0xaa,
	0x52, 0x33, 0x8b, 0x2d, 0x8a, 0xf8, 0x07, 0x24, 0x20, 0x78, 0xa1, 0x45, 0xa7, 0x0a, 0xa2, 0x60,
	0xd8, 0x6c, 0x4f, 0x93, 0x35, 0xbb, 0x39, 0xc3, 0xcc, 0x6c, 0x68, 0x7c, 0x15, 0x5f, 0xc0, 0x37,
	0xd0, 0x47, 0xf0, 0x29, 0xbc, 0xf0, 0x1d, 0xbc, 0x97, 0x9d, 0xdd, 0x4d, 0x36, 0x5b, 0x48, 0x7b,
	0x37, 0xe7, 0x9b, 0xf9, 0x7e, 0x67, 0x38, 0x1f, 0x07, 0x1e, 0x8d, 0x42, 0x33, 0x4e, 0x86, 0x3c,
	0xa0, 0xd8, 0xd3, 0x14, 0x51, 0x2f, 0x24, 0x2f, 0x46, 0x3d, 0xee, 0x49, 0x45, 0x5f, 0x31, 0x30,
	0xda, 0xf3, 0x65, 0xe8, 0xcd, 0x1e, 0x78, 0x1a, 0x23, 0x0c, 0x0c, 0x29, 0x2e, 0x15, 0x19, 0x62,
	0xdb, 0xdf, 0x50, 0x8e, 0xe7, 0x8a, 0xa7, 0x1e, 0x1e, 0x92, 0xbb, 0x33, 0xa2, 0x11, 0xd9, 0x2b,
	0x2f, 0x3d, 0x65, 0xaf, 0x5c, 0x86, 0x97, 0x26, 0x13, 0xf1, 0xd2, 0xe4, 0xda, 0x9e, 0x6d, 0x33,
	0x09, 0x4d, 0x41, 0x56, 0x78, 0x91, 0x5d, 0xdd, 0xfd, 0xbe, 0x05, 0xcd, 0xb7, 0x74, 0x7e, 0x96,
	0xb7, 0x62, 0x02, 0xb6, 0x23, 0x7f, 0x88, 0xd1, 0xa0, 0x68, 0xbe, 0xeb, 0x1c, 0x38, 0x87, 0xcd,
	0xe3, 0x7b, 0x7c, 0xb5, 0x3b, 0x2f, 0x99, 0xf8, 0xeb, 0xd4, 0x51, 0x54, 0xaf, 0x36, 0x44, 0x2b,
	0x2a, 0x0b, 0xec, 0x33, 0x74, 0x13, 0xa9, 0x8d, 0x42, 0x3f, 0x5e, 0x62, 0x37, 0x2d, 0xf6, 0xfe,
	0x3a, 0xec, 0x87, 0xdc, 0x54, 0x22, 0x77, 0x92, 0x8a, 0xc6, 0x3e, 0x42, 0x47, 0xa3, 0x9a, 0x85,
	0x01, 0x2e, 0xd9, 0x75, 0xcb, 0x3e, 0x5a, 0xc7, 0x3e, 0xcb, 0x3c, 0x25, 0x74, 0x5b, 0xaf, 0x4a,
	0xec, 0x0b, 0xb0, 0xa9, 0x1f, 0xa3, 0x96, 0x7e, 0x99, 0x5d, 0xb3, 0xec, 0xde, 0x3a, 0xf6, 0x69,
	0xe1, 0x2a, 0xd1, 0xbb, 0xd3, 0xaa, 0xe8, 0xfe, 0x74, 0xa0, 0xb5, 0x32, 0x39, 0x76, 0x0e, 0x6d,
	0x3b, 0x39, 0x3d, 0x30, 0x34, 0x88, 0x7d, 0x13, 0x8c, 0x77, 0x9d, 0x83, 0xda, 0x61, 0xf3, 0xf8,
	0xd9, 0x8d, 0xa7, 0x9f, 0x55, 0xfa, 0x3d, 0xbd, 0x49, 0xed, 0x2f, 0xa7, 0x46, 0xcd, 0xf3, 0x38,
	0x0a, 0xcd, 0x7d, 0x01, 0xec, 0xea, 0x23, 0xd6, 0x81, 0xda, 0x04, 0xe7, 0x36, 0xed, 0x86, 0x48,
	0x8f, 0x6c, 0x07, 0x6e, 0xcd, 0xfc, 0x28, 0x41, 0x1b, 0x55, 0x43, 0x64, 0xc5, 0x93, 0xcd, 0xc7,
	0x8e, 0xfb, 0x0e, 0x3a, 0xd5, 0x6c, 0xd8, 0x73, 0x68, 0x14, 0xd9, 0xe8, 0xfc, 0xd7, 0x7b, 0x3c,
	0x20, 0x85, 0x8b, 0x3f, 0x0b, 0xd4, 0x94, 0xa8, 0x00, 0x05, 0x5e, 0xf4, 0xeb, 0xbf, 0xff, 0xdc,
	0xd9, 0x10, 0x4b, 0x87, 0x7b, 0x0a, 0xed, 0x4a, 0x24, 0xec, 0x29, 0xdc, 0xce, 0x23, 0xb9, 0x31,
	0x70, 0x61, 0x70, 0x4f, 0xa0, 0x7b, 0x25, 0x06, 0xb6, 0x0f, 0xb0, 0x88, 0x21, 0x63, 0x36, 0x44,
	0x49, 0xe9, 0xb7, 0xa1, 0x55, 0xe4, 0x3c, 0x30, 0x73, 0x89, 0xfd, 0x87, 0xbf, 0xfe, 0xd5, 0x9d,
	0x1f, 0x7f, 0xf7, 0x9d, 0x4f, 0x47, 0xd7, 0x2e, 0xad, 0x9c, 0x8c, 0xf2, 0xf5, 0x1a, 0x6e, 0xd9,
	0xdd, 0x3a, 0xf9, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x40, 0x00, 0x13, 0x40, 0xea, 0x03, 0x00, 0x00,
}

func (this *PodSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector)
	if !ok {
		that2, ok := that.(PodSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SelectorType == nil {
		if this.SelectorType != nil {
			return false
		}
	} else if this.SelectorType == nil {
		return false
	} else if !this.SelectorType.Equal(that1.SelectorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PodSelector_LabelSelector_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_LabelSelector_)
	if !ok {
		that2, ok := that.(PodSelector_LabelSelector_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LabelSelector.Equal(that1.LabelSelector) {
		return false
	}
	return true
}
func (this *PodSelector_UpstreamSelector_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_UpstreamSelector_)
	if !ok {
		that2, ok := that.(PodSelector_UpstreamSelector_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamSelector.Equal(that1.UpstreamSelector) {
		return false
	}
	return true
}
func (this *PodSelector_ServiceSelector_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_ServiceSelector_)
	if !ok {
		that2, ok := that.(PodSelector_ServiceSelector_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceSelector.Equal(that1.ServiceSelector) {
		return false
	}
	return true
}
func (this *PodSelector_NamespaceSelector_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_NamespaceSelector_)
	if !ok {
		that2, ok := that.(PodSelector_NamespaceSelector_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NamespaceSelector.Equal(that1.NamespaceSelector) {
		return false
	}
	return true
}
func (this *PodSelector_LabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_LabelSelector)
	if !ok {
		that2, ok := that.(PodSelector_LabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelsToMatch) != len(that1.LabelsToMatch) {
		return false
	}
	for i := range this.LabelsToMatch {
		if this.LabelsToMatch[i] != that1.LabelsToMatch[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PodSelector_UpstreamSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_UpstreamSelector)
	if !ok {
		that2, ok := that.(PodSelector_UpstreamSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Upstreams) != len(that1.Upstreams) {
		return false
	}
	for i := range this.Upstreams {
		if !this.Upstreams[i].Equal(&that1.Upstreams[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PodSelector_ServiceSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_ServiceSelector)
	if !ok {
		that2, ok := that.(PodSelector_ServiceSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(&that1.Services[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PodSelector_NamespaceSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSelector_NamespaceSelector)
	if !ok {
		that2, ok := that.(PodSelector_NamespaceSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
