// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/v1/routing.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	v1alpha3 "github.com/solo-io/supergloo/pkg/api/external/istio/networking/v1alpha3"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// a routing rule applies some L7 routing features to an existing mesh
// routing rules specify the following:
// for all requests:
// - originating from from **source pods**
// - sent to **destination pods**
// - matching one or more **request matcher**
// apply the specified RoutingRuleSpec
type RoutingRule struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by supergloo during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// target where we apply this rule. this can be a mesh group or an individual mesh
	TargetMesh *core.ResourceRef `protobuf:"bytes,1,opt,name=target_mesh,json=targetMesh,proto3" json:"target_mesh,omitempty"`
	// requests originating from these pods will have the rule applied
	// leave empty to have all pods in the mesh apply these rules
	SourceSelector *PodSelector `protobuf:"bytes,2,opt,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	// requests destined for these pods will have the rule applied
	// leave empty to apply to all destination pods in the mesh
	DestinationSelector *PodSelector `protobuf:"bytes,3,opt,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	// if specified, this rule will only apply to http requests
	// in the mesh matching these parameters
	RequestMatchers []*v1.Matcher `protobuf:"bytes,4,rep,name=RequestMatchers,proto3" json:"RequestMatchers,omitempty"`
	// contains the configuration that will be applied to
	// selected pods within the target mesh(es)
	Spec                 *RoutingRuleSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RoutingRule) Reset()         { *m = RoutingRule{} }
func (m *RoutingRule) String() string { return proto.CompactTextString(m) }
func (*RoutingRule) ProtoMessage()    {}
func (*RoutingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_29316bfaa5f4ba1a, []int{0}
}
func (m *RoutingRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingRule.Unmarshal(m, b)
}
func (m *RoutingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingRule.Marshal(b, m, deterministic)
}
func (m *RoutingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingRule.Merge(m, src)
}
func (m *RoutingRule) XXX_Size() int {
	return xxx_messageInfo_RoutingRule.Size(m)
}
func (m *RoutingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingRule.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingRule proto.InternalMessageInfo

func (m *RoutingRule) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *RoutingRule) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *RoutingRule) GetTargetMesh() *core.ResourceRef {
	if m != nil {
		return m.TargetMesh
	}
	return nil
}

func (m *RoutingRule) GetSourceSelector() *PodSelector {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *RoutingRule) GetDestinationSelector() *PodSelector {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *RoutingRule) GetRequestMatchers() []*v1.Matcher {
	if m != nil {
		return m.RequestMatchers
	}
	return nil
}

func (m *RoutingRule) GetSpec() *RoutingRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// the routing configuration that will be applied to the mesh(es)
type RoutingRuleSpec struct {
	// a routing rule can have one of several types
	// Note: types imported from istio will be replaced with our own
	// simpler types, this is just a place to start from
	//
	// Types that are valid to be assigned to RuleType:
	//	*RoutingRuleSpec_TrafficShifting
	//	*RoutingRuleSpec_FaultInjection
	//	*RoutingRuleSpec_RequestTimeout
	//	*RoutingRuleSpec_Retries
	//	*RoutingRuleSpec_CorsPolicy
	//	*RoutingRuleSpec_Mirror
	//	*RoutingRuleSpec_HeaderManipulation
	RuleType             isRoutingRuleSpec_RuleType `protobuf_oneof:"rule_type"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RoutingRuleSpec) Reset()         { *m = RoutingRuleSpec{} }
func (m *RoutingRuleSpec) String() string { return proto.CompactTextString(m) }
func (*RoutingRuleSpec) ProtoMessage()    {}
func (*RoutingRuleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_29316bfaa5f4ba1a, []int{1}
}
func (m *RoutingRuleSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingRuleSpec.Unmarshal(m, b)
}
func (m *RoutingRuleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingRuleSpec.Marshal(b, m, deterministic)
}
func (m *RoutingRuleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingRuleSpec.Merge(m, src)
}
func (m *RoutingRuleSpec) XXX_Size() int {
	return xxx_messageInfo_RoutingRuleSpec.Size(m)
}
func (m *RoutingRuleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingRuleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingRuleSpec proto.InternalMessageInfo

type isRoutingRuleSpec_RuleType interface {
	isRoutingRuleSpec_RuleType()
	Equal(interface{}) bool
}

type RoutingRuleSpec_TrafficShifting struct {
	TrafficShifting *TrafficShifting `protobuf:"bytes,1,opt,name=traffic_shifting,json=trafficShifting,proto3,oneof"`
}
type RoutingRuleSpec_FaultInjection struct {
	FaultInjection *v1alpha3.HTTPFaultInjection `protobuf:"bytes,2,opt,name=fault_injection,json=faultInjection,proto3,oneof"`
}
type RoutingRuleSpec_RequestTimeout struct {
	RequestTimeout *types.Duration `protobuf:"bytes,7,opt,name=request_timeout,json=requestTimeout,proto3,oneof"`
}
type RoutingRuleSpec_Retries struct {
	Retries *v1alpha3.HTTPRetry `protobuf:"bytes,8,opt,name=retries,proto3,oneof"`
}
type RoutingRuleSpec_CorsPolicy struct {
	CorsPolicy *v1alpha3.CorsPolicy `protobuf:"bytes,10,opt,name=cors_policy,json=corsPolicy,proto3,oneof"`
}
type RoutingRuleSpec_Mirror struct {
	Mirror *v1.Destination `protobuf:"bytes,9,opt,name=mirror,proto3,oneof"`
}
type RoutingRuleSpec_HeaderManipulation struct {
	HeaderManipulation *HeaderManipulation `protobuf:"bytes,12,opt,name=header_manipulation,json=headerManipulation,proto3,oneof"`
}

func (*RoutingRuleSpec_TrafficShifting) isRoutingRuleSpec_RuleType()    {}
func (*RoutingRuleSpec_FaultInjection) isRoutingRuleSpec_RuleType()     {}
func (*RoutingRuleSpec_RequestTimeout) isRoutingRuleSpec_RuleType()     {}
func (*RoutingRuleSpec_Retries) isRoutingRuleSpec_RuleType()            {}
func (*RoutingRuleSpec_CorsPolicy) isRoutingRuleSpec_RuleType()         {}
func (*RoutingRuleSpec_Mirror) isRoutingRuleSpec_RuleType()             {}
func (*RoutingRuleSpec_HeaderManipulation) isRoutingRuleSpec_RuleType() {}

func (m *RoutingRuleSpec) GetRuleType() isRoutingRuleSpec_RuleType {
	if m != nil {
		return m.RuleType
	}
	return nil
}

func (m *RoutingRuleSpec) GetTrafficShifting() *TrafficShifting {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_TrafficShifting); ok {
		return x.TrafficShifting
	}
	return nil
}

func (m *RoutingRuleSpec) GetFaultInjection() *v1alpha3.HTTPFaultInjection {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_FaultInjection); ok {
		return x.FaultInjection
	}
	return nil
}

func (m *RoutingRuleSpec) GetRequestTimeout() *types.Duration {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_RequestTimeout); ok {
		return x.RequestTimeout
	}
	return nil
}

func (m *RoutingRuleSpec) GetRetries() *v1alpha3.HTTPRetry {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_Retries); ok {
		return x.Retries
	}
	return nil
}

func (m *RoutingRuleSpec) GetCorsPolicy() *v1alpha3.CorsPolicy {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_CorsPolicy); ok {
		return x.CorsPolicy
	}
	return nil
}

func (m *RoutingRuleSpec) GetMirror() *v1.Destination {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_Mirror); ok {
		return x.Mirror
	}
	return nil
}

func (m *RoutingRuleSpec) GetHeaderManipulation() *HeaderManipulation {
	if x, ok := m.GetRuleType().(*RoutingRuleSpec_HeaderManipulation); ok {
		return x.HeaderManipulation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RoutingRuleSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RoutingRuleSpec_OneofMarshaler, _RoutingRuleSpec_OneofUnmarshaler, _RoutingRuleSpec_OneofSizer, []interface{}{
		(*RoutingRuleSpec_TrafficShifting)(nil),
		(*RoutingRuleSpec_FaultInjection)(nil),
		(*RoutingRuleSpec_RequestTimeout)(nil),
		(*RoutingRuleSpec_Retries)(nil),
		(*RoutingRuleSpec_CorsPolicy)(nil),
		(*RoutingRuleSpec_Mirror)(nil),
		(*RoutingRuleSpec_HeaderManipulation)(nil),
	}
}

func _RoutingRuleSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RoutingRuleSpec)
	// rule_type
	switch x := m.RuleType.(type) {
	case *RoutingRuleSpec_TrafficShifting:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrafficShifting); err != nil {
			return err
		}
	case *RoutingRuleSpec_FaultInjection:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FaultInjection); err != nil {
			return err
		}
	case *RoutingRuleSpec_RequestTimeout:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestTimeout); err != nil {
			return err
		}
	case *RoutingRuleSpec_Retries:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Retries); err != nil {
			return err
		}
	case *RoutingRuleSpec_CorsPolicy:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CorsPolicy); err != nil {
			return err
		}
	case *RoutingRuleSpec_Mirror:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mirror); err != nil {
			return err
		}
	case *RoutingRuleSpec_HeaderManipulation:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeaderManipulation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RoutingRuleSpec.RuleType has unexpected type %T", x)
	}
	return nil
}

func _RoutingRuleSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RoutingRuleSpec)
	switch tag {
	case 1: // rule_type.traffic_shifting
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrafficShifting)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_TrafficShifting{msg}
		return true, err
	case 2: // rule_type.fault_injection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(v1alpha3.HTTPFaultInjection)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_FaultInjection{msg}
		return true, err
	case 7: // rule_type.request_timeout
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Duration)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_RequestTimeout{msg}
		return true, err
	case 8: // rule_type.retries
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(v1alpha3.HTTPRetry)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_Retries{msg}
		return true, err
	case 10: // rule_type.cors_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(v1alpha3.CorsPolicy)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_CorsPolicy{msg}
		return true, err
	case 9: // rule_type.mirror
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(v1.Destination)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_Mirror{msg}
		return true, err
	case 12: // rule_type.header_manipulation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeaderManipulation)
		err := b.DecodeMessage(msg)
		m.RuleType = &RoutingRuleSpec_HeaderManipulation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RoutingRuleSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RoutingRuleSpec)
	// rule_type
	switch x := m.RuleType.(type) {
	case *RoutingRuleSpec_TrafficShifting:
		s := proto.Size(x.TrafficShifting)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutingRuleSpec_FaultInjection:
		s := proto.Size(x.FaultInjection)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutingRuleSpec_RequestTimeout:
		s := proto.Size(x.RequestTimeout)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutingRuleSpec_Retries:
		s := proto.Size(x.Retries)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutingRuleSpec_CorsPolicy:
		s := proto.Size(x.CorsPolicy)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutingRuleSpec_Mirror:
		s := proto.Size(x.Mirror)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutingRuleSpec_HeaderManipulation:
		s := proto.Size(x.HeaderManipulation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// requests for this rule will be routed to these destinations
type TrafficShifting struct {
	// split traffic between these subsets based on their weights
	// weights are relative to the sum of the weights
	Destinations         *v1.MultiDestination `protobuf:"bytes,1,opt,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TrafficShifting) Reset()         { *m = TrafficShifting{} }
func (m *TrafficShifting) String() string { return proto.CompactTextString(m) }
func (*TrafficShifting) ProtoMessage()    {}
func (*TrafficShifting) Descriptor() ([]byte, []int) {
	return fileDescriptor_29316bfaa5f4ba1a, []int{2}
}
func (m *TrafficShifting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficShifting.Unmarshal(m, b)
}
func (m *TrafficShifting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficShifting.Marshal(b, m, deterministic)
}
func (m *TrafficShifting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficShifting.Merge(m, src)
}
func (m *TrafficShifting) XXX_Size() int {
	return xxx_messageInfo_TrafficShifting.Size(m)
}
func (m *TrafficShifting) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficShifting.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficShifting proto.InternalMessageInfo

func (m *TrafficShifting) GetDestinations() *v1.MultiDestination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

// manipulate request and response headers
type HeaderManipulation struct {
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders,proto3" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders,proto3" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders,proto3" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders,proto3" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeaderManipulation) Reset()         { *m = HeaderManipulation{} }
func (m *HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*HeaderManipulation) ProtoMessage()    {}
func (*HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_29316bfaa5f4ba1a, []int{3}
}
func (m *HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderManipulation.Unmarshal(m, b)
}
func (m *HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderManipulation.Marshal(b, m, deterministic)
}
func (m *HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderManipulation.Merge(m, src)
}
func (m *HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_HeaderManipulation.Size(m)
}
func (m *HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderManipulation proto.InternalMessageInfo

func (m *HeaderManipulation) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutingRule)(nil), "supergloo.solo.io.RoutingRule")
	proto.RegisterType((*RoutingRuleSpec)(nil), "supergloo.solo.io.RoutingRuleSpec")
	proto.RegisterType((*TrafficShifting)(nil), "supergloo.solo.io.TrafficShifting")
	proto.RegisterType((*HeaderManipulation)(nil), "supergloo.solo.io.HeaderManipulation")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.HeaderManipulation.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.HeaderManipulation.AppendResponseHeadersEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/v1/routing.proto", fileDescriptor_29316bfaa5f4ba1a)
}

var fileDescriptor_29316bfaa5f4ba1a = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcd, 0x72, 0xdb, 0x36,
	0x10, 0xc7, 0x65, 0x4b, 0x71, 0x22, 0xc8, 0xb5, 0x52, 0x44, 0x76, 0x18, 0x1d, 0x5c, 0x8f, 0xa6,
	0x9d, 0xfa, 0x50, 0x93, 0x63, 0xbb, 0x93, 0xf1, 0xf8, 0x92, 0xd4, 0x75, 0x1b, 0xf6, 0xe0, 0xa9,
	0x0b, 0xbb, 0x33, 0x99, 0x5e, 0x38, 0x30, 0xb5, 0xa2, 0x50, 0x53, 0x04, 0x8b, 0x0f, 0x35, 0xba,
	0xe6, 0xd0, 0x67, 0xe9, 0xf4, 0x49, 0xfa, 0x14, 0x3d, 0xf4, 0xd4, 0x6b, 0xde, 0xa0, 0x43, 0x00,
	0x94, 0xa9, 0x8f, 0x24, 0xf2, 0x49, 0x02, 0xf7, 0xff, 0x5b, 0xfc, 0x89, 0xdd, 0x05, 0xd1, 0x61,
	0xc2, 0xd4, 0x50, 0xdf, 0xf8, 0x31, 0x1f, 0x05, 0x92, 0xa7, 0xfc, 0x80, 0xf1, 0x40, 0xea, 0x1c,
	0x44, 0x92, 0x72, 0x1e, 0xd0, 0x9c, 0x05, 0xe3, 0xc3, 0x40, 0x70, 0xad, 0x58, 0x96, 0xf8, 0xb9,
	0xe0, 0x8a, 0xe3, 0x4f, 0xa7, 0x71, 0xbf, 0x20, 0x7c, 0xc6, 0xbb, 0x9d, 0x84, 0x27, 0xdc, 0x44,
	0x83, 0xe2, 0x9f, 0x15, 0x76, 0x77, 0x13, 0xce, 0x93, 0x14, 0x02, 0xb3, 0xba, 0xd1, 0x83, 0xa0,
	0xaf, 0x05, 0x55, 0x8c, 0x67, 0x2e, 0x7e, 0xb4, 0xca, 0xde, 0x12, 0x52, 0x88, 0x15, 0x17, 0x8e,
	0x39, 0x59, 0xc2, 0x18, 0x79, 0x2e, 0xf8, 0xaf, 0x10, 0x2b, 0x19, 0x54, 0xe1, 0x5c, 0xf0, 0x37,
	0x13, 0x47, 0x06, 0x4c, 0x2a, 0xc6, 0x83, 0x0c, 0xd4, 0xef, 0x5c, 0xdc, 0xb2, 0x2c, 0x09, 0xc6,
	0x87, 0x34, 0xcd, 0x87, 0xf4, 0x38, 0x18, 0x33, 0xa1, 0x34, 0x4d, 0x23, 0x09, 0x62, 0xcc, 0x62,
	0x70, 0xc0, 0xd2, 0xa3, 0x29, 0x7e, 0x6f, 0x99, 0x2a, 0x37, 0x18, 0x81, 0xa2, 0x7d, 0xaa, 0x68,
	0xb9, 0xc7, 0x0a, 0x88, 0x54, 0x54, 0x69, 0xe9, 0x80, 0xaf, 0x56, 0x00, 0x04, 0x0c, 0xee, 0xe1,
	0xa8, 0x5c, 0x5b, 0xa4, 0xf7, 0x5f, 0x1d, 0xb5, 0x88, 0x2d, 0x1f, 0xd1, 0x29, 0xe0, 0x23, 0xb4,
	0x61, 0x0d, 0x78, 0xfd, 0xbd, 0xb5, 0xfd, 0xd6, 0x51, 0xc7, 0x8f, 0xb9, 0x80, 0xb2, 0x90, 0xfe,
	0x95, 0x89, 0x9d, 0x35, 0xfe, 0xfe, 0xe7, 0xb3, 0x1a, 0x71, 0x4a, 0x7c, 0x82, 0x1e, 0x95, 0xef,
	0xe9, 0x81, 0xa1, 0x76, 0x66, 0xa9, 0x0b, 0x17, 0x75, 0xdc, 0x54, 0x8d, 0x4f, 0x51, 0x4b, 0x51,
	0x91, 0x80, 0x8a, 0x46, 0x20, 0x87, 0xde, 0x9a, 0x81, 0x9f, 0xcd, 0xc2, 0x04, 0x24, 0xd7, 0x22,
	0x06, 0x02, 0x03, 0x82, 0xac, 0xfa, 0x02, 0xe4, 0x10, 0xbf, 0x42, 0x6d, 0x1b, 0x88, 0xca, 0x16,
	0xf0, 0xd6, 0x0d, 0xbf, 0xeb, 0x2f, 0x34, 0xa0, 0x7f, 0xc9, 0xfb, 0x57, 0x4e, 0x45, 0xb6, 0x2c,
	0x56, 0xae, 0xf1, 0x4f, 0xa8, 0xd3, 0x07, 0xa9, 0x58, 0x66, 0x7a, 0xef, 0x2e, 0x5b, 0x7d, 0xa5,
	0x6c, 0x4f, 0x2a, 0xec, 0x34, 0xe5, 0x0b, 0xd4, 0x26, 0xf0, 0x9b, 0x06, 0xa9, 0x2e, 0xa8, 0x8a,
	0x87, 0x20, 0xa4, 0xd7, 0xd8, 0xab, 0xef, 0xb7, 0x8e, 0xb6, 0xfd, 0x99, 0x44, 0x2e, 0x4a, 0xe6,
	0xd5, 0xf8, 0x39, 0x6a, 0xc8, 0x1c, 0x62, 0xef, 0x81, 0xf1, 0xd0, 0x5b, 0xe2, 0xa1, 0x52, 0xb4,
	0xab, 0x1c, 0x62, 0x62, 0xf4, 0xa7, 0xdd, 0xb7, 0xef, 0x1a, 0x0d, 0xb4, 0x2e, 0xc4, 0xdb, 0x77,
	0x8d, 0x2d, 0xbc, 0xe9, 0x06, 0x53, 0xe8, 0x14, 0x64, 0xef, 0xaf, 0x06, 0x6a, 0xcf, 0x51, 0xf8,
	0x47, 0xf4, 0x58, 0x09, 0x3a, 0x18, 0xb0, 0x38, 0x92, 0x43, 0x36, 0x28, 0x62, 0xae, 0x0a, 0xcb,
	0xf6, 0xbc, 0xb6, 0xd2, 0x2b, 0xa7, 0x0c, 0x6b, 0xa4, 0xad, 0x66, 0x1f, 0xe1, 0xd7, 0xa8, 0x3d,
	0xa0, 0x3a, 0x55, 0x11, 0xcb, 0x8a, 0x71, 0x63, 0x3c, 0x73, 0x55, 0x39, 0xf0, 0xcd, 0x7c, 0xf9,
	0x77, 0xf3, 0xe5, 0x97, 0xf3, 0xe5, 0x87, 0xd7, 0xd7, 0x97, 0xdf, 0x17, 0xd4, 0x0f, 0x25, 0x14,
	0xd6, 0xc8, 0xd6, 0x60, 0xe6, 0x09, 0x3e, 0x47, 0x6d, 0x61, 0x4f, 0x29, 0x52, 0x6c, 0x04, 0x5c,
	0x2b, 0xef, 0xa1, 0xeb, 0x17, 0x7b, 0x8f, 0xf8, 0xe5, 0x3d, 0xe2, 0x9f, 0xbb, 0x7b, 0xa4, 0xc8,
	0xe2, 0x98, 0x6b, 0x8b, 0xe0, 0x97, 0xe8, 0xa1, 0x00, 0x25, 0x18, 0x48, 0xef, 0x91, 0xa1, 0x3f,
	0xff, 0x88, 0x2f, 0x02, 0x4a, 0x4c, 0xc2, 0x1a, 0x29, 0x31, 0x1c, 0xa2, 0x56, 0xcc, 0x85, 0x8c,
	0x72, 0x9e, 0xb2, 0x78, 0xe2, 0x21, 0x93, 0xe5, 0x8b, 0x0f, 0x64, 0xf9, 0x96, 0x0b, 0x79, 0x69,
	0xc4, 0x61, 0x8d, 0xa0, 0x78, 0xba, 0xc2, 0xc7, 0x68, 0x63, 0xc4, 0x84, 0xe0, 0xc2, 0x6b, 0x96,
	0x2f, 0x52, 0x3d, 0xed, 0xf3, 0xbb, 0xc6, 0x0a, 0x6b, 0xc4, 0x49, 0xf1, 0x6b, 0xf4, 0x64, 0x08,
	0xb4, 0x0f, 0x22, 0x1a, 0xd1, 0x8c, 0xe5, 0x3a, 0x35, 0x02, 0x6f, 0xd3, 0xd9, 0x58, 0x2c, 0x5a,
	0x68, 0xd4, 0x17, 0x15, 0x71, 0x58, 0x23, 0x78, 0xb8, 0xf0, 0xf4, 0xac, 0x85, 0x9a, 0x45, 0xa3,
	0x44, 0x6a, 0x92, 0x43, 0xef, 0x67, 0xd4, 0x9e, 0xab, 0x36, 0x3e, 0x43, 0x9b, 0x95, 0x5e, 0x97,
	0xae, 0x4f, 0x76, 0xe7, 0x3a, 0x5a, 0xa7, 0x8a, 0x55, 0x9c, 0x93, 0x19, 0xa6, 0xf7, 0x47, 0x03,
	0xe1, 0x45, 0x43, 0xf8, 0x39, 0x7a, 0x2a, 0x60, 0xc4, 0xc7, 0x10, 0x09, 0x90, 0x39, 0xcf, 0x24,
	0x44, 0xd6, 0xa0, 0xf4, 0x36, 0xf7, 0xea, 0xfb, 0x4d, 0xb2, 0x6d, 0xc3, 0xc4, 0x45, 0x6d, 0x0a,
	0x89, 0xdf, 0xa0, 0xa7, 0x34, 0xcf, 0x21, 0xeb, 0x2f, 0x72, 0x9f, 0x98, 0x79, 0x7b, 0xb9, 0xd2,
	0x81, 0xf8, 0xdf, 0x98, 0x24, 0x73, 0xd9, 0xbf, 0xcb, 0x94, 0x98, 0x90, 0x6d, 0xba, 0x2c, 0x86,
	0xbf, 0x46, 0x3b, 0x53, 0xc7, 0xb6, 0x29, 0xcb, 0x8d, 0xb7, 0x8c, 0xe1, 0x4e, 0x69, 0xd8, 0x04,
	0x4b, 0x4a, 0xa3, 0x9d, 0xa9, 0xdf, 0x59, 0xaa, 0x6d, 0xec, 0xbe, 0xb8, 0x9f, 0xdd, 0x6a, 0x6e,
	0xeb, 0xb6, 0x43, 0x97, 0x84, 0xba, 0x21, 0xea, 0xbe, 0xff, 0x0d, 0xf1, 0x63, 0x54, 0xbf, 0x85,
	0x89, 0x29, 0x67, 0x93, 0x14, 0x7f, 0x71, 0x07, 0x3d, 0x18, 0xd3, 0x54, 0x83, 0x19, 0xdd, 0x26,
	0xb1, 0x8b, 0xd3, 0xf5, 0x93, 0xb5, 0xee, 0x2b, 0xf4, 0xec, 0xbd, 0x9b, 0xdf, 0x27, 0xd1, 0xd9,
	0xc1, 0x9f, 0xff, 0xee, 0xae, 0xfd, 0xf2, 0xe5, 0x07, 0xbf, 0xf0, 0xf9, 0x6d, 0xe2, 0xbe, 0x5a,
	0x37, 0x1b, 0x66, 0xb6, 0x8f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x12, 0xb3, 0x8e, 0xef, 0x8f,
	0x08, 0x00, 0x00,
}

func (this *RoutingRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRule)
	if !ok {
		that2, ok := that.(RoutingRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.TargetMesh.Equal(that1.TargetMesh) {
		return false
	}
	if !this.SourceSelector.Equal(that1.SourceSelector) {
		return false
	}
	if !this.DestinationSelector.Equal(that1.DestinationSelector) {
		return false
	}
	if len(this.RequestMatchers) != len(that1.RequestMatchers) {
		return false
	}
	for i := range this.RequestMatchers {
		if !this.RequestMatchers[i].Equal(that1.RequestMatchers[i]) {
			return false
		}
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec)
	if !ok {
		that2, ok := that.(RoutingRuleSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleType == nil {
		if this.RuleType != nil {
			return false
		}
	} else if this.RuleType == nil {
		return false
	} else if !this.RuleType.Equal(that1.RuleType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_TrafficShifting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_TrafficShifting)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_TrafficShifting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TrafficShifting.Equal(that1.TrafficShifting) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_FaultInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_FaultInjection)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_FaultInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FaultInjection.Equal(that1.FaultInjection) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_RequestTimeout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_RequestTimeout)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_RequestTimeout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestTimeout.Equal(that1.RequestTimeout) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_Retries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_Retries)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_Retries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_CorsPolicy)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_Mirror) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_Mirror)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_Mirror)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	return true
}
func (this *RoutingRuleSpec_HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRuleSpec_HeaderManipulation)
	if !ok {
		that2, ok := that.(RoutingRuleSpec_HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	return true
}
func (this *TrafficShifting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficShifting)
	if !ok {
		that2, ok := that.(TrafficShifting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Destinations.Equal(that1.Destinations) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderManipulation)
	if !ok {
		that2, ok := that.(HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
