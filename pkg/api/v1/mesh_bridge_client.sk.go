// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type MeshBridgeWatcher interface {
	// watch namespace-scoped MeshBridges
	Watch(namespace string, opts clients.WatchOpts) (<-chan MeshBridgeList, <-chan error, error)
}

type MeshBridgeClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*MeshBridge, error)
	Write(resource *MeshBridge, opts clients.WriteOpts) (*MeshBridge, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (MeshBridgeList, error)
	MeshBridgeWatcher
}

type meshBridgeClient struct {
	rc clients.ResourceClient
}

func NewMeshBridgeClient(rcFactory factory.ResourceClientFactory) (MeshBridgeClient, error) {
	return NewMeshBridgeClientWithToken(rcFactory, "")
}

func NewMeshBridgeClientWithToken(rcFactory factory.ResourceClientFactory, token string) (MeshBridgeClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &MeshBridge{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base MeshBridge resource client")
	}
	return NewMeshBridgeClientWithBase(rc), nil
}

func NewMeshBridgeClientWithBase(rc clients.ResourceClient) MeshBridgeClient {
	return &meshBridgeClient{
		rc: rc,
	}
}

func (client *meshBridgeClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *meshBridgeClient) Register() error {
	return client.rc.Register()
}

func (client *meshBridgeClient) Read(namespace, name string, opts clients.ReadOpts) (*MeshBridge, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*MeshBridge), nil
}

func (client *meshBridgeClient) Write(meshBridge *MeshBridge, opts clients.WriteOpts) (*MeshBridge, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(meshBridge, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*MeshBridge), nil
}

func (client *meshBridgeClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *meshBridgeClient) List(namespace string, opts clients.ListOpts) (MeshBridgeList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToMeshBridge(resourceList), nil
}

func (client *meshBridgeClient) Watch(namespace string, opts clients.WatchOpts) (<-chan MeshBridgeList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	meshBridgesChan := make(chan MeshBridgeList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				meshBridgesChan <- convertToMeshBridge(resourceList)
			case <-opts.Ctx.Done():
				close(meshBridgesChan)
				return
			}
		}
	}()
	return meshBridgesChan, errs, nil
}

func convertToMeshBridge(resources resources.ResourceList) MeshBridgeList {
	var meshBridgeList MeshBridgeList
	for _, resource := range resources {
		meshBridgeList = append(meshBridgeList, resource.(*MeshBridge))
	}
	return meshBridgeList
}
