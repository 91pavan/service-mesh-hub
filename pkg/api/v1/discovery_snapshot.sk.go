// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"

	"github.com/solo-io/go-utils/errors"
	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type DiscoverySnapshot struct {
	Pods        github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList
	Upstreams   gloo_solo_io.UpstreamList
	Deployments github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.DeploymentList
	Tlssecrets  TlsSecretList
}

func (s DiscoverySnapshot) Clone() DiscoverySnapshot {
	return DiscoverySnapshot{
		Pods:        s.Pods.Clone(),
		Upstreams:   s.Upstreams.Clone(),
		Deployments: s.Deployments.Clone(),
		Tlssecrets:  s.Tlssecrets.Clone(),
	}
}

func (s DiscoverySnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashPods(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashUpstreams(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashDeployments(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashTlssecrets(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s DiscoverySnapshot) hashPods(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Pods.AsInterfaces()...)
}

func (s DiscoverySnapshot) hashUpstreams(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Upstreams.AsInterfaces()...)
}

func (s DiscoverySnapshot) hashDeployments(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Deployments.AsInterfaces()...)
}

func (s DiscoverySnapshot) hashTlssecrets(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Tlssecrets.AsInterfaces()...)
}

func (s DiscoverySnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	PodsHash, err := s.hashPods(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("pods", PodsHash))
	UpstreamsHash, err := s.hashUpstreams(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("upstreams", UpstreamsHash))
	DeploymentsHash, err := s.hashDeployments(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("deployments", DeploymentsHash))
	TlssecretsHash, err := s.hashTlssecrets(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("tlssecrets", TlssecretsHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type DiscoverySnapshotStringer struct {
	Version     uint64
	Pods        []string
	Upstreams   []string
	Deployments []string
	Tlssecrets  []string
}

func (ss DiscoverySnapshotStringer) String() string {
	s := fmt.Sprintf("DiscoverySnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Pods %v\n", len(ss.Pods))
	for _, name := range ss.Pods {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Upstreams %v\n", len(ss.Upstreams))
	for _, name := range ss.Upstreams {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Deployments %v\n", len(ss.Deployments))
	for _, name := range ss.Deployments {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Tlssecrets %v\n", len(ss.Tlssecrets))
	for _, name := range ss.Tlssecrets {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s DiscoverySnapshot) Stringer() DiscoverySnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	return DiscoverySnapshotStringer{
		Version:     snapshotHash,
		Pods:        s.Pods.NamespacesDotNames(),
		Upstreams:   s.Upstreams.NamespacesDotNames(),
		Deployments: s.Deployments.NamespacesDotNames(),
		Tlssecrets:  s.Tlssecrets.NamespacesDotNames(),
	}
}
