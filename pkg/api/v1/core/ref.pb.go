// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/v1/core/ref.proto

package core

import (
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClusterResourceRef struct {
	Resource core.ResourceRef `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource"`
	Cluster  string           `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (m *ClusterResourceRef) Reset()         { *m = ClusterResourceRef{} }
func (m *ClusterResourceRef) String() string { return proto.CompactTextString(m) }
func (*ClusterResourceRef) ProtoMessage()    {}
func (*ClusterResourceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_8132c94bbd6b2eb2, []int{0}
}
func (m *ClusterResourceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterResourceRef.Unmarshal(m, b)
}
func (m *ClusterResourceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterResourceRef.Marshal(b, m, deterministic)
}
func (m *ClusterResourceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterResourceRef.Merge(m, src)
}
func (m *ClusterResourceRef) XXX_Size() int {
	return xxx_messageInfo_ClusterResourceRef.Size(m)
}
func (m *ClusterResourceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterResourceRef.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterResourceRef proto.InternalMessageInfo

func (m *ClusterResourceRef) GetResource() core.ResourceRef {
	if m != nil {
		return m.Resource
	}
	return core.ResourceRef{}
}

func (m *ClusterResourceRef) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterResourceRef)(nil), "core.zephyr.solo.io.ClusterResourceRef")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/v1/core/ref.proto", fileDescriptor_8132c94bbd6b2eb2)
}

var fileDescriptor_8132c94bbd6b2eb2 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0xce, 0xcf, 0xc9, 0xd7, 0xcd, 0xcc, 0xd7, 0xcf,
	0x4d, 0x2d, 0xce, 0xd0, 0x2d, 0x28, 0xca, 0xcf, 0x4a, 0x4d, 0x2e, 0x29, 0xd6, 0x4f, 0x2c, 0xc8,
	0xd4, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x4a, 0x4d, 0xd3, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x06, 0xf1, 0xf5, 0xaa, 0x52, 0x0b, 0x32, 0x2a, 0x8b, 0xf4, 0x40, 0x1a,
	0xf5, 0x32, 0xf3, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xf2, 0xfa, 0x20, 0x16, 0x44, 0xa9,
	0x94, 0x50, 0x6a, 0x45, 0x09, 0x44, 0x30, 0xb5, 0xa2, 0x04, 0x2a, 0x26, 0x09, 0xb6, 0x2b, 0x3b,
	0xb3, 0x04, 0x66, 0x3c, 0xdc, 0x64, 0xa5, 0x4a, 0x2e, 0x21, 0xe7, 0x9c, 0xd2, 0xe2, 0x92, 0xd4,
	0xa2, 0xa0, 0xd4, 0xe2, 0xfc, 0xd2, 0xa2, 0xe4, 0xd4, 0xa0, 0xd4, 0x34, 0x21, 0x6b, 0x2e, 0x8e,
	0x22, 0x28, 0x57, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x52, 0x0f, 0xec, 0x04, 0xa8, 0xdd,
	0x7a, 0x48, 0x8a, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0x82, 0x6b, 0x10, 0x92, 0xe0, 0x62,
	0x4f, 0x86, 0x18, 0x29, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x5a, 0xf1, 0x5c, 0x58,
	0x28, 0xcf, 0x30, 0x61, 0x91, 0x3c, 0xc3, 0x8c, 0x45, 0xf2, 0x0c, 0x4e, 0x56, 0x3b, 0xbe, 0xb2,
	0x30, 0xae, 0x78, 0x24, 0xc7, 0x18, 0x65, 0x40, 0x30, 0x58, 0x0a, 0xb2, 0xd3, 0x91, 0x83, 0x26,
	0x89, 0x0d, 0xec, 0x7a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x74, 0xe9, 0x40, 0x51,
	0x01, 0x00, 0x00,
}

func (this *ClusterResourceRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterResourceRef)
	if !ok {
		that2, ok := that.(ClusterResourceRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resource.Equal(&that1.Resource) {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	return true
}
