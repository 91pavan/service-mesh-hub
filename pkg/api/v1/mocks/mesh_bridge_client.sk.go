// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/mesh_bridge_client.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/mesh-projects/pkg/api/v1"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
)

// MockMeshBridgeWatcher is a mock of MeshBridgeWatcher interface
type MockMeshBridgeWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMeshBridgeWatcherMockRecorder
}

// MockMeshBridgeWatcherMockRecorder is the mock recorder for MockMeshBridgeWatcher
type MockMeshBridgeWatcherMockRecorder struct {
	mock *MockMeshBridgeWatcher
}

// NewMockMeshBridgeWatcher creates a new mock instance
func NewMockMeshBridgeWatcher(ctrl *gomock.Controller) *MockMeshBridgeWatcher {
	mock := &MockMeshBridgeWatcher{ctrl: ctrl}
	mock.recorder = &MockMeshBridgeWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshBridgeWatcher) EXPECT() *MockMeshBridgeWatcherMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockMeshBridgeWatcher) Watch(namespace string, opts clients.WatchOpts) (<-chan v1.MeshBridgeList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", namespace, opts)
	ret0, _ := ret[0].(<-chan v1.MeshBridgeList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockMeshBridgeWatcherMockRecorder) Watch(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMeshBridgeWatcher)(nil).Watch), namespace, opts)
}

// MockMeshBridgeClient is a mock of MeshBridgeClient interface
type MockMeshBridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshBridgeClientMockRecorder
}

// MockMeshBridgeClientMockRecorder is the mock recorder for MockMeshBridgeClient
type MockMeshBridgeClientMockRecorder struct {
	mock *MockMeshBridgeClient
}

// NewMockMeshBridgeClient creates a new mock instance
func NewMockMeshBridgeClient(ctrl *gomock.Controller) *MockMeshBridgeClient {
	mock := &MockMeshBridgeClient{ctrl: ctrl}
	mock.recorder = &MockMeshBridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshBridgeClient) EXPECT() *MockMeshBridgeClientMockRecorder {
	return m.recorder
}

// BaseClient mocks base method
func (m *MockMeshBridgeClient) BaseClient() clients.ResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseClient")
	ret0, _ := ret[0].(clients.ResourceClient)
	return ret0
}

// BaseClient indicates an expected call of BaseClient
func (mr *MockMeshBridgeClientMockRecorder) BaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseClient", reflect.TypeOf((*MockMeshBridgeClient)(nil).BaseClient))
}

// Register mocks base method
func (m *MockMeshBridgeClient) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockMeshBridgeClientMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMeshBridgeClient)(nil).Register))
}

// Read mocks base method
func (m *MockMeshBridgeClient) Read(namespace, name string, opts clients.ReadOpts) (*v1.MeshBridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", namespace, name, opts)
	ret0, _ := ret[0].(*v1.MeshBridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockMeshBridgeClientMockRecorder) Read(namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMeshBridgeClient)(nil).Read), namespace, name, opts)
}

// Write mocks base method
func (m *MockMeshBridgeClient) Write(resource *v1.MeshBridge, opts clients.WriteOpts) (*v1.MeshBridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", resource, opts)
	ret0, _ := ret[0].(*v1.MeshBridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockMeshBridgeClientMockRecorder) Write(resource, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMeshBridgeClient)(nil).Write), resource, opts)
}

// Delete mocks base method
func (m *MockMeshBridgeClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMeshBridgeClientMockRecorder) Delete(namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMeshBridgeClient)(nil).Delete), namespace, name, opts)
}

// List mocks base method
func (m *MockMeshBridgeClient) List(namespace string, opts clients.ListOpts) (v1.MeshBridgeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace, opts)
	ret0, _ := ret[0].(v1.MeshBridgeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMeshBridgeClientMockRecorder) List(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMeshBridgeClient)(nil).List), namespace, opts)
}

// Watch mocks base method
func (m *MockMeshBridgeClient) Watch(namespace string, opts clients.WatchOpts) (<-chan v1.MeshBridgeList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", namespace, opts)
	ret0, _ := ret[0].(<-chan v1.MeshBridgeList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockMeshBridgeClientMockRecorder) Watch(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMeshBridgeClient)(nil).Watch), namespace, opts)
}
