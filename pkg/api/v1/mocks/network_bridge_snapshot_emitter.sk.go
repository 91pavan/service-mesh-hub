// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/network_bridge_snapshot_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/mesh-projects/pkg/api/v1"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
)

// MockNetworkBridgeSnapshotEmitter is a mock of NetworkBridgeSnapshotEmitter interface
type MockNetworkBridgeSnapshotEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkBridgeSnapshotEmitterMockRecorder
}

// MockNetworkBridgeSnapshotEmitterMockRecorder is the mock recorder for MockNetworkBridgeSnapshotEmitter
type MockNetworkBridgeSnapshotEmitterMockRecorder struct {
	mock *MockNetworkBridgeSnapshotEmitter
}

// NewMockNetworkBridgeSnapshotEmitter creates a new mock instance
func NewMockNetworkBridgeSnapshotEmitter(ctrl *gomock.Controller) *MockNetworkBridgeSnapshotEmitter {
	mock := &MockNetworkBridgeSnapshotEmitter{ctrl: ctrl}
	mock.recorder = &MockNetworkBridgeSnapshotEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkBridgeSnapshotEmitter) EXPECT() *MockNetworkBridgeSnapshotEmitterMockRecorder {
	return m.recorder
}

// Snapshots mocks base method
func (m *MockNetworkBridgeSnapshotEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *v1.NetworkBridgeSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v1.NetworkBridgeSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockNetworkBridgeSnapshotEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockNetworkBridgeSnapshotEmitter)(nil).Snapshots), watchNamespaces, opts)
}

// MockNetworkBridgeEmitter is a mock of NetworkBridgeEmitter interface
type MockNetworkBridgeEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkBridgeEmitterMockRecorder
}

// MockNetworkBridgeEmitterMockRecorder is the mock recorder for MockNetworkBridgeEmitter
type MockNetworkBridgeEmitterMockRecorder struct {
	mock *MockNetworkBridgeEmitter
}

// NewMockNetworkBridgeEmitter creates a new mock instance
func NewMockNetworkBridgeEmitter(ctrl *gomock.Controller) *MockNetworkBridgeEmitter {
	mock := &MockNetworkBridgeEmitter{ctrl: ctrl}
	mock.recorder = &MockNetworkBridgeEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkBridgeEmitter) EXPECT() *MockNetworkBridgeEmitterMockRecorder {
	return m.recorder
}

// Snapshots mocks base method
func (m *MockNetworkBridgeEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *v1.NetworkBridgeSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v1.NetworkBridgeSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockNetworkBridgeEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockNetworkBridgeEmitter)(nil).Snapshots), watchNamespaces, opts)
}

// Register mocks base method
func (m *MockNetworkBridgeEmitter) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockNetworkBridgeEmitterMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNetworkBridgeEmitter)(nil).Register))
}

// MeshBridge mocks base method
func (m *MockNetworkBridgeEmitter) MeshBridge() v1.MeshBridgeClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshBridge")
	ret0, _ := ret[0].(v1.MeshBridgeClient)
	return ret0
}

// MeshBridge indicates an expected call of MeshBridge
func (mr *MockNetworkBridgeEmitterMockRecorder) MeshBridge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshBridge", reflect.TypeOf((*MockNetworkBridgeEmitter)(nil).MeshBridge))
}
