// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	"github.com/solo-io/go-utils/errors"
	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type RbacSnapshot struct {
	Meshes MeshList
}

func (s RbacSnapshot) Clone() RbacSnapshot {
	return RbacSnapshot{
		Meshes: s.Meshes.Clone(),
	}
}

func (s RbacSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashMeshes(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s RbacSnapshot) hashMeshes(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Meshes.AsInterfaces()...)
}

func (s RbacSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	MeshesHash, err := s.hashMeshes(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("meshes", MeshesHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type RbacSnapshotStringer struct {
	Version uint64
	Meshes  []string
}

func (ss RbacSnapshotStringer) String() string {
	s := fmt.Sprintf("RbacSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Meshes %v\n", len(ss.Meshes))
	for _, name := range ss.Meshes {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s RbacSnapshot) Stringer() RbacSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(errors.Wrapf(err, "error hashing, this should never happen"))
	}
	return RbacSnapshotStringer{
		Version: snapshotHash,
		Meshes:  s.Meshes.NamespacesDotNames(),
	}
}
