// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/v1/cluster-route.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core1 "github.com/solo-io/mesh-projects/pkg/api/v1/core"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MeshBridge struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
	// Source mesh from which to create the bridge
	SourceMesh *core1.ClusterResourceRef `protobuf:"bytes,3,opt,name=source_mesh,json=sourceMesh,proto3" json:"source_mesh,omitempty"`
	// Target mesh to which the bridge will be pointing
	TargetMesh *core1.ClusterResourceRef `protobuf:"bytes,4,opt,name=target_mesh,json=targetMesh,proto3" json:"target_mesh,omitempty"`
	// Namespace in which to find gloo in the target mesh cluster
	GlooNamespace string `protobuf:"bytes,5,opt,name=gloo_namespace,json=glooNamespace,proto3" json:"gloo_namespace,omitempty"`
	//
	//Source service which will be using the bridge.
	//Currently a string as it assumes that the service which will need
	//this bridge is located in the same namespace as the bridge object.
	Source string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	//
	//Target service in a different mesh to which this bridge will allow
	//traffic from the source service.
	//
	//This source pointer is important as the name of this service
	//(e.g. `gloo.gloo-system.svc.cluster.local`) is translated into
	//`gloo.gloo-system.global`. Which allows is to be routed to and
	//understood by istio as being in a foreign cluster, or other
	//non-local space.
	Target               *core1.ClusterResourceRef `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MeshBridge) Reset()         { *m = MeshBridge{} }
func (m *MeshBridge) String() string { return proto.CompactTextString(m) }
func (*MeshBridge) ProtoMessage()    {}
func (*MeshBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_16671c1c9aa51037, []int{0}
}
func (m *MeshBridge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshBridge.Unmarshal(m, b)
}
func (m *MeshBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshBridge.Marshal(b, m, deterministic)
}
func (m *MeshBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshBridge.Merge(m, src)
}
func (m *MeshBridge) XXX_Size() int {
	return xxx_messageInfo_MeshBridge.Size(m)
}
func (m *MeshBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MeshBridge proto.InternalMessageInfo

func (m *MeshBridge) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *MeshBridge) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *MeshBridge) GetSourceMesh() *core1.ClusterResourceRef {
	if m != nil {
		return m.SourceMesh
	}
	return nil
}

func (m *MeshBridge) GetTargetMesh() *core1.ClusterResourceRef {
	if m != nil {
		return m.TargetMesh
	}
	return nil
}

func (m *MeshBridge) GetGlooNamespace() string {
	if m != nil {
		return m.GlooNamespace
	}
	return ""
}

func (m *MeshBridge) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MeshBridge) GetTarget() *core1.ClusterResourceRef {
	if m != nil {
		return m.Target
	}
	return nil
}

func init() {
	proto.RegisterType((*MeshBridge)(nil), "zephyr.solo.io.MeshBridge")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/v1/cluster-route.proto", fileDescriptor_16671c1c9aa51037)
}

var fileDescriptor_16671c1c9aa51037 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0xcd, 0xbd, 0x31, 0xea, 0x5c, 0x2d, 0x18, 0x2e, 0x25, 0x76, 0x61, 0x4b, 0x41, 0x2c,
	0x68, 0x13, 0xaa, 0x20, 0x52, 0x17, 0x42, 0x5c, 0xe8, 0xa6, 0x2e, 0xe2, 0xce, 0x4d, 0x99, 0xa4,
	0x27, 0x93, 0xb1, 0x4d, 0x4f, 0x98, 0x99, 0x08, 0xba, 0xec, 0xd3, 0xf8, 0x16, 0x6e, 0x7d, 0x8a,
	0x2e, 0x7c, 0x83, 0xfa, 0x04, 0x32, 0x7f, 0xa2, 0x14, 0x04, 0xdb, 0x55, 0x66, 0xe6, 0x9c, 0xdf,
	0x37, 0xdf, 0x9c, 0x2f, 0xe4, 0x15, 0xe3, 0xaa, 0x6a, 0xf3, 0xb8, 0xc0, 0x3a, 0x91, 0xb8, 0xc1,
	0x29, 0xc7, 0xa4, 0x06, 0x59, 0x4d, 0x1b, 0x81, 0x9f, 0xa0, 0x50, 0x32, 0xa1, 0x0d, 0x4f, 0x3e,
	0xcf, 0x92, 0x62, 0xd3, 0x4a, 0x05, 0x62, 0x2a, 0xb0, 0x55, 0x10, 0x37, 0x02, 0x15, 0x86, 0xbd,
	0xaf, 0xd0, 0x54, 0x5f, 0x44, 0xac, 0xc1, 0x98, 0xe3, 0xe0, 0x9a, 0x21, 0x43, 0x53, 0x4a, 0xf4,
	0xca, 0x76, 0x0d, 0x66, 0xff, 0xb8, 0xc2, 0x7c, 0xd7, 0x5c, 0x75, 0xea, 0xdd, 0xde, 0x21, 0x4f,
	0x4f, 0x40, 0x04, 0x94, 0xae, 0x3b, 0x39, 0xe5, 0x02, 0x45, 0x55, 0x2b, 0xcf, 0x70, 0x54, 0x83,
	0xa2, 0x2b, 0xaa, 0xa8, 0x43, 0x5e, 0x9c, 0x3c, 0x27, 0x14, 0xf0, 0xd7, 0xdb, 0xf8, 0xfb, 0x25,
	0x21, 0x0b, 0x90, 0x55, 0x2a, 0xf8, 0x8a, 0x41, 0xf8, 0x96, 0x04, 0xd6, 0x49, 0xe4, 0x8d, 0xbc,
	0xc9, 0xd5, 0xb3, 0xeb, 0x58, 0xf7, 0x77, 0x03, 0x8c, 0x3f, 0x98, 0x5a, 0xfa, 0xe0, 0xc7, 0x7e,
	0x78, 0xe3, 0xd7, 0x7e, 0x78, 0x5f, 0x81, 0x54, 0x2b, 0x5e, 0x96, 0xf3, 0x31, 0x67, 0x5b, 0x14,
	0x30, 0xce, 0x1c, 0x1e, 0xbe, 0x24, 0xb7, 0x3b, 0x87, 0xd1, 0x85, 0x91, 0xea, 0x1f, 0x4b, 0x2d,
	0x5c, 0x35, 0xf5, 0xb5, 0x58, 0xf6, 0xa7, 0x3b, 0x7c, 0x47, 0xae, 0x24, 0xb6, 0xa2, 0x80, 0xa5,
	0xf6, 0x1f, 0x5d, 0x1a, 0xf8, 0xb1, 0x85, 0x8f, 0xf3, 0x8c, 0xdf, 0xd8, 0xcc, 0x33, 0xb0, 0x40,
	0x06, 0x65, 0x46, 0xec, 0x52, 0x3f, 0x49, 0x2b, 0x29, 0x2a, 0x18, 0x28, 0xab, 0xe4, 0x9f, 0xa9,
	0x64, 0x59, 0xa3, 0xf4, 0x88, 0xf4, 0xd8, 0x06, 0x71, 0xb9, 0xa5, 0x35, 0xc8, 0x86, 0x16, 0x10,
	0xdd, 0x1c, 0x79, 0x93, 0x3b, 0xd9, 0x3d, 0x7d, 0xfa, 0xbe, 0x3b, 0x0c, 0xfb, 0x24, 0xb0, 0x7c,
	0x14, 0x98, 0xb2, 0xdb, 0x85, 0xaf, 0x49, 0x60, 0xc5, 0xa2, 0x5b, 0xe7, 0x79, 0x70, 0xd8, 0x7c,
	0xb0, 0x3b, 0xf8, 0x3e, 0xb9, 0xa8, 0xf3, 0xdd, 0xc1, 0xef, 0x85, 0x77, 0xf5, 0x73, 0x96, 0xb9,
	0x49, 0x4c, 0xa6, 0xb3, 0x6f, 0x3f, 0x1f, 0x7a, 0x1f, 0x9f, 0xfc, 0x37, 0xff, 0x66, 0xcd, 0xdc,
	0x3f, 0x90, 0x07, 0x26, 0xfb, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xbc, 0xe1, 0x78,
	0x5d, 0x03, 0x00, 0x00,
}

func (this *MeshBridge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshBridge)
	if !ok {
		that2, ok := that.(MeshBridge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.SourceMesh.Equal(that1.SourceMesh) {
		return false
	}
	if !this.TargetMesh.Equal(that1.TargetMesh) {
		return false
	}
	if this.GlooNamespace != that1.GlooNamespace {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
