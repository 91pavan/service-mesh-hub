// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type NetworkBridgeSnapshot struct {
	MeshBridges   MeshBridgeList
	Meshes        MeshList
	MeshIngresses MeshIngressList
}

func (s NetworkBridgeSnapshot) Clone() NetworkBridgeSnapshot {
	return NetworkBridgeSnapshot{
		MeshBridges:   s.MeshBridges.Clone(),
		Meshes:        s.Meshes.Clone(),
		MeshIngresses: s.MeshIngresses.Clone(),
	}
}

func (s NetworkBridgeSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashMeshBridges(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashMeshes(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashMeshIngresses(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s NetworkBridgeSnapshot) hashMeshBridges(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.MeshBridges.AsInterfaces()...)
}

func (s NetworkBridgeSnapshot) hashMeshes(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Meshes.AsInterfaces()...)
}

func (s NetworkBridgeSnapshot) hashMeshIngresses(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.MeshIngresses.AsInterfaces()...)
}

func (s NetworkBridgeSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	MeshBridgesHash, err := s.hashMeshBridges(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("meshBridges", MeshBridgesHash))
	MeshesHash, err := s.hashMeshes(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("meshes", MeshesHash))
	MeshIngressesHash, err := s.hashMeshIngresses(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("meshIngresses", MeshIngressesHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type NetworkBridgeSnapshotStringer struct {
	Version       uint64
	MeshBridges   []string
	Meshes        []string
	MeshIngresses []string
}

func (ss NetworkBridgeSnapshotStringer) String() string {
	s := fmt.Sprintf("NetworkBridgeSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  MeshBridges %v\n", len(ss.MeshBridges))
	for _, name := range ss.MeshBridges {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Meshes %v\n", len(ss.Meshes))
	for _, name := range ss.Meshes {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  MeshIngresses %v\n", len(ss.MeshIngresses))
	for _, name := range ss.MeshIngresses {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s NetworkBridgeSnapshot) Stringer() NetworkBridgeSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return NetworkBridgeSnapshotStringer{
		Version:       snapshotHash,
		MeshBridges:   s.MeshBridges.NamespacesDotNames(),
		Meshes:        s.Meshes.NamespacesDotNames(),
		MeshIngresses: s.MeshIngresses.NamespacesDotNames(),
	}
}
