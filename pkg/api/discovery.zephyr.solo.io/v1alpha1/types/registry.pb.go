// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/discovery/v1alpha1/registry.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//The MeshService is an abstraction for a service which we have discovered to be, or are told, is part of a
//given mesh. The Mesh object has references to the MeshServices which belong to it.
type MeshServiceSpec struct {
	KubeService *KubeService `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3" json:"kube_service,omitempty"`
	// The mesh with which this service is associated
	Mesh                 *types.ResourceRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Federation           *Federation        `protobuf:"bytes,3,opt,name=federation,proto3" json:"federation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MeshServiceSpec) Reset()         { *m = MeshServiceSpec{} }
func (m *MeshServiceSpec) String() string { return proto.CompactTextString(m) }
func (*MeshServiceSpec) ProtoMessage()    {}
func (*MeshServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{0}
}
func (m *MeshServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshServiceSpec.Unmarshal(m, b)
}
func (m *MeshServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshServiceSpec.Marshal(b, m, deterministic)
}
func (m *MeshServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshServiceSpec.Merge(m, src)
}
func (m *MeshServiceSpec) XXX_Size() int {
	return xxx_messageInfo_MeshServiceSpec.Size(m)
}
func (m *MeshServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeshServiceSpec proto.InternalMessageInfo

func (m *MeshServiceSpec) GetKubeService() *KubeService {
	if m != nil {
		return m.KubeService
	}
	return nil
}

func (m *MeshServiceSpec) GetMesh() *types.ResourceRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *MeshServiceSpec) GetFederation() *Federation {
	if m != nil {
		return m.Federation
	}
	return nil
}

type Federation struct {
	MulticlusterDnsName  string               `protobuf:"bytes,1,opt,name=multicluster_dns_name,json=multiclusterDnsName,proto3" json:"multicluster_dns_name,omitempty"`
	DestinationMeshes    []*types.ResourceRef `protobuf:"bytes,2,rep,name=destination_meshes,json=destinationMeshes,proto3" json:"destination_meshes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Federation) Reset()         { *m = Federation{} }
func (m *Federation) String() string { return proto.CompactTextString(m) }
func (*Federation) ProtoMessage()    {}
func (*Federation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{1}
}
func (m *Federation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Federation.Unmarshal(m, b)
}
func (m *Federation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Federation.Marshal(b, m, deterministic)
}
func (m *Federation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Federation.Merge(m, src)
}
func (m *Federation) XXX_Size() int {
	return xxx_messageInfo_Federation.Size(m)
}
func (m *Federation) XXX_DiscardUnknown() {
	xxx_messageInfo_Federation.DiscardUnknown(m)
}

var xxx_messageInfo_Federation proto.InternalMessageInfo

func (m *Federation) GetMulticlusterDnsName() string {
	if m != nil {
		return m.MulticlusterDnsName
	}
	return ""
}

func (m *Federation) GetDestinationMeshes() []*types.ResourceRef {
	if m != nil {
		return m.DestinationMeshes
	}
	return nil
}

type KubeService struct {
	Ref                  *types.ResourceRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	SelectorLabels       map[string]string  `protobuf:"bytes,2,rep,name=selector_labels,json=selectorLabels,proto3" json:"selector_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *KubeService) Reset()         { *m = KubeService{} }
func (m *KubeService) String() string { return proto.CompactTextString(m) }
func (*KubeService) ProtoMessage()    {}
func (*KubeService) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{2}
}
func (m *KubeService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubeService.Unmarshal(m, b)
}
func (m *KubeService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubeService.Marshal(b, m, deterministic)
}
func (m *KubeService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeService.Merge(m, src)
}
func (m *KubeService) XXX_Size() int {
	return xxx_messageInfo_KubeService.Size(m)
}
func (m *KubeService) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeService.DiscardUnknown(m)
}

var xxx_messageInfo_KubeService proto.InternalMessageInfo

func (m *KubeService) GetRef() *types.ResourceRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *KubeService) GetSelectorLabels() map[string]string {
	if m != nil {
		return m.SelectorLabels
	}
	return nil
}

type MeshServiceStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshServiceStatus) Reset()         { *m = MeshServiceStatus{} }
func (m *MeshServiceStatus) String() string { return proto.CompactTextString(m) }
func (*MeshServiceStatus) ProtoMessage()    {}
func (*MeshServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{3}
}
func (m *MeshServiceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshServiceStatus.Unmarshal(m, b)
}
func (m *MeshServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshServiceStatus.Marshal(b, m, deterministic)
}
func (m *MeshServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshServiceStatus.Merge(m, src)
}
func (m *MeshServiceStatus) XXX_Size() int {
	return xxx_messageInfo_MeshServiceStatus.Size(m)
}
func (m *MeshServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeshServiceStatus proto.InternalMessageInfo

//
//The MeshWorkload is an abstraction for a workload/client which we have discovered to be, or are told, is part of a
//given mesh. The Mesh object has references to the MeshWorkloads which belong to it.
type MeshWorkloadSpec struct {
	//
	//Resource ref to the underlying kubernetes controller which is managing the pods associated with the workloads.
	//It has the generic name kube_controller as it can represent either a deployment or a daemonset. Or potentially
	//any other kubernetes object which creates injected pods.
	//
	//The type is specified on the ResourceRef.APIGroup and ResourceRef.Kind fields
	KubeControllerRef *types.ResourceRef `protobuf:"bytes,1,opt,name=kube_controller_ref,json=kubeControllerRef,proto3" json:"kube_controller_ref,omitempty"`
	KubePod           *KubePod           `protobuf:"bytes,3,opt,name=kube_pod,json=kubePod,proto3" json:"kube_pod,omitempty"`
	// The mesh with which this workload is associated
	Mesh                 *types.ResourceRef  `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	FederatedServices    []*FederatedService `protobuf:"bytes,4,rep,name=federated_services,json=federatedServices,proto3" json:"federated_services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MeshWorkloadSpec) Reset()         { *m = MeshWorkloadSpec{} }
func (m *MeshWorkloadSpec) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadSpec) ProtoMessage()    {}
func (*MeshWorkloadSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{4}
}
func (m *MeshWorkloadSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadSpec.Unmarshal(m, b)
}
func (m *MeshWorkloadSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadSpec.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadSpec.Merge(m, src)
}
func (m *MeshWorkloadSpec) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadSpec.Size(m)
}
func (m *MeshWorkloadSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadSpec proto.InternalMessageInfo

func (m *MeshWorkloadSpec) GetKubeControllerRef() *types.ResourceRef {
	if m != nil {
		return m.KubeControllerRef
	}
	return nil
}

func (m *MeshWorkloadSpec) GetKubePod() *KubePod {
	if m != nil {
		return m.KubePod
	}
	return nil
}

func (m *MeshWorkloadSpec) GetMesh() *types.ResourceRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *MeshWorkloadSpec) GetFederatedServices() []*FederatedService {
	if m != nil {
		return m.FederatedServices
	}
	return nil
}

type FederatedService struct {
	MulticlusterDnsName  string             `protobuf:"bytes,1,opt,name=multicluster_dns_name,json=multiclusterDnsName,proto3" json:"multicluster_dns_name,omitempty"`
	MeshServiceRef       *types.ResourceRef `protobuf:"bytes,2,opt,name=mesh_service_ref,json=meshServiceRef,proto3" json:"mesh_service_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FederatedService) Reset()         { *m = FederatedService{} }
func (m *FederatedService) String() string { return proto.CompactTextString(m) }
func (*FederatedService) ProtoMessage()    {}
func (*FederatedService) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{5}
}
func (m *FederatedService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedService.Unmarshal(m, b)
}
func (m *FederatedService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedService.Marshal(b, m, deterministic)
}
func (m *FederatedService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedService.Merge(m, src)
}
func (m *FederatedService) XXX_Size() int {
	return xxx_messageInfo_FederatedService.Size(m)
}
func (m *FederatedService) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedService.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedService proto.InternalMessageInfo

func (m *FederatedService) GetMulticlusterDnsName() string {
	if m != nil {
		return m.MulticlusterDnsName
	}
	return ""
}

func (m *FederatedService) GetMeshServiceRef() *types.ResourceRef {
	if m != nil {
		return m.MeshServiceRef
	}
	return nil
}

type KubePod struct {
	// these are the labels directly from the pods that this controller owns
	// NB: these are NEITHER the matchLabels nor the labels on the controller itself.
	// we need these to determine which services are backed by this workload, and
	// the service backing is determined by the pod labels
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceAccountName   string            `protobuf:"bytes,4,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KubePod) Reset()         { *m = KubePod{} }
func (m *KubePod) String() string { return proto.CompactTextString(m) }
func (*KubePod) ProtoMessage()    {}
func (*KubePod) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{6}
}
func (m *KubePod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubePod.Unmarshal(m, b)
}
func (m *KubePod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubePod.Marshal(b, m, deterministic)
}
func (m *KubePod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubePod.Merge(m, src)
}
func (m *KubePod) XXX_Size() int {
	return xxx_messageInfo_KubePod.Size(m)
}
func (m *KubePod) XXX_DiscardUnknown() {
	xxx_messageInfo_KubePod.DiscardUnknown(m)
}

var xxx_messageInfo_KubePod proto.InternalMessageInfo

func (m *KubePod) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *KubePod) GetServiceAccountName() string {
	if m != nil {
		return m.ServiceAccountName
	}
	return ""
}

type MeshWorkloadStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshWorkloadStatus) Reset()         { *m = MeshWorkloadStatus{} }
func (m *MeshWorkloadStatus) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadStatus) ProtoMessage()    {}
func (*MeshWorkloadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac550e3ffa031dc0, []int{7}
}
func (m *MeshWorkloadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadStatus.Unmarshal(m, b)
}
func (m *MeshWorkloadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadStatus.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadStatus.Merge(m, src)
}
func (m *MeshWorkloadStatus) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadStatus.Size(m)
}
func (m *MeshWorkloadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MeshServiceSpec)(nil), "discovery.zephyr.solo.io.MeshServiceSpec")
	proto.RegisterType((*Federation)(nil), "discovery.zephyr.solo.io.Federation")
	proto.RegisterType((*KubeService)(nil), "discovery.zephyr.solo.io.KubeService")
	proto.RegisterMapType((map[string]string)(nil), "discovery.zephyr.solo.io.KubeService.SelectorLabelsEntry")
	proto.RegisterType((*MeshServiceStatus)(nil), "discovery.zephyr.solo.io.MeshServiceStatus")
	proto.RegisterType((*MeshWorkloadSpec)(nil), "discovery.zephyr.solo.io.MeshWorkloadSpec")
	proto.RegisterType((*FederatedService)(nil), "discovery.zephyr.solo.io.FederatedService")
	proto.RegisterType((*KubePod)(nil), "discovery.zephyr.solo.io.KubePod")
	proto.RegisterMapType((map[string]string)(nil), "discovery.zephyr.solo.io.KubePod.LabelsEntry")
	proto.RegisterType((*MeshWorkloadStatus)(nil), "discovery.zephyr.solo.io.MeshWorkloadStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/discovery/v1alpha1/registry.proto", fileDescriptor_ac550e3ffa031dc0)
}

var fileDescriptor_ac550e3ffa031dc0 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x93, 0xd2, 0xd2, 0x09, 0x6a, 0x93, 0x4d, 0x90, 0xac, 0x1c, 0x50, 0xb1, 0x40, 0x02,
	0xa4, 0xda, 0xb4, 0x70, 0xa0, 0x88, 0x4b, 0xa1, 0xad, 0x10, 0x50, 0xa8, 0x5c, 0x09, 0x04, 0x17,
	0xcb, 0x5e, 0x8f, 0x13, 0xe3, 0x8f, 0xb5, 0x76, 0xd7, 0x91, 0xcc, 0xbf, 0x80, 0x5f, 0xc1, 0x9d,
	0x33, 0xbf, 0x83, 0x3b, 0x27, 0x7e, 0x06, 0xf2, 0xda, 0x69, 0xdc, 0x40, 0x49, 0xc9, 0x6d, 0x3d,
	0x3b, 0xef, 0x79, 0xde, 0xdb, 0xb7, 0x0b, 0x47, 0xa3, 0x50, 0x8e, 0x73, 0xcf, 0xa4, 0x2c, 0xb1,
	0x04, 0x8b, 0xd9, 0x76, 0xc8, 0xac, 0x04, 0xc5, 0x78, 0x3b, 0xe3, 0xec, 0x23, 0x52, 0x29, 0x2c,
	0x37, 0x0b, 0x2d, 0x3f, 0x14, 0x94, 0x4d, 0x90, 0x17, 0xd6, 0x64, 0xc7, 0x8d, 0xb3, 0xb1, 0xbb,
	0x63, 0x71, 0x1c, 0x85, 0x42, 0xf2, 0xc2, 0xcc, 0x38, 0x93, 0x8c, 0xe8, 0x67, 0x2d, 0xe6, 0x27,
	0xcc, 0xc6, 0x05, 0x37, 0x4b, 0x36, 0x33, 0x64, 0xc3, 0xbb, 0x7f, 0xd2, 0x51, 0xc6, 0xb1, 0xc9,
	0x14, 0x54, 0x24, 0xc3, 0xc1, 0x88, 0x8d, 0x98, 0x5a, 0x5a, 0xe5, 0xaa, 0xaa, 0x1a, 0x3f, 0x34,
	0xd8, 0x3c, 0x46, 0x31, 0x3e, 0x45, 0x3e, 0x09, 0x29, 0x9e, 0x66, 0x48, 0xc9, 0x73, 0xb8, 0x16,
	0xe5, 0x1e, 0x3a, 0xa2, 0xaa, 0xe9, 0xda, 0x96, 0x76, 0xa7, 0xb3, 0x7b, 0xdb, 0xbc, 0x68, 0x0a,
	0xf3, 0x65, 0xee, 0x61, 0x4d, 0x60, 0x77, 0xa2, 0xd9, 0x07, 0x79, 0x08, 0x2b, 0xe5, 0x80, 0x7a,
	0x4b, 0x31, 0x6c, 0x99, 0xe5, 0x6c, 0xf3, 0x60, 0x1b, 0x05, 0xcb, 0x39, 0x45, 0x1b, 0x03, 0x5b,
	0x75, 0x93, 0x03, 0x80, 0x00, 0x7d, 0xe4, 0xae, 0x0c, 0x59, 0xaa, 0xb7, 0x15, 0xf6, 0xd6, 0xc5,
	0x7f, 0x3f, 0x3a, 0xeb, 0xb5, 0x1b, 0x38, 0xe3, 0xb3, 0x06, 0x30, 0xdb, 0x22, 0xbb, 0x70, 0x3d,
	0xc9, 0x63, 0x19, 0xd2, 0x38, 0x17, 0x12, 0xb9, 0xe3, 0xa7, 0xc2, 0x49, 0xdd, 0xa4, 0x52, 0xb7,
	0x6e, 0xf7, 0x9b, 0x9b, 0x07, 0xa9, 0x78, 0xed, 0x26, 0x48, 0xde, 0x00, 0xf1, 0x51, 0xc8, 0x30,
	0x55, 0x14, 0x4e, 0x39, 0x1c, 0x0a, 0xbd, 0xb5, 0xd5, 0xbe, 0x94, 0x98, 0x5e, 0x03, 0x7b, 0xac,
	0xa0, 0xc6, 0x2f, 0x0d, 0x3a, 0x0d, 0xb3, 0xc8, 0x2e, 0xb4, 0x39, 0x06, 0xb5, 0xc1, 0x8b, 0x19,
	0xcb, 0x66, 0xe2, 0xc1, 0xa6, 0xc0, 0x18, 0xa9, 0x64, 0xdc, 0x89, 0x5d, 0x0f, 0xe3, 0xe9, 0x44,
	0x7b, 0x97, 0x3a, 0x20, 0xf3, 0xb4, 0x06, 0xbf, 0x52, 0xd8, 0xc3, 0x54, 0xf2, 0xc2, 0xde, 0x10,
	0xe7, 0x8a, 0xc3, 0x7d, 0xe8, 0xff, 0xa5, 0x8d, 0x74, 0xa1, 0x1d, 0x61, 0x51, 0x3b, 0x56, 0x2e,
	0xc9, 0x00, 0xae, 0x4c, 0xdc, 0x38, 0x47, 0x75, 0xc2, 0xeb, 0x76, 0xf5, 0xf1, 0xb8, 0xf5, 0x48,
	0x33, 0xfa, 0xd0, 0x6b, 0xe6, 0x4a, 0xba, 0x32, 0x17, 0xc6, 0xb7, 0x16, 0x74, 0xcb, 0xea, 0x3b,
	0xc6, 0xa3, 0x98, 0xb9, 0xbe, 0x8a, 0xdb, 0x09, 0xf4, 0x55, 0xdc, 0x28, 0x4b, 0x25, 0x67, 0x71,
	0x8c, 0xdc, 0xf9, 0x1f, 0x53, 0x7a, 0x25, 0xf8, 0xd9, 0x19, 0xd6, 0xc6, 0x80, 0x3c, 0x81, 0xab,
	0x8a, 0x31, 0x63, 0x7e, 0x1d, 0x9f, 0x9b, 0xff, 0xf6, 0xe6, 0x84, 0xf9, 0xf6, 0x5a, 0x54, 0x2d,
	0x96, 0x0c, 0xed, 0x7b, 0x20, 0x75, 0xf8, 0xd0, 0x9f, 0xde, 0x1c, 0xa1, 0xaf, 0xa8, 0x93, 0xb9,
	0xb7, 0x30, 0xbc, 0xe8, 0x4f, 0xef, 0x4f, 0x2f, 0x98, 0xab, 0x08, 0xe3, 0x8b, 0x06, 0xdd, 0xf9,
	0xbe, 0xa5, 0xf2, 0xfc, 0x02, 0xba, 0xe5, 0xac, 0xd3, 0xf1, 0x94, 0xcd, 0x97, 0x55, 0xb9, 0x91,
	0xcc, 0x4e, 0xd3, 0xc6, 0xc0, 0xf8, 0xae, 0xc1, 0x5a, 0x6d, 0x1d, 0x39, 0x84, 0xd5, 0x3a, 0x89,
	0x6d, 0xa5, 0x77, 0x7b, 0xa1, 0xdb, 0x66, 0x33, 0x7d, 0x35, 0x98, 0xdc, 0x87, 0xc1, 0x74, 0x32,
	0x97, 0x52, 0x96, 0xa7, 0xb2, 0x52, 0xb4, 0xa2, 0x14, 0x91, 0x7a, 0x6f, 0xbf, 0xda, 0x2a, 0x05,
	0x0d, 0xf7, 0xa0, 0xb3, 0x6c, 0x3e, 0x07, 0x40, 0xce, 0x25, 0x51, 0x05, 0xf4, 0xe9, 0xdb, 0xaf,
	0x3f, 0x6f, 0x68, 0x1f, 0x4e, 0x16, 0xbe, 0xdb, 0x59, 0x34, 0x3a, 0xff, 0x76, 0xcf, 0xe9, 0x9c,
	0x3d, 0xc0, 0xb2, 0xc8, 0x50, 0x78, 0xab, 0xea, 0xb5, 0x7d, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x76, 0x25, 0x74, 0xd7, 0x12, 0x06, 0x00, 0x00,
}

func (this *MeshServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshServiceSpec)
	if !ok {
		that2, ok := that.(MeshServiceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeService.Equal(that1.KubeService) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if !this.Federation.Equal(that1.Federation) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Federation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Federation)
	if !ok {
		that2, ok := that.(Federation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MulticlusterDnsName != that1.MulticlusterDnsName {
		return false
	}
	if len(this.DestinationMeshes) != len(that1.DestinationMeshes) {
		return false
	}
	for i := range this.DestinationMeshes {
		if !this.DestinationMeshes[i].Equal(that1.DestinationMeshes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *KubeService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubeService)
	if !ok {
		that2, ok := that.(KubeService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if len(this.SelectorLabels) != len(that1.SelectorLabels) {
		return false
	}
	for i := range this.SelectorLabels {
		if this.SelectorLabels[i] != that1.SelectorLabels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshServiceStatus)
	if !ok {
		that2, ok := that.(MeshServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshWorkloadSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadSpec)
	if !ok {
		that2, ok := that.(MeshWorkloadSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeControllerRef.Equal(that1.KubeControllerRef) {
		return false
	}
	if !this.KubePod.Equal(that1.KubePod) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if len(this.FederatedServices) != len(that1.FederatedServices) {
		return false
	}
	for i := range this.FederatedServices {
		if !this.FederatedServices[i].Equal(that1.FederatedServices[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FederatedService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FederatedService)
	if !ok {
		that2, ok := that.(FederatedService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MulticlusterDnsName != that1.MulticlusterDnsName {
		return false
	}
	if !this.MeshServiceRef.Equal(that1.MeshServiceRef) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *KubePod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubePod)
	if !ok {
		that2, ok := that.(KubePod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.ServiceAccountName != that1.ServiceAccountName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshWorkloadStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadStatus)
	if !ok {
		that2, ok := that.(MeshWorkloadStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
