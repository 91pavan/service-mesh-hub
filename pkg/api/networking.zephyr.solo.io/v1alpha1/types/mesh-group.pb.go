// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/networking/v1alpha1/mesh-group.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Federation_Mode int32

const (
	// federate everything to everybody
	Federation_PERMISSIVE Federation_Mode = 0
)

var Federation_Mode_name = map[int32]string{
	0: "PERMISSIVE",
}

var Federation_Mode_value = map[string]int32{
	"PERMISSIVE": 0,
}

func (x Federation_Mode) String() string {
	return proto.EnumName(Federation_Mode_name, int32(x))
}

func (Federation_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d1ff4b058b6825b, []int{1, 0}
}

type MeshGroupSpec struct {
	// User-provided display name for the mesh group.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The meshes contained in this group.
	Meshes []*types.ResourceRef `protobuf:"bytes,2,rep,name=meshes,proto3" json:"meshes,omitempty"`
	//
	//optional: if set will use this resource ref to determine the secret from which the
	//root trust bundle should be grabbed. Otherwise it will default to
	//
	//trust_bundle:
	//name: cacerts
	//namespace: service-mesh-hub (default write namespace)
	TrustBundleRef *types.ResourceRef `protobuf:"bytes,3,opt,name=trust_bundle_ref,json=trustBundleRef,proto3" json:"trust_bundle_ref,omitempty"`
	Federation     *Federation        `protobuf:"bytes,4,opt,name=federation,proto3" json:"federation,omitempty"`
	// Types that are valid to be assigned to TrustModel:
	//	*MeshGroupSpec_Shared
	//	*MeshGroupSpec_Limited
	TrustModel           isMeshGroupSpec_TrustModel `protobuf_oneof:"trust_model"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MeshGroupSpec) Reset()         { *m = MeshGroupSpec{} }
func (m *MeshGroupSpec) String() string { return proto.CompactTextString(m) }
func (*MeshGroupSpec) ProtoMessage()    {}
func (*MeshGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1ff4b058b6825b, []int{0}
}
func (m *MeshGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshGroupSpec.Unmarshal(m, b)
}
func (m *MeshGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshGroupSpec.Marshal(b, m, deterministic)
}
func (m *MeshGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGroupSpec.Merge(m, src)
}
func (m *MeshGroupSpec) XXX_Size() int {
	return xxx_messageInfo_MeshGroupSpec.Size(m)
}
func (m *MeshGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGroupSpec proto.InternalMessageInfo

type isMeshGroupSpec_TrustModel interface {
	isMeshGroupSpec_TrustModel()
	Equal(interface{}) bool
}

type MeshGroupSpec_Shared struct {
	Shared *MeshGroupSpec_SharedTrust `protobuf:"bytes,5,opt,name=shared,proto3,oneof" json:"shared,omitempty"`
}
type MeshGroupSpec_Limited struct {
	Limited *MeshGroupSpec_LimitedTrust `protobuf:"bytes,6,opt,name=limited,proto3,oneof" json:"limited,omitempty"`
}

func (*MeshGroupSpec_Shared) isMeshGroupSpec_TrustModel()  {}
func (*MeshGroupSpec_Limited) isMeshGroupSpec_TrustModel() {}

func (m *MeshGroupSpec) GetTrustModel() isMeshGroupSpec_TrustModel {
	if m != nil {
		return m.TrustModel
	}
	return nil
}

func (m *MeshGroupSpec) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MeshGroupSpec) GetMeshes() []*types.ResourceRef {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func (m *MeshGroupSpec) GetTrustBundleRef() *types.ResourceRef {
	if m != nil {
		return m.TrustBundleRef
	}
	return nil
}

func (m *MeshGroupSpec) GetFederation() *Federation {
	if m != nil {
		return m.Federation
	}
	return nil
}

func (m *MeshGroupSpec) GetShared() *MeshGroupSpec_SharedTrust {
	if x, ok := m.GetTrustModel().(*MeshGroupSpec_Shared); ok {
		return x.Shared
	}
	return nil
}

func (m *MeshGroupSpec) GetLimited() *MeshGroupSpec_LimitedTrust {
	if x, ok := m.GetTrustModel().(*MeshGroupSpec_Limited); ok {
		return x.Limited
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MeshGroupSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MeshGroupSpec_Shared)(nil),
		(*MeshGroupSpec_Limited)(nil),
	}
}

//
//Shared trust is a mesh group trust model requiring a shared root certificate, as well as shared identity
//between all entities which wish to communicate within the mesh group.
//
//The best current example of this would be the replicated control planes example from istio:
//https://preliminary.istio.io/docs/setup/install/multicluster/gateways/
type MeshGroupSpec_SharedTrust struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshGroupSpec_SharedTrust) Reset()         { *m = MeshGroupSpec_SharedTrust{} }
func (m *MeshGroupSpec_SharedTrust) String() string { return proto.CompactTextString(m) }
func (*MeshGroupSpec_SharedTrust) ProtoMessage()    {}
func (*MeshGroupSpec_SharedTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1ff4b058b6825b, []int{0, 0}
}
func (m *MeshGroupSpec_SharedTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshGroupSpec_SharedTrust.Unmarshal(m, b)
}
func (m *MeshGroupSpec_SharedTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshGroupSpec_SharedTrust.Marshal(b, m, deterministic)
}
func (m *MeshGroupSpec_SharedTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGroupSpec_SharedTrust.Merge(m, src)
}
func (m *MeshGroupSpec_SharedTrust) XXX_Size() int {
	return xxx_messageInfo_MeshGroupSpec_SharedTrust.Size(m)
}
func (m *MeshGroupSpec_SharedTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGroupSpec_SharedTrust.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGroupSpec_SharedTrust proto.InternalMessageInfo

//
//Limited trust is a mesh group trust model which does not require all meshes sharing the same root certificate
//or identity model. But rather, the limited trust creates trust between meshes running on different clusters
//by connecting their ingress/egress gateways with a common cert/identity. In this model all requests
//between different have the following request path when communicating between clusters
//
//cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
//client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server
//
//This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
//addition of additional clusters into a mesh group.
type MeshGroupSpec_LimitedTrust struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshGroupSpec_LimitedTrust) Reset()         { *m = MeshGroupSpec_LimitedTrust{} }
func (m *MeshGroupSpec_LimitedTrust) String() string { return proto.CompactTextString(m) }
func (*MeshGroupSpec_LimitedTrust) ProtoMessage()    {}
func (*MeshGroupSpec_LimitedTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1ff4b058b6825b, []int{0, 1}
}
func (m *MeshGroupSpec_LimitedTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshGroupSpec_LimitedTrust.Unmarshal(m, b)
}
func (m *MeshGroupSpec_LimitedTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshGroupSpec_LimitedTrust.Marshal(b, m, deterministic)
}
func (m *MeshGroupSpec_LimitedTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGroupSpec_LimitedTrust.Merge(m, src)
}
func (m *MeshGroupSpec_LimitedTrust) XXX_Size() int {
	return xxx_messageInfo_MeshGroupSpec_LimitedTrust.Size(m)
}
func (m *MeshGroupSpec_LimitedTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGroupSpec_LimitedTrust.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGroupSpec_LimitedTrust proto.InternalMessageInfo

type Federation struct {
	Mode                 Federation_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=networking.zephyr.solo.io.Federation_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Federation) Reset()         { *m = Federation{} }
func (m *Federation) String() string { return proto.CompactTextString(m) }
func (*Federation) ProtoMessage()    {}
func (*Federation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1ff4b058b6825b, []int{1}
}
func (m *Federation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Federation.Unmarshal(m, b)
}
func (m *Federation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Federation.Marshal(b, m, deterministic)
}
func (m *Federation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Federation.Merge(m, src)
}
func (m *Federation) XXX_Size() int {
	return xxx_messageInfo_Federation.Size(m)
}
func (m *Federation) XXX_DiscardUnknown() {
	xxx_messageInfo_Federation.DiscardUnknown(m)
}

var xxx_messageInfo_Federation proto.InternalMessageInfo

func (m *Federation) GetMode() Federation_Mode {
	if m != nil {
		return m.Mode
	}
	return Federation_PERMISSIVE
}

type MeshGroupStatus struct {
	//
	//0:  The state of the mesh group is unknown, this most likely means that the state is being calculated.
	//1:  The state of the mesh group is Good. All operations have been completed successfully, and all routing
	//is enabled.
	//2:  The state of the mesh group is bad. Either a mesh group operation has failed, or some portion of
	//inter-mesh routing is down.
	//
	//TODO: Enumerate further information below on the following states in a description message
	Health               types.HealthStatus    `protobuf:"varint,1,opt,name=health,proto3,enum=core.zephyr.solo.io.HealthStatus" json:"health,omitempty"`
	FederationStatus     *types.ComputedStatus `protobuf:"bytes,2,opt,name=federation_status,json=federationStatus,proto3" json:"federation_status,omitempty"`
	CertificateStatus    *types.ComputedStatus `protobuf:"bytes,3,opt,name=certificate_status,json=certificateStatus,proto3" json:"certificate_status,omitempty"`
	ConfigStatus         *types.ComputedStatus `protobuf:"bytes,4,opt,name=config_status,json=configStatus,proto3" json:"config_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MeshGroupStatus) Reset()         { *m = MeshGroupStatus{} }
func (m *MeshGroupStatus) String() string { return proto.CompactTextString(m) }
func (*MeshGroupStatus) ProtoMessage()    {}
func (*MeshGroupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1ff4b058b6825b, []int{2}
}
func (m *MeshGroupStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshGroupStatus.Unmarshal(m, b)
}
func (m *MeshGroupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshGroupStatus.Marshal(b, m, deterministic)
}
func (m *MeshGroupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGroupStatus.Merge(m, src)
}
func (m *MeshGroupStatus) XXX_Size() int {
	return xxx_messageInfo_MeshGroupStatus.Size(m)
}
func (m *MeshGroupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGroupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGroupStatus proto.InternalMessageInfo

func (m *MeshGroupStatus) GetHealth() types.HealthStatus {
	if m != nil {
		return m.Health
	}
	return types.HealthStatus_UNKNOWN
}

func (m *MeshGroupStatus) GetFederationStatus() *types.ComputedStatus {
	if m != nil {
		return m.FederationStatus
	}
	return nil
}

func (m *MeshGroupStatus) GetCertificateStatus() *types.ComputedStatus {
	if m != nil {
		return m.CertificateStatus
	}
	return nil
}

func (m *MeshGroupStatus) GetConfigStatus() *types.ComputedStatus {
	if m != nil {
		return m.ConfigStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("networking.zephyr.solo.io.Federation_Mode", Federation_Mode_name, Federation_Mode_value)
	proto.RegisterType((*MeshGroupSpec)(nil), "networking.zephyr.solo.io.MeshGroupSpec")
	proto.RegisterType((*MeshGroupSpec_SharedTrust)(nil), "networking.zephyr.solo.io.MeshGroupSpec.SharedTrust")
	proto.RegisterType((*MeshGroupSpec_LimitedTrust)(nil), "networking.zephyr.solo.io.MeshGroupSpec.LimitedTrust")
	proto.RegisterType((*Federation)(nil), "networking.zephyr.solo.io.Federation")
	proto.RegisterType((*MeshGroupStatus)(nil), "networking.zephyr.solo.io.MeshGroupStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/networking/v1alpha1/mesh-group.proto", fileDescriptor_0d1ff4b058b6825b)
}

var fileDescriptor_0d1ff4b058b6825b = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0xd7, 0x0f, 0x8a, 0x38, 0xfd, 0xa0, 0xb3, 0x10, 0x0a, 0xbd, 0x40, 0x5d, 0x11, 0xd2,
	0x40, 0x2c, 0xd1, 0x06, 0x48, 0x70, 0xc3, 0x45, 0x51, 0xa1, 0x45, 0x74, 0xda, 0x52, 0x04, 0x12,
	0x37, 0x55, 0x9a, 0x9c, 0x24, 0x66, 0x49, 0x6c, 0xd9, 0x0e, 0xa8, 0x3c, 0x11, 0x0f, 0xc1, 0x43,
	0xf0, 0x0c, 0x3c, 0x09, 0x8a, 0x93, 0x92, 0x52, 0x06, 0xcb, 0x9d, 0x6d, 0xfd, 0xff, 0xbf, 0xe3,
	0xf3, 0x61, 0xc3, 0x2c, 0xa0, 0x2a, 0x4c, 0x57, 0xa6, 0xcb, 0x62, 0x4b, 0xb2, 0x88, 0x1d, 0x51,
	0x66, 0xc5, 0x28, 0xc3, 0x23, 0x2e, 0xd8, 0x27, 0x74, 0x95, 0xb4, 0x1c, 0x4e, 0xad, 0x04, 0xd5,
	0x17, 0x26, 0x2e, 0x68, 0x12, 0x58, 0x9f, 0x8f, 0x9d, 0x88, 0x87, 0xce, 0x71, 0xae, 0x0a, 0x04,
	0x4b, 0xb9, 0xc9, 0x05, 0x53, 0x8c, 0xdc, 0x29, 0x55, 0xe6, 0x57, 0xe4, 0xe1, 0x5a, 0x98, 0x19,
	0xd1, 0xa4, 0x6c, 0xf0, 0xe0, 0x6f, 0xa4, 0xcb, 0x04, 0x96, 0x30, 0x81, 0x7e, 0x4e, 0x19, 0x3c,
	0xba, 0x4a, 0x1a, 0xa2, 0x13, 0xa9, 0xb0, 0xaa, 0x5a, 0x2a, 0x47, 0xa5, 0xb2, 0x50, 0xdf, 0x0a,
	0x58, 0xc0, 0xf4, 0xd2, 0xca, 0x56, 0xf9, 0xe9, 0xe8, 0x47, 0x03, 0xba, 0x73, 0x94, 0xe1, 0xeb,
	0x2c, 0x97, 0x05, 0x47, 0x97, 0x1c, 0x40, 0xc7, 0xa3, 0x92, 0x47, 0xce, 0x7a, 0x99, 0x38, 0x31,
	0x1a, 0xb5, 0x61, 0xed, 0xf0, 0x86, 0xdd, 0x2e, 0xce, 0x4e, 0x9d, 0x18, 0xc9, 0x33, 0x68, 0x65,
	0xa1, 0x51, 0x1a, 0xf5, 0x61, 0xe3, 0xb0, 0x7d, 0x32, 0x34, 0xb3, 0xb8, 0x3b, 0x79, 0x9b, 0x36,
	0x4a, 0x96, 0x0a, 0x17, 0x6d, 0xf4, 0xed, 0x42, 0x4f, 0xde, 0x40, 0x5f, 0x89, 0x54, 0xaa, 0xe5,
	0x2a, 0x4d, 0xbc, 0x08, 0x97, 0x02, 0x7d, 0xa3, 0x31, 0xac, 0x55, 0x62, 0xf4, 0xb4, 0x73, 0xac,
	0x8d, 0x36, 0xfa, 0x64, 0x02, 0xe0, 0xa3, 0x87, 0xc2, 0x51, 0x94, 0x25, 0x46, 0x53, 0x53, 0xee,
	0x9b, 0xff, 0xec, 0x83, 0xf9, 0xea, 0xb7, 0xd8, 0xde, 0x32, 0x92, 0x53, 0x68, 0xc9, 0xd0, 0x11,
	0xe8, 0x19, 0xd7, 0x34, 0xe2, 0xc9, 0x7f, 0x10, 0x7f, 0x54, 0xca, 0x5c, 0x68, 0xdb, 0xbb, 0xec,
	0x56, 0xd3, 0x3d, 0xbb, 0xa0, 0x90, 0x73, 0xb8, 0x1e, 0xd1, 0x98, 0x2a, 0xf4, 0x8c, 0x96, 0x06,
	0x3e, 0xad, 0x0c, 0x7c, 0x9b, 0xfb, 0x36, 0xc4, 0x0d, 0x67, 0xd0, 0x85, 0xf6, 0x56, 0xac, 0x41,
	0x0f, 0x3a, 0xdb, 0xca, 0x71, 0x17, 0xda, 0x79, 0x51, 0x63, 0xe6, 0x61, 0x34, 0xf2, 0x00, 0xca,
	0x54, 0xc9, 0x0b, 0x68, 0x66, 0xc7, 0xba, 0x8d, 0xbd, 0x93, 0x87, 0x95, 0xea, 0x63, 0xce, 0x99,
	0x87, 0xb6, 0xf6, 0x8d, 0x6e, 0x43, 0x33, 0xdb, 0x91, 0x1e, 0xc0, 0xd9, 0xc4, 0x9e, 0xcf, 0x16,
	0x8b, 0xd9, 0xfb, 0x49, 0x7f, 0x6f, 0xf4, 0xbd, 0x0e, 0x37, 0xcb, 0xdb, 0xeb, 0x41, 0x23, 0xcf,
	0xa1, 0x95, 0x0f, 0x68, 0x11, 0xed, 0xe0, 0xd2, 0x9e, 0x4e, 0xb5, 0x24, 0xb7, 0xd8, 0x85, 0x81,
	0x9c, 0xc1, 0x7e, 0xd9, 0x93, 0x65, 0x3e, 0xb8, 0x46, 0x5d, 0xd7, 0xef, 0xde, 0xa5, 0x94, 0x97,
	0x2c, 0xe6, 0xa9, 0x42, 0xaf, 0xe0, 0xf4, 0x4b, 0x77, 0x71, 0x19, 0x1b, 0x88, 0x8b, 0x42, 0x51,
	0x9f, 0xba, 0x8e, 0xc2, 0x0d, 0xb2, 0x51, 0x1d, 0xb9, 0xbf, 0x65, 0x2f, 0x98, 0x53, 0xe8, 0xba,
	0x2c, 0xf1, 0x69, 0xb0, 0xc1, 0x35, 0xab, 0xe3, 0x3a, 0xb9, 0x33, 0xdf, 0x8d, 0x3f, 0x7c, 0xfb,
	0x79, 0xb7, 0xf6, 0xf1, 0xfc, 0xca, 0x0f, 0x88, 0x5f, 0x04, 0x3b, 0x9f, 0xd0, 0x4e, 0x98, 0xf2,
	0xb5, 0xab, 0x35, 0x47, 0xb9, 0x6a, 0xe9, 0x77, 0xfd, 0xf8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x73, 0x3a, 0xb3, 0xe5, 0xdc, 0x04, 0x00, 0x00,
}

func (this *MeshGroupSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroupSpec)
	if !ok {
		that2, ok := that.(MeshGroupSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.Meshes) != len(that1.Meshes) {
		return false
	}
	for i := range this.Meshes {
		if !this.Meshes[i].Equal(that1.Meshes[i]) {
			return false
		}
	}
	if !this.TrustBundleRef.Equal(that1.TrustBundleRef) {
		return false
	}
	if !this.Federation.Equal(that1.Federation) {
		return false
	}
	if that1.TrustModel == nil {
		if this.TrustModel != nil {
			return false
		}
	} else if this.TrustModel == nil {
		return false
	} else if !this.TrustModel.Equal(that1.TrustModel) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshGroupSpec_Shared) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroupSpec_Shared)
	if !ok {
		that2, ok := that.(MeshGroupSpec_Shared)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shared.Equal(that1.Shared) {
		return false
	}
	return true
}
func (this *MeshGroupSpec_Limited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroupSpec_Limited)
	if !ok {
		that2, ok := that.(MeshGroupSpec_Limited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Limited.Equal(that1.Limited) {
		return false
	}
	return true
}
func (this *MeshGroupSpec_SharedTrust) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroupSpec_SharedTrust)
	if !ok {
		that2, ok := that.(MeshGroupSpec_SharedTrust)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshGroupSpec_LimitedTrust) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroupSpec_LimitedTrust)
	if !ok {
		that2, ok := that.(MeshGroupSpec_LimitedTrust)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Federation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Federation)
	if !ok {
		that2, ok := that.(Federation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshGroupStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroupStatus)
	if !ok {
		that2, ok := that.(MeshGroupStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Health != that1.Health {
		return false
	}
	if !this.FederationStatus.Equal(that1.FederationStatus) {
		return false
	}
	if !this.CertificateStatus.Equal(that1.CertificateStatus) {
		return false
	}
	if !this.ConfigStatus.Equal(that1.ConfigStatus) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
