// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/networking/v1alpha1/virtual-mesh.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Federation_Mode int32

const (
	// federate everything to everybody
	Federation_PERMISSIVE Federation_Mode = 0
)

var Federation_Mode_name = map[int32]string{
	0: "PERMISSIVE",
}

var Federation_Mode_value = map[string]int32{
	"PERMISSIVE": 0,
}

func (x Federation_Mode) String() string {
	return proto.EnumName(Federation_Mode_name, int32(x))
}

func (Federation_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{1, 0}
}

type VirtualMeshSpec struct {
	// User-provided display name for the virtual mesh.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The meshes contained in this virtual mesh.
	Meshes []*types.ResourceRef `protobuf:"bytes,2,rep,name=meshes,proto3" json:"meshes,omitempty"`
	//
	//optional: if set will use this resource ref to determine the secret from which the
	//root trust bundle should be grabbed. Otherwise it will default to
	//
	//trust_bundle:
	//name: cacerts
	//namespace: service-mesh-hub (default write namespace)
	TrustBundleRef *types.ResourceRef `protobuf:"bytes,3,opt,name=trust_bundle_ref,json=trustBundleRef,proto3" json:"trust_bundle_ref,omitempty"`
	Federation     *Federation        `protobuf:"bytes,4,opt,name=federation,proto3" json:"federation,omitempty"`
	// Types that are valid to be assigned to TrustModel:
	//	*VirtualMeshSpec_Shared
	//	*VirtualMeshSpec_Limited
	TrustModel           isVirtualMeshSpec_TrustModel `protobuf_oneof:"trust_model"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VirtualMeshSpec) Reset()         { *m = VirtualMeshSpec{} }
func (m *VirtualMeshSpec) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshSpec) ProtoMessage()    {}
func (*VirtualMeshSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{0}
}
func (m *VirtualMeshSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshSpec.Unmarshal(m, b)
}
func (m *VirtualMeshSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshSpec.Marshal(b, m, deterministic)
}
func (m *VirtualMeshSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshSpec.Merge(m, src)
}
func (m *VirtualMeshSpec) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshSpec.Size(m)
}
func (m *VirtualMeshSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshSpec proto.InternalMessageInfo

type isVirtualMeshSpec_TrustModel interface {
	isVirtualMeshSpec_TrustModel()
	Equal(interface{}) bool
}

type VirtualMeshSpec_Shared struct {
	Shared *VirtualMeshSpec_SharedTrust `protobuf:"bytes,5,opt,name=shared,proto3,oneof" json:"shared,omitempty"`
}
type VirtualMeshSpec_Limited struct {
	Limited *VirtualMeshSpec_LimitedTrust `protobuf:"bytes,6,opt,name=limited,proto3,oneof" json:"limited,omitempty"`
}

func (*VirtualMeshSpec_Shared) isVirtualMeshSpec_TrustModel()  {}
func (*VirtualMeshSpec_Limited) isVirtualMeshSpec_TrustModel() {}

func (m *VirtualMeshSpec) GetTrustModel() isVirtualMeshSpec_TrustModel {
	if m != nil {
		return m.TrustModel
	}
	return nil
}

func (m *VirtualMeshSpec) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualMeshSpec) GetMeshes() []*types.ResourceRef {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func (m *VirtualMeshSpec) GetTrustBundleRef() *types.ResourceRef {
	if m != nil {
		return m.TrustBundleRef
	}
	return nil
}

func (m *VirtualMeshSpec) GetFederation() *Federation {
	if m != nil {
		return m.Federation
	}
	return nil
}

func (m *VirtualMeshSpec) GetShared() *VirtualMeshSpec_SharedTrust {
	if x, ok := m.GetTrustModel().(*VirtualMeshSpec_Shared); ok {
		return x.Shared
	}
	return nil
}

func (m *VirtualMeshSpec) GetLimited() *VirtualMeshSpec_LimitedTrust {
	if x, ok := m.GetTrustModel().(*VirtualMeshSpec_Limited); ok {
		return x.Limited
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VirtualMeshSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VirtualMeshSpec_Shared)(nil),
		(*VirtualMeshSpec_Limited)(nil),
	}
}

//
//Shared trust is a virtual mesh trust model requiring a shared root certificate, as well as shared identity
//between all entities which wish to communicate within the virtual mesh.
//
//The best current example of this would be the replicated control planes example from istio:
//https://preliminary.istio.io/docs/setup/install/multicluster/gateways/
type VirtualMeshSpec_SharedTrust struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualMeshSpec_SharedTrust) Reset()         { *m = VirtualMeshSpec_SharedTrust{} }
func (m *VirtualMeshSpec_SharedTrust) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshSpec_SharedTrust) ProtoMessage()    {}
func (*VirtualMeshSpec_SharedTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{0, 0}
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshSpec_SharedTrust.Unmarshal(m, b)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshSpec_SharedTrust.Marshal(b, m, deterministic)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshSpec_SharedTrust.Merge(m, src)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshSpec_SharedTrust.Size(m)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshSpec_SharedTrust.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshSpec_SharedTrust proto.InternalMessageInfo

//
//Limited trust is a virtual mesh trust model which does not require all meshes sharing the same root certificate
//or identity model. But rather, the limited trust creates trust between meshes running on different clusters
//by connecting their ingress/egress gateways with a common cert/identity. In this model all requests
//between different have the following request path when communicating between clusters
//
//cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
//client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server
//
//This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
//addition of additional clusters into a virtual mesh.
type VirtualMeshSpec_LimitedTrust struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualMeshSpec_LimitedTrust) Reset()         { *m = VirtualMeshSpec_LimitedTrust{} }
func (m *VirtualMeshSpec_LimitedTrust) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshSpec_LimitedTrust) ProtoMessage()    {}
func (*VirtualMeshSpec_LimitedTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{0, 1}
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Unmarshal(m, b)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Marshal(b, m, deterministic)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Merge(m, src)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Size(m)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshSpec_LimitedTrust.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshSpec_LimitedTrust proto.InternalMessageInfo

type Federation struct {
	Mode                 Federation_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=networking.zephyr.solo.io.Federation_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Federation) Reset()         { *m = Federation{} }
func (m *Federation) String() string { return proto.CompactTextString(m) }
func (*Federation) ProtoMessage()    {}
func (*Federation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{1}
}
func (m *Federation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Federation.Unmarshal(m, b)
}
func (m *Federation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Federation.Marshal(b, m, deterministic)
}
func (m *Federation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Federation.Merge(m, src)
}
func (m *Federation) XXX_Size() int {
	return xxx_messageInfo_Federation.Size(m)
}
func (m *Federation) XXX_DiscardUnknown() {
	xxx_messageInfo_Federation.DiscardUnknown(m)
}

var xxx_messageInfo_Federation proto.InternalMessageInfo

func (m *Federation) GetMode() Federation_Mode {
	if m != nil {
		return m.Mode
	}
	return Federation_PERMISSIVE
}

type VirtualMeshStatus struct {
	//
	//0:  The state of the virtual mesh is unknown, this most likely means that the state is being calculated.
	//1:  The state of the virtual mesh is Good. All operations have been completed successfully, and all routing
	//is enabled.
	//2:  The state of the virtual mesh is bad. Either a virtual mesh operation has failed, or some portion of
	//inter-mesh routing is down.
	//
	//TODO: Enumerate further information below on the following states in a description message
	Health               types.HealthStatus    `protobuf:"varint,1,opt,name=health,proto3,enum=core.zephyr.solo.io.HealthStatus" json:"health,omitempty"`
	FederationStatus     *types.ComputedStatus `protobuf:"bytes,2,opt,name=federation_status,json=federationStatus,proto3" json:"federation_status,omitempty"`
	CertificateStatus    *types.ComputedStatus `protobuf:"bytes,3,opt,name=certificate_status,json=certificateStatus,proto3" json:"certificate_status,omitempty"`
	ConfigStatus         *types.ComputedStatus `protobuf:"bytes,4,opt,name=config_status,json=configStatus,proto3" json:"config_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VirtualMeshStatus) Reset()         { *m = VirtualMeshStatus{} }
func (m *VirtualMeshStatus) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshStatus) ProtoMessage()    {}
func (*VirtualMeshStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{2}
}
func (m *VirtualMeshStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshStatus.Unmarshal(m, b)
}
func (m *VirtualMeshStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshStatus.Marshal(b, m, deterministic)
}
func (m *VirtualMeshStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshStatus.Merge(m, src)
}
func (m *VirtualMeshStatus) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshStatus.Size(m)
}
func (m *VirtualMeshStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshStatus proto.InternalMessageInfo

func (m *VirtualMeshStatus) GetHealth() types.HealthStatus {
	if m != nil {
		return m.Health
	}
	return types.HealthStatus_UNKNOWN
}

func (m *VirtualMeshStatus) GetFederationStatus() *types.ComputedStatus {
	if m != nil {
		return m.FederationStatus
	}
	return nil
}

func (m *VirtualMeshStatus) GetCertificateStatus() *types.ComputedStatus {
	if m != nil {
		return m.CertificateStatus
	}
	return nil
}

func (m *VirtualMeshStatus) GetConfigStatus() *types.ComputedStatus {
	if m != nil {
		return m.ConfigStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("networking.zephyr.solo.io.Federation_Mode", Federation_Mode_name, Federation_Mode_value)
	proto.RegisterType((*VirtualMeshSpec)(nil), "networking.zephyr.solo.io.VirtualMeshSpec")
	proto.RegisterType((*VirtualMeshSpec_SharedTrust)(nil), "networking.zephyr.solo.io.VirtualMeshSpec.SharedTrust")
	proto.RegisterType((*VirtualMeshSpec_LimitedTrust)(nil), "networking.zephyr.solo.io.VirtualMeshSpec.LimitedTrust")
	proto.RegisterType((*Federation)(nil), "networking.zephyr.solo.io.Federation")
	proto.RegisterType((*VirtualMeshStatus)(nil), "networking.zephyr.solo.io.VirtualMeshStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/networking/v1alpha1/virtual-mesh.proto", fileDescriptor_2491d570965f3ed8)
}

var fileDescriptor_2491d570965f3ed8 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x5b, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xa7, 0x17, 0x8a, 0x38, 0xbd, 0xd0, 0x5a, 0x08, 0x85, 0x3e, 0xa0, 0x4e, 0x11, 0xd2,
	0x80, 0x68, 0xa2, 0x19, 0x24, 0x2e, 0x2f, 0x3c, 0x14, 0x15, 0x75, 0x80, 0xa2, 0x92, 0xa2, 0x41,
	0xe2, 0xa5, 0x72, 0x93, 0x93, 0xc4, 0x4c, 0x12, 0x47, 0xb6, 0x33, 0xa8, 0xac, 0x88, 0x55, 0xb0,
	0x0c, 0x16, 0xc0, 0x4a, 0x50, 0x9c, 0x94, 0x54, 0x65, 0x60, 0xca, 0x9b, 0x6d, 0xfd, 0xff, 0x77,
	0x7c, 0x2e, 0x36, 0xbc, 0xf1, 0x99, 0x0a, 0xd2, 0x95, 0xe9, 0xf0, 0xc8, 0x92, 0x3c, 0xe4, 0x23,
	0xc6, 0xad, 0x08, 0x65, 0x30, 0x4a, 0x04, 0xff, 0x8c, 0x8e, 0x92, 0x16, 0x4d, 0x98, 0x15, 0xa3,
	0xfa, 0xc2, 0xc5, 0x39, 0x8b, 0x7d, 0xeb, 0xe2, 0x98, 0x86, 0x49, 0x40, 0x8f, 0xad, 0x0b, 0x26,
	0x54, 0x4a, 0xc3, 0x51, 0xa6, 0x36, 0x13, 0xc1, 0x15, 0x27, 0x77, 0x4a, 0x9d, 0xf9, 0x15, 0x93,
	0x60, 0x2d, 0xcc, 0x8c, 0x69, 0x32, 0xde, 0x7f, 0xf0, 0x27, 0xd4, 0xe1, 0x02, 0x4b, 0x9c, 0x40,
	0x2f, 0xa7, 0xf4, 0x1f, 0x5d, 0x25, 0x0d, 0x90, 0x86, 0x2a, 0xd8, 0x57, 0x2d, 0x15, 0x55, 0xa9,
	0x2c, 0xd4, 0xb7, 0x7c, 0xee, 0x73, 0xbd, 0xb4, 0xb2, 0x55, 0x7e, 0x3a, 0xfc, 0x51, 0x83, 0x9b,
	0x67, 0x79, 0x3a, 0x33, 0x94, 0xc1, 0x22, 0x41, 0x87, 0x1c, 0x42, 0xcb, 0x65, 0x32, 0x09, 0xe9,
	0x7a, 0x19, 0xd3, 0x08, 0x8d, 0xca, 0xa0, 0x72, 0x74, 0xc3, 0x6e, 0x16, 0x67, 0xef, 0x68, 0x84,
	0xe4, 0x19, 0x34, 0xb2, 0xe0, 0x28, 0x8d, 0xea, 0xa0, 0x76, 0xd4, 0x3c, 0x19, 0x98, 0x59, 0xe4,
	0x9d, 0xcc, 0x4d, 0x1b, 0x25, 0x4f, 0x85, 0x83, 0x36, 0x7a, 0x76, 0xa1, 0x27, 0xaf, 0xa1, 0xab,
	0x44, 0x2a, 0xd5, 0x72, 0x95, 0xc6, 0x6e, 0x88, 0x4b, 0x81, 0x9e, 0x51, 0x1b, 0x54, 0xf6, 0x62,
	0x74, 0xb4, 0x73, 0xac, 0x8d, 0x36, 0x7a, 0x64, 0x02, 0xe0, 0xa1, 0x8b, 0x82, 0x2a, 0xc6, 0x63,
	0xa3, 0xae, 0x29, 0xf7, 0xcd, 0xbf, 0x76, 0xc2, 0x7c, 0xf5, 0x5b, 0x6c, 0x6f, 0x19, 0xc9, 0x1c,
	0x1a, 0x32, 0xa0, 0x02, 0x5d, 0xe3, 0x9a, 0x46, 0x3c, 0xf9, 0x07, 0x62, 0xa7, 0x56, 0xe6, 0x42,
	0x1b, 0x3f, 0x64, 0xf7, 0x9a, 0x1e, 0xd8, 0x05, 0x87, 0x2c, 0xe0, 0x7a, 0xc8, 0x22, 0xa6, 0xd0,
	0x35, 0x1a, 0x1a, 0xf9, 0xf4, 0x3f, 0x90, 0x6f, 0x73, 0xe7, 0x86, 0xb9, 0x21, 0xf5, 0xdb, 0xd0,
	0xdc, 0x8a, 0xd6, 0xef, 0x40, 0x6b, 0x5b, 0x39, 0x6e, 0x43, 0x33, 0x2f, 0x6c, 0xc4, 0x5d, 0x0c,
	0x87, 0x2e, 0x40, 0x99, 0x2e, 0x79, 0x01, 0xf5, 0xec, 0x58, 0xb7, 0xb2, 0x73, 0xf2, 0x70, 0xaf,
	0x1a, 0x99, 0x33, 0xee, 0xa2, 0xad, 0x7d, 0xc3, 0xdb, 0x50, 0xcf, 0x76, 0xa4, 0x03, 0x30, 0x9f,
	0xd8, 0xb3, 0xd3, 0xc5, 0xe2, 0xf4, 0x6c, 0xd2, 0x3d, 0x18, 0x7e, 0xaf, 0x42, 0x6f, 0xfb, 0xfe,
	0x7a, 0xe0, 0xc8, 0x73, 0x68, 0xe4, 0x83, 0x5a, 0xc4, 0x3b, 0xbc, 0xb4, 0xb3, 0x53, 0x2d, 0xc9,
	0x2d, 0x76, 0x61, 0x20, 0x73, 0xe8, 0x95, 0x9d, 0x59, 0xe6, 0x03, 0x6c, 0x54, 0x75, 0x0d, 0xef,
	0x5d, 0x4a, 0x79, 0xc9, 0xa3, 0x24, 0x55, 0xe8, 0x16, 0x9c, 0x6e, 0xe9, 0x2e, 0x2e, 0x63, 0x03,
	0x71, 0x50, 0x28, 0xe6, 0x31, 0x87, 0x2a, 0xdc, 0x20, 0x6b, 0xfb, 0x23, 0x7b, 0x5b, 0xf6, 0x82,
	0x39, 0x85, 0xb6, 0xc3, 0x63, 0x8f, 0xf9, 0x1b, 0x5c, 0x7d, 0x7f, 0x5c, 0x2b, 0x77, 0xe6, 0xbb,
	0xf1, 0xc7, 0x6f, 0x3f, 0xef, 0x56, 0x3e, 0xbd, 0xbf, 0xf2, 0x2b, 0x4a, 0xce, 0xfd, 0x9d, 0xef,
	0x68, 0x27, 0x4c, 0xf9, 0xea, 0xd5, 0x3a, 0x41, 0xb9, 0x6a, 0xe8, 0xf7, 0xfd, 0xf8, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0x98, 0x08, 0xc6, 0xe6, 0x04, 0x00, 0x00,
}

func (this *VirtualMeshSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec)
	if !ok {
		that2, ok := that.(VirtualMeshSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.Meshes) != len(that1.Meshes) {
		return false
	}
	for i := range this.Meshes {
		if !this.Meshes[i].Equal(that1.Meshes[i]) {
			return false
		}
	}
	if !this.TrustBundleRef.Equal(that1.TrustBundleRef) {
		return false
	}
	if !this.Federation.Equal(that1.Federation) {
		return false
	}
	if that1.TrustModel == nil {
		if this.TrustModel != nil {
			return false
		}
	} else if this.TrustModel == nil {
		return false
	} else if !this.TrustModel.Equal(that1.TrustModel) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_Shared) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_Shared)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_Shared)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shared.Equal(that1.Shared) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_Limited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_Limited)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_Limited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Limited.Equal(that1.Limited) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_SharedTrust) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_SharedTrust)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_SharedTrust)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_LimitedTrust) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_LimitedTrust)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_LimitedTrust)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Federation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Federation)
	if !ok {
		that2, ok := that.(Federation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualMeshStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshStatus)
	if !ok {
		that2, ok := that.(VirtualMeshStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Health != that1.Health {
		return false
	}
	if !this.FederationStatus.Equal(that1.FederationStatus) {
		return false
	}
	if !this.CertificateStatus.Equal(that1.CertificateStatus) {
		return false
	}
	if !this.ConfigStatus.Equal(that1.ConfigStatus) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
