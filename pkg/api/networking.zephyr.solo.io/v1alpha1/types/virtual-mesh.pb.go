// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/networking/v1alpha1/virtual-mesh.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Federation_Mode int32

const (
	// federate everything to everybody
	Federation_PERMISSIVE Federation_Mode = 0
)

var Federation_Mode_name = map[int32]string{
	0: "PERMISSIVE",
}

var Federation_Mode_value = map[string]int32{
	"PERMISSIVE": 0,
}

func (x Federation_Mode) String() string {
	return proto.EnumName(Federation_Mode_name, int32(x))
}

func (Federation_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{2, 0}
}

type VirtualMeshSpec struct {
	// User-provided display name for the virtual mesh.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The meshes contained in this virtual mesh.
	Meshes               []*types.ResourceRef  `protobuf:"bytes,2,rep,name=meshes,proto3" json:"meshes,omitempty"`
	CertificateAuthority *CertificateAuthority `protobuf:"bytes,3,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	Federation           *Federation           `protobuf:"bytes,4,opt,name=federation,proto3" json:"federation,omitempty"`
	// Types that are valid to be assigned to TrustModel:
	//	*VirtualMeshSpec_Shared
	//	*VirtualMeshSpec_Limited
	TrustModel isVirtualMeshSpec_TrustModel `protobuf_oneof:"trust_model"`
	//
	//If true, by default disallow traffic to all Services in the VirtualMesh unless explicitly allowed through AccessControlPolicies.
	//If false, by default allow traffic to all Services in the VirtualMesh.
	//Defaults to false when not set.
	EnforceAccessControl bool     `protobuf:"varint,7,opt,name=enforce_access_control,json=enforceAccessControl,proto3" json:"enforce_access_control,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualMeshSpec) Reset()         { *m = VirtualMeshSpec{} }
func (m *VirtualMeshSpec) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshSpec) ProtoMessage()    {}
func (*VirtualMeshSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{0}
}
func (m *VirtualMeshSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshSpec.Unmarshal(m, b)
}
func (m *VirtualMeshSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshSpec.Marshal(b, m, deterministic)
}
func (m *VirtualMeshSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshSpec.Merge(m, src)
}
func (m *VirtualMeshSpec) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshSpec.Size(m)
}
func (m *VirtualMeshSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshSpec proto.InternalMessageInfo

type isVirtualMeshSpec_TrustModel interface {
	isVirtualMeshSpec_TrustModel()
	Equal(interface{}) bool
}

type VirtualMeshSpec_Shared struct {
	Shared *VirtualMeshSpec_SharedTrust `protobuf:"bytes,5,opt,name=shared,proto3,oneof" json:"shared,omitempty"`
}
type VirtualMeshSpec_Limited struct {
	Limited *VirtualMeshSpec_LimitedTrust `protobuf:"bytes,6,opt,name=limited,proto3,oneof" json:"limited,omitempty"`
}

func (*VirtualMeshSpec_Shared) isVirtualMeshSpec_TrustModel()  {}
func (*VirtualMeshSpec_Limited) isVirtualMeshSpec_TrustModel() {}

func (m *VirtualMeshSpec) GetTrustModel() isVirtualMeshSpec_TrustModel {
	if m != nil {
		return m.TrustModel
	}
	return nil
}

func (m *VirtualMeshSpec) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualMeshSpec) GetMeshes() []*types.ResourceRef {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func (m *VirtualMeshSpec) GetCertificateAuthority() *CertificateAuthority {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

func (m *VirtualMeshSpec) GetFederation() *Federation {
	if m != nil {
		return m.Federation
	}
	return nil
}

func (m *VirtualMeshSpec) GetShared() *VirtualMeshSpec_SharedTrust {
	if x, ok := m.GetTrustModel().(*VirtualMeshSpec_Shared); ok {
		return x.Shared
	}
	return nil
}

func (m *VirtualMeshSpec) GetLimited() *VirtualMeshSpec_LimitedTrust {
	if x, ok := m.GetTrustModel().(*VirtualMeshSpec_Limited); ok {
		return x.Limited
	}
	return nil
}

func (m *VirtualMeshSpec) GetEnforceAccessControl() bool {
	if m != nil {
		return m.EnforceAccessControl
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VirtualMeshSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VirtualMeshSpec_Shared)(nil),
		(*VirtualMeshSpec_Limited)(nil),
	}
}

//
//Shared trust is a virtual mesh trust model requiring a shared root certificate, as well as shared identity
//between all entities which wish to communicate within the virtual mesh.
//
//The best current example of this would be the replicated control planes example from istio:
//https://preliminary.istio.io/docs/setup/install/multicluster/gateways/
type VirtualMeshSpec_SharedTrust struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualMeshSpec_SharedTrust) Reset()         { *m = VirtualMeshSpec_SharedTrust{} }
func (m *VirtualMeshSpec_SharedTrust) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshSpec_SharedTrust) ProtoMessage()    {}
func (*VirtualMeshSpec_SharedTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{0, 0}
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshSpec_SharedTrust.Unmarshal(m, b)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshSpec_SharedTrust.Marshal(b, m, deterministic)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshSpec_SharedTrust.Merge(m, src)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshSpec_SharedTrust.Size(m)
}
func (m *VirtualMeshSpec_SharedTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshSpec_SharedTrust.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshSpec_SharedTrust proto.InternalMessageInfo

//
//Limited trust is a virtual mesh trust model which does not require all meshes sharing the same root certificate
//or identity model. But rather, the limited trust creates trust between meshes running on different clusters
//by connecting their ingress/egress gateways with a common cert/identity. In this model all requests
//between different have the following request path when communicating between clusters
//
//cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
//client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server
//
//This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
//addition of additional clusters into a virtual mesh.
type VirtualMeshSpec_LimitedTrust struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualMeshSpec_LimitedTrust) Reset()         { *m = VirtualMeshSpec_LimitedTrust{} }
func (m *VirtualMeshSpec_LimitedTrust) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshSpec_LimitedTrust) ProtoMessage()    {}
func (*VirtualMeshSpec_LimitedTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{0, 1}
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Unmarshal(m, b)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Marshal(b, m, deterministic)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Merge(m, src)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshSpec_LimitedTrust.Size(m)
}
func (m *VirtualMeshSpec_LimitedTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshSpec_LimitedTrust.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshSpec_LimitedTrust proto.InternalMessageInfo

type CertificateAuthority struct {
	// If omitted, defaults to builtin
	//
	// Types that are valid to be assigned to Type:
	//	*CertificateAuthority_Builtin_
	//	*CertificateAuthority_Provided_
	Type                 isCertificateAuthority_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CertificateAuthority) Reset()         { *m = CertificateAuthority{} }
func (m *CertificateAuthority) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthority) ProtoMessage()    {}
func (*CertificateAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{1}
}
func (m *CertificateAuthority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority.Unmarshal(m, b)
}
func (m *CertificateAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority.Merge(m, src)
}
func (m *CertificateAuthority) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority.Size(m)
}
func (m *CertificateAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority proto.InternalMessageInfo

type isCertificateAuthority_Type interface {
	isCertificateAuthority_Type()
	Equal(interface{}) bool
}

type CertificateAuthority_Builtin_ struct {
	Builtin *CertificateAuthority_Builtin `protobuf:"bytes,1,opt,name=builtin,proto3,oneof" json:"builtin,omitempty"`
}
type CertificateAuthority_Provided_ struct {
	Provided *CertificateAuthority_Provided `protobuf:"bytes,2,opt,name=provided,proto3,oneof" json:"provided,omitempty"`
}

func (*CertificateAuthority_Builtin_) isCertificateAuthority_Type()  {}
func (*CertificateAuthority_Provided_) isCertificateAuthority_Type() {}

func (m *CertificateAuthority) GetType() isCertificateAuthority_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CertificateAuthority) GetBuiltin() *CertificateAuthority_Builtin {
	if x, ok := m.GetType().(*CertificateAuthority_Builtin_); ok {
		return x.Builtin
	}
	return nil
}

func (m *CertificateAuthority) GetProvided() *CertificateAuthority_Provided {
	if x, ok := m.GetType().(*CertificateAuthority_Provided_); ok {
		return x.Provided
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CertificateAuthority) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CertificateAuthority_Builtin_)(nil),
		(*CertificateAuthority_Provided_)(nil),
	}
}

//
//Configuration for auto-generated root certificate unique to the VirtualMesh
//Uses the X.509 format, RFC5280
type CertificateAuthority_Builtin struct {
	// Number of days before root cert expires. Defaults to 365.
	TtlDays uint32 `protobuf:"varint,1,opt,name=ttl_days,json=ttlDays,proto3" json:"ttl_days,omitempty"`
	// Size in bytes of the root cert's private key. Defaults to 4096
	RsaKeySizeBytes uint32 `protobuf:"varint,2,opt,name=rsa_key_size_bytes,json=rsaKeySizeBytes,proto3" json:"rsa_key_size_bytes,omitempty"`
	// Root cert organization name. Defaults to "service-mesh-hub"
	OrgName              string   `protobuf:"bytes,3,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateAuthority_Builtin) Reset()         { *m = CertificateAuthority_Builtin{} }
func (m *CertificateAuthority_Builtin) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthority_Builtin) ProtoMessage()    {}
func (*CertificateAuthority_Builtin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{1, 0}
}
func (m *CertificateAuthority_Builtin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_Builtin.Unmarshal(m, b)
}
func (m *CertificateAuthority_Builtin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_Builtin.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_Builtin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_Builtin.Merge(m, src)
}
func (m *CertificateAuthority_Builtin) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_Builtin.Size(m)
}
func (m *CertificateAuthority_Builtin) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_Builtin.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_Builtin proto.InternalMessageInfo

func (m *CertificateAuthority_Builtin) GetTtlDays() uint32 {
	if m != nil {
		return m.TtlDays
	}
	return 0
}

func (m *CertificateAuthority_Builtin) GetRsaKeySizeBytes() uint32 {
	if m != nil {
		return m.RsaKeySizeBytes
	}
	return 0
}

func (m *CertificateAuthority_Builtin) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

// Configuration for user-provided root certificate
type CertificateAuthority_Provided struct {
	// Resource reference for a Secret object containing the root certificate
	//certificate:
	//name: cacerts
	//namespace: service-mesh-hub (default write namespace)
	Certificate          *types.ResourceRef `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CertificateAuthority_Provided) Reset()         { *m = CertificateAuthority_Provided{} }
func (m *CertificateAuthority_Provided) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthority_Provided) ProtoMessage()    {}
func (*CertificateAuthority_Provided) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{1, 1}
}
func (m *CertificateAuthority_Provided) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_Provided.Unmarshal(m, b)
}
func (m *CertificateAuthority_Provided) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_Provided.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_Provided) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_Provided.Merge(m, src)
}
func (m *CertificateAuthority_Provided) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_Provided.Size(m)
}
func (m *CertificateAuthority_Provided) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_Provided.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_Provided proto.InternalMessageInfo

func (m *CertificateAuthority_Provided) GetCertificate() *types.ResourceRef {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type Federation struct {
	Mode                 Federation_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=networking.zephyr.solo.io.Federation_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Federation) Reset()         { *m = Federation{} }
func (m *Federation) String() string { return proto.CompactTextString(m) }
func (*Federation) ProtoMessage()    {}
func (*Federation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{2}
}
func (m *Federation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Federation.Unmarshal(m, b)
}
func (m *Federation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Federation.Marshal(b, m, deterministic)
}
func (m *Federation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Federation.Merge(m, src)
}
func (m *Federation) XXX_Size() int {
	return xxx_messageInfo_Federation.Size(m)
}
func (m *Federation) XXX_DiscardUnknown() {
	xxx_messageInfo_Federation.DiscardUnknown(m)
}

var xxx_messageInfo_Federation proto.InternalMessageInfo

func (m *Federation) GetMode() Federation_Mode {
	if m != nil {
		return m.Mode
	}
	return Federation_PERMISSIVE
}

type VirtualMeshStatus struct {
	FederationStatus               *types.ComputedStatus `protobuf:"bytes,1,opt,name=federation_status,json=federationStatus,proto3" json:"federation_status,omitempty"`
	CertificateStatus              *types.ComputedStatus `protobuf:"bytes,2,opt,name=certificate_status,json=certificateStatus,proto3" json:"certificate_status,omitempty"`
	ConfigStatus                   *types.ComputedStatus `protobuf:"bytes,3,opt,name=config_status,json=configStatus,proto3" json:"config_status,omitempty"`
	AccessControlEnforcementStatus *types.ComputedStatus `protobuf:"bytes,4,opt,name=access_control_enforcement_status,json=accessControlEnforcementStatus,proto3" json:"access_control_enforcement_status,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}              `json:"-"`
	XXX_unrecognized               []byte                `json:"-"`
	XXX_sizecache                  int32                 `json:"-"`
}

func (m *VirtualMeshStatus) Reset()         { *m = VirtualMeshStatus{} }
func (m *VirtualMeshStatus) String() string { return proto.CompactTextString(m) }
func (*VirtualMeshStatus) ProtoMessage()    {}
func (*VirtualMeshStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2491d570965f3ed8, []int{3}
}
func (m *VirtualMeshStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMeshStatus.Unmarshal(m, b)
}
func (m *VirtualMeshStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMeshStatus.Marshal(b, m, deterministic)
}
func (m *VirtualMeshStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMeshStatus.Merge(m, src)
}
func (m *VirtualMeshStatus) XXX_Size() int {
	return xxx_messageInfo_VirtualMeshStatus.Size(m)
}
func (m *VirtualMeshStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMeshStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMeshStatus proto.InternalMessageInfo

func (m *VirtualMeshStatus) GetFederationStatus() *types.ComputedStatus {
	if m != nil {
		return m.FederationStatus
	}
	return nil
}

func (m *VirtualMeshStatus) GetCertificateStatus() *types.ComputedStatus {
	if m != nil {
		return m.CertificateStatus
	}
	return nil
}

func (m *VirtualMeshStatus) GetConfigStatus() *types.ComputedStatus {
	if m != nil {
		return m.ConfigStatus
	}
	return nil
}

func (m *VirtualMeshStatus) GetAccessControlEnforcementStatus() *types.ComputedStatus {
	if m != nil {
		return m.AccessControlEnforcementStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("networking.zephyr.solo.io.Federation_Mode", Federation_Mode_name, Federation_Mode_value)
	proto.RegisterType((*VirtualMeshSpec)(nil), "networking.zephyr.solo.io.VirtualMeshSpec")
	proto.RegisterType((*VirtualMeshSpec_SharedTrust)(nil), "networking.zephyr.solo.io.VirtualMeshSpec.SharedTrust")
	proto.RegisterType((*VirtualMeshSpec_LimitedTrust)(nil), "networking.zephyr.solo.io.VirtualMeshSpec.LimitedTrust")
	proto.RegisterType((*CertificateAuthority)(nil), "networking.zephyr.solo.io.CertificateAuthority")
	proto.RegisterType((*CertificateAuthority_Builtin)(nil), "networking.zephyr.solo.io.CertificateAuthority.Builtin")
	proto.RegisterType((*CertificateAuthority_Provided)(nil), "networking.zephyr.solo.io.CertificateAuthority.Provided")
	proto.RegisterType((*Federation)(nil), "networking.zephyr.solo.io.Federation")
	proto.RegisterType((*VirtualMeshStatus)(nil), "networking.zephyr.solo.io.VirtualMeshStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/networking/v1alpha1/virtual-mesh.proto", fileDescriptor_2491d570965f3ed8)
}

var fileDescriptor_2491d570965f3ed8 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xed, 0x6e, 0xf3, 0x34,
	0x14, 0xc7, 0xd7, 0x17, 0xda, 0x72, 0xba, 0xee, 0x79, 0x66, 0x95, 0x29, 0xeb, 0x87, 0xa9, 0x2b,
	0x42, 0x2a, 0x2f, 0x4b, 0xb4, 0x81, 0x60, 0x9f, 0x90, 0xd6, 0x51, 0xb4, 0x69, 0x6c, 0x2a, 0x29,
	0x1a, 0x12, 0x5f, 0x22, 0x37, 0x39, 0x4d, 0xcc, 0x92, 0x38, 0xb2, 0x9d, 0xa1, 0xec, 0x0e, 0xb8,
	0x11, 0xc4, 0x75, 0x71, 0x0b, 0xdc, 0x00, 0xca, 0x4b, 0x97, 0x50, 0xca, 0xd6, 0x7d, 0x73, 0xec,
	0xf3, 0xff, 0xd9, 0x27, 0x3e, 0xff, 0x63, 0xb8, 0x71, 0x99, 0xf2, 0xe2, 0x85, 0x6e, 0xf3, 0xc0,
	0x90, 0xdc, 0xe7, 0x27, 0x8c, 0x1b, 0x01, 0x4a, 0xef, 0x24, 0x12, 0xfc, 0x57, 0xb4, 0x95, 0x34,
	0x68, 0xc4, 0x8c, 0x10, 0xd5, 0x6f, 0x5c, 0x3c, 0xb0, 0xd0, 0x35, 0x1e, 0x4f, 0xa9, 0x1f, 0x79,
	0xf4, 0xd4, 0x78, 0x64, 0x42, 0xc5, 0xd4, 0x3f, 0x49, 0xa3, 0xf5, 0x48, 0x70, 0xc5, 0xc9, 0x61,
	0x19, 0xa7, 0x3f, 0x61, 0xe4, 0x25, 0x42, 0x4f, 0x99, 0x3a, 0xe3, 0x83, 0x4f, 0xff, 0x0b, 0xb5,
	0xb9, 0xc0, 0x12, 0x27, 0x70, 0x99, 0x53, 0x06, 0x5f, 0xbc, 0x16, 0xea, 0x21, 0xf5, 0x95, 0xb7,
	0x6d, 0xb4, 0x54, 0x54, 0xc5, 0xb2, 0x88, 0xee, 0xbb, 0xdc, 0xe5, 0xd9, 0xd0, 0x48, 0x47, 0xf9,
	0xec, 0xe8, 0x8f, 0x26, 0xbc, 0xbb, 0xcf, 0xd3, 0xb9, 0x45, 0xe9, 0xcd, 0x23, 0xb4, 0xc9, 0x31,
	0xec, 0x3a, 0x4c, 0x46, 0x3e, 0x4d, 0xac, 0x90, 0x06, 0xa8, 0xd5, 0x86, 0xb5, 0xf1, 0x87, 0x66,
	0xb7, 0x98, 0xbb, 0xa3, 0x01, 0x92, 0x73, 0x68, 0xa5, 0x9b, 0xa3, 0xd4, 0xea, 0xc3, 0xc6, 0xb8,
	0x7b, 0x36, 0xd4, 0xd3, 0x9d, 0xd7, 0x32, 0xd7, 0x4d, 0x94, 0x3c, 0x16, 0x36, 0x9a, 0xb8, 0x34,
	0x8b, 0x78, 0xe2, 0xc0, 0x47, 0x36, 0x0a, 0xc5, 0x96, 0xcc, 0xa6, 0x0a, 0x2d, 0x1a, 0x2b, 0x8f,
	0x0b, 0xa6, 0x12, 0xad, 0x31, 0xac, 0x8d, 0xbb, 0x67, 0x86, 0xfe, 0xbf, 0x3f, 0x52, 0xbf, 0x2c,
	0x75, 0x17, 0x2b, 0x99, 0xd9, 0xb7, 0x37, 0xcc, 0x92, 0x29, 0xc0, 0x12, 0x1d, 0x14, 0x54, 0x31,
	0x1e, 0x6a, 0xcd, 0x0c, 0xfd, 0xc9, 0x0b, 0xe8, 0xef, 0x9f, 0x83, 0xcd, 0x8a, 0x90, 0xcc, 0xa0,
	0x25, 0x3d, 0x2a, 0xd0, 0xd1, 0x3e, 0xc8, 0x10, 0x5f, 0xbf, 0x80, 0x58, 0xfb, 0x8b, 0xfa, 0x3c,
	0x13, 0xfe, 0x24, 0x62, 0xa9, 0xae, 0x76, 0xcc, 0x82, 0x43, 0xe6, 0xd0, 0xf6, 0x59, 0xc0, 0x14,
	0x3a, 0x5a, 0x2b, 0x43, 0x7e, 0xf3, 0x06, 0xe4, 0x0f, 0xb9, 0x72, 0xc5, 0x5c, 0x91, 0xc8, 0x57,
	0x70, 0x80, 0xe1, 0x92, 0x0b, 0x1b, 0x2d, 0x6a, 0xdb, 0x28, 0xa5, 0x65, 0xf3, 0x50, 0x09, 0xee,
	0x6b, 0xed, 0x61, 0x6d, 0xdc, 0x31, 0xfb, 0xc5, 0xea, 0x45, 0xb6, 0x78, 0x99, 0xaf, 0x0d, 0x7a,
	0xd0, 0xad, 0x9c, 0x71, 0xb0, 0x07, 0xbb, 0x55, 0xfe, 0xa4, 0x07, 0x5d, 0x95, 0x0e, 0xac, 0x80,
	0x3b, 0xe8, 0x8f, 0x7e, 0x6f, 0x40, 0x7f, 0xd3, 0x05, 0xa4, 0x19, 0x2d, 0x62, 0xe6, 0x2b, 0x16,
	0x66, 0x85, 0xf2, 0x72, 0x46, 0x9b, 0x08, 0xfa, 0x24, 0x97, 0xa7, 0x19, 0x15, 0x24, 0x72, 0x0f,
	0x9d, 0x48, 0xf0, 0x47, 0xe6, 0xa0, 0xa3, 0xd5, 0x33, 0xea, 0xf9, 0x5b, 0xa9, 0xb3, 0x42, 0x7f,
	0xb5, 0x63, 0x3e, 0xb3, 0x06, 0x3e, 0xb4, 0x8b, 0xdd, 0xc8, 0x21, 0x74, 0x94, 0xf2, 0x2d, 0x87,
	0x26, 0x32, 0x3b, 0x78, 0xcf, 0x6c, 0x2b, 0xe5, 0x7f, 0x47, 0x13, 0x49, 0x3e, 0x07, 0x22, 0x24,
	0xb5, 0x1e, 0x30, 0xb1, 0x24, 0x7b, 0x42, 0x6b, 0x91, 0xa8, 0xac, 0xd2, 0xd3, 0xa0, 0x77, 0x42,
	0xd2, 0x1b, 0x4c, 0xe6, 0xec, 0x09, 0x27, 0xe9, 0x74, 0xca, 0xe1, 0xc2, 0xcd, 0x9d, 0xd2, 0xc8,
	0x9c, 0xd2, 0xe6, 0xc2, 0x4d, 0x5d, 0x32, 0xb8, 0x83, 0xce, 0xea, 0x14, 0x64, 0x02, 0xdd, 0x4a,
	0xa5, 0x16, 0xd5, 0xfe, 0xba, 0x6d, 0xaa, 0xa2, 0x49, 0x0b, 0x9a, 0x2a, 0x89, 0x70, 0xe4, 0x00,
	0x94, 0x05, 0x4b, 0xbe, 0x85, 0x66, 0x7a, 0x45, 0x59, 0x12, 0x7b, 0x67, 0x9f, 0x6d, 0x55, 0xe5,
	0xfa, 0x2d, 0x77, 0xd0, 0xcc, 0x74, 0xa3, 0x03, 0x68, 0xa6, 0x5f, 0x64, 0x0f, 0x60, 0x36, 0x35,
	0x6f, 0xaf, 0xe7, 0xf3, 0xeb, 0xfb, 0xe9, 0xfb, 0x9d, 0xd1, 0xdf, 0x75, 0xd8, 0xaf, 0x56, 0x60,
	0xd6, 0x4c, 0xc8, 0x0c, 0xf6, 0x4b, 0x83, 0x58, 0x79, 0x87, 0x29, 0x2e, 0xfe, 0xe3, 0x8d, 0xd9,
	0x5c, 0xf2, 0x20, 0x8a, 0x15, 0x3a, 0xb9, 0xde, 0x7c, 0x5f, 0xaa, 0x0b, 0xa2, 0x09, 0xa4, 0xda,
	0x11, 0x0a, 0x64, 0x7d, 0x7b, 0xe4, 0x7e, 0x45, 0x5e, 0x30, 0xaf, 0xa0, 0x67, 0xf3, 0x70, 0xc9,
	0xdc, 0x15, 0xae, 0xb1, 0x3d, 0x6e, 0x37, 0x57, 0x16, 0xa4, 0x10, 0x8e, 0xff, 0xed, 0x29, 0xab,
	0x30, 0x53, 0x80, 0xa1, 0x5a, 0xd1, 0x9b, 0xdb, 0xd3, 0x8f, 0x68, 0xd5, 0x84, 0xd3, 0x92, 0x95,
	0xaf, 0x4f, 0x7e, 0xfe, 0xf3, 0xaf, 0xa3, 0xda, 0x2f, 0x3f, 0xbe, 0xfa, 0x36, 0x45, 0x0f, 0xee,
	0xda, 0xfb, 0xb4, 0xb6, 0x71, 0xf9, 0x0c, 0xa4, 0x35, 0x23, 0x17, 0xad, 0xac, 0xe1, 0x7f, 0xf9,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xbb, 0xe3, 0xcd, 0xf7, 0x06, 0x00, 0x00,
}

func (this *VirtualMeshSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec)
	if !ok {
		that2, ok := that.(VirtualMeshSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.Meshes) != len(that1.Meshes) {
		return false
	}
	for i := range this.Meshes {
		if !this.Meshes[i].Equal(that1.Meshes[i]) {
			return false
		}
	}
	if !this.CertificateAuthority.Equal(that1.CertificateAuthority) {
		return false
	}
	if !this.Federation.Equal(that1.Federation) {
		return false
	}
	if that1.TrustModel == nil {
		if this.TrustModel != nil {
			return false
		}
	} else if this.TrustModel == nil {
		return false
	} else if !this.TrustModel.Equal(that1.TrustModel) {
		return false
	}
	if this.EnforceAccessControl != that1.EnforceAccessControl {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_Shared) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_Shared)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_Shared)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shared.Equal(that1.Shared) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_Limited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_Limited)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_Limited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Limited.Equal(that1.Limited) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_SharedTrust) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_SharedTrust)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_SharedTrust)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualMeshSpec_LimitedTrust) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshSpec_LimitedTrust)
	if !ok {
		that2, ok := that.(VirtualMeshSpec_LimitedTrust)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CertificateAuthority) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateAuthority)
	if !ok {
		that2, ok := that.(CertificateAuthority)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CertificateAuthority_Builtin_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateAuthority_Builtin_)
	if !ok {
		that2, ok := that.(CertificateAuthority_Builtin_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Builtin.Equal(that1.Builtin) {
		return false
	}
	return true
}
func (this *CertificateAuthority_Provided_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateAuthority_Provided_)
	if !ok {
		that2, ok := that.(CertificateAuthority_Provided_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Provided.Equal(that1.Provided) {
		return false
	}
	return true
}
func (this *CertificateAuthority_Builtin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateAuthority_Builtin)
	if !ok {
		that2, ok := that.(CertificateAuthority_Builtin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TtlDays != that1.TtlDays {
		return false
	}
	if this.RsaKeySizeBytes != that1.RsaKeySizeBytes {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CertificateAuthority_Provided) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateAuthority_Provided)
	if !ok {
		that2, ok := that.(CertificateAuthority_Provided)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Certificate.Equal(that1.Certificate) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Federation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Federation)
	if !ok {
		that2, ok := that.(Federation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualMeshStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMeshStatus)
	if !ok {
		that2, ok := that.(VirtualMeshStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FederationStatus.Equal(that1.FederationStatus) {
		return false
	}
	if !this.CertificateStatus.Equal(that1.CertificateStatus) {
		return false
	}
	if !this.ConfigStatus.Equal(that1.ConfigStatus) {
		return false
	}
	if !this.AccessControlEnforcementStatus.Equal(that1.AccessControlEnforcementStatus) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
