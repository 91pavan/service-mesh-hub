// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/mesh-projects/api/networking/v1alpha1/traffic.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/gogo/protobuf/types"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//a routing rule applies some L7 routing features to an existing mesh
//routing rules specify the following:
//for all requests:
//- originating from from **source pods**
//- sent to **destination services**
//- matching one or more **request matcher**
//apply the specified TrafficPolicySpec
//the routing configuration that will be applied to the mesh(es)
//
//Throughout the documentation below, the term "destination" or "destination service" refers to
//the underlying Kubernetes service that is represented in Service Mesh Hub as a MeshService.
//
//NB: If any additional TrafficPolicy action fields (i.e. non selection related fields) are added,
//the TrafficPolicy Merger's "AreTrafficPolicyActionsEqual" method must be updated to reflect the new field.
type TrafficPolicySpec struct {
	// > Note: If using the ServiceSelector.Matcher, specifying clusters is currently not supported in Istio.
	SourceSelector *types.WorkloadSelector `protobuf:"bytes,1,opt,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	//
	//requests destined for these k8s services will have the rule applied
	//leave empty to apply to all destination k8s services in the mesh
	DestinationSelector *types.ServiceSelector `protobuf:"bytes,2,opt,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	//
	//If specified, this rule will only apply to http requests matching these conditions.
	//Within a single matcher, all conditions must be satisfied for a match to occur.
	//Between matchers, at least one matcher must be satisfied for the TrafficPolicy to apply.
	//NB: Linkerd only supports matching on Request Path and Method
	HttpRequestMatchers []*HttpMatcher `protobuf:"bytes,3,rep,name=http_request_matchers,json=httpRequestMatchers,proto3" json:"http_request_matchers,omitempty"`
	//
	//a routing rule can have one of several types
	//Note: types imported from istio will be replaced with our own
	//simpler types, this is just a place to start from
	//
	//enables traffic shifting, i.e. to reroute requests to a different service,
	//to a subset of pods based on their label, and/or split traffic between multiple services
	TrafficShift *MultiDestination `protobuf:"bytes,4,opt,name=traffic_shift,json=trafficShift,proto3" json:"traffic_shift,omitempty"`
	// enable fault injection on requests
	FaultInjection *FaultInjection `protobuf:"bytes,5,opt,name=fault_injection,json=faultInjection,proto3" json:"fault_injection,omitempty"`
	// set a timeout on requests
	RequestTimeout *types1.Duration `protobuf:"bytes,6,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// set a retry policy on requests
	Retries *RetryPolicy `protobuf:"bytes,7,opt,name=retries,proto3" json:"retries,omitempty"`
	//
	//set a Cross-Origin Resource Sharing policy (CORS) for requests. Refer to
	//https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	//for further details about cross origin resource sharing.
	CorsPolicy *CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Mirror HTTP traffic to a another destination. Traffic will still be sent to its original destination as normal.
	Mirror *Mirror `protobuf:"bytes,9,opt,name=mirror,proto3" json:"mirror,omitempty"`
	// manipulate request and response headers
	HeaderManipulation   *HeaderManipulation `protobuf:"bytes,10,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TrafficPolicySpec) Reset()         { *m = TrafficPolicySpec{} }
func (m *TrafficPolicySpec) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec) ProtoMessage()    {}
func (*TrafficPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{0}
}
func (m *TrafficPolicySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec.Unmarshal(m, b)
}
func (m *TrafficPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec.Merge(m, src)
}
func (m *TrafficPolicySpec) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec.Size(m)
}
func (m *TrafficPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec proto.InternalMessageInfo

func (m *TrafficPolicySpec) GetSourceSelector() *types.WorkloadSelector {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *TrafficPolicySpec) GetDestinationSelector() *types.ServiceSelector {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *TrafficPolicySpec) GetHttpRequestMatchers() []*HttpMatcher {
	if m != nil {
		return m.HttpRequestMatchers
	}
	return nil
}

func (m *TrafficPolicySpec) GetTrafficShift() *MultiDestination {
	if m != nil {
		return m.TrafficShift
	}
	return nil
}

func (m *TrafficPolicySpec) GetFaultInjection() *FaultInjection {
	if m != nil {
		return m.FaultInjection
	}
	return nil
}

func (m *TrafficPolicySpec) GetRequestTimeout() *types1.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *TrafficPolicySpec) GetRetries() *RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *TrafficPolicySpec) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *TrafficPolicySpec) GetMirror() *Mirror {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *TrafficPolicySpec) GetHeaderManipulation() *HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

type TrafficPolicyStatus struct {
	TranslationStatus    *types.ComputedStatus                  `protobuf:"bytes,1,opt,name=translation_status,json=translationStatus,proto3" json:"translation_status,omitempty"`
	TranslatorErrors     []*TrafficPolicyStatus_TranslatorError `protobuf:"bytes,2,rep,name=translator_errors,json=translatorErrors,proto3" json:"translator_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *TrafficPolicyStatus) Reset()         { *m = TrafficPolicyStatus{} }
func (m *TrafficPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicyStatus) ProtoMessage()    {}
func (*TrafficPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{1}
}
func (m *TrafficPolicyStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicyStatus.Unmarshal(m, b)
}
func (m *TrafficPolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicyStatus.Marshal(b, m, deterministic)
}
func (m *TrafficPolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicyStatus.Merge(m, src)
}
func (m *TrafficPolicyStatus) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicyStatus.Size(m)
}
func (m *TrafficPolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicyStatus proto.InternalMessageInfo

func (m *TrafficPolicyStatus) GetTranslationStatus() *types.ComputedStatus {
	if m != nil {
		return m.TranslationStatus
	}
	return nil
}

func (m *TrafficPolicyStatus) GetTranslatorErrors() []*TrafficPolicyStatus_TranslatorError {
	if m != nil {
		return m.TranslatorErrors
	}
	return nil
}

type TrafficPolicyStatus_TranslatorError struct {
	// ID representing a translator that translates TrafficPolicy to Mesh-specific config
	TranslatorId         string   `protobuf:"bytes,1,opt,name=translator_id,json=translatorId,proto3" json:"translator_id,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicyStatus_TranslatorError) Reset()         { *m = TrafficPolicyStatus_TranslatorError{} }
func (m *TrafficPolicyStatus_TranslatorError) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicyStatus_TranslatorError) ProtoMessage()    {}
func (*TrafficPolicyStatus_TranslatorError) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{1, 0}
}
func (m *TrafficPolicyStatus_TranslatorError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicyStatus_TranslatorError.Unmarshal(m, b)
}
func (m *TrafficPolicyStatus_TranslatorError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicyStatus_TranslatorError.Marshal(b, m, deterministic)
}
func (m *TrafficPolicyStatus_TranslatorError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicyStatus_TranslatorError.Merge(m, src)
}
func (m *TrafficPolicyStatus_TranslatorError) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicyStatus_TranslatorError.Size(m)
}
func (m *TrafficPolicyStatus_TranslatorError) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicyStatus_TranslatorError.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicyStatus_TranslatorError proto.InternalMessageInfo

func (m *TrafficPolicyStatus_TranslatorError) GetTranslatorId() string {
	if m != nil {
		return m.TranslatorId
	}
	return ""
}

func (m *TrafficPolicyStatus_TranslatorError) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

//
//RetryPolicy contains mesh-specific retry configuration
//Different meshes support different Retry features
//Service Mesh Hub's RetryPolicy exposes config for multiple meshes simultaneously,
//Allowing the same TrafficPolicy to apply retries to different mesh types
//The configuration applied to the target mesh will use the corresponding
//config for each type, while other config types will be ignored
type RetryPolicy struct {
	// Number of retries for a given request
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout        *types1.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RetryPolicy) Reset()         { *m = RetryPolicy{} }
func (m *RetryPolicy) String() string { return proto.CompactTextString(m) }
func (*RetryPolicy) ProtoMessage()    {}
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{2}
}
func (m *RetryPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryPolicy.Unmarshal(m, b)
}
func (m *RetryPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryPolicy.Marshal(b, m, deterministic)
}
func (m *RetryPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryPolicy.Merge(m, src)
}
func (m *RetryPolicy) XXX_Size() int {
	return xxx_messageInfo_RetryPolicy.Size(m)
}
func (m *RetryPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RetryPolicy proto.InternalMessageInfo

func (m *RetryPolicy) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *RetryPolicy) GetPerTryTimeout() *types1.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

type MultiDestination struct {
	Destinations         []*MultiDestination_WeightedDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *MultiDestination) Reset()         { *m = MultiDestination{} }
func (m *MultiDestination) String() string { return proto.CompactTextString(m) }
func (*MultiDestination) ProtoMessage()    {}
func (*MultiDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{3}
}
func (m *MultiDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiDestination.Unmarshal(m, b)
}
func (m *MultiDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiDestination.Marshal(b, m, deterministic)
}
func (m *MultiDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDestination.Merge(m, src)
}
func (m *MultiDestination) XXX_Size() int {
	return xxx_messageInfo_MultiDestination.Size(m)
}
func (m *MultiDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDestination.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDestination proto.InternalMessageInfo

func (m *MultiDestination) GetDestinations() []*MultiDestination_WeightedDestination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type MultiDestination_WeightedDestination struct {
	Destination *types.ResourceRef `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Routing to each destination will be balanced by the ratio of the destination's weight to the total weight on a route
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Subset routing is currently only supported on Istio
	Subset map[string]string `protobuf:"bytes,3,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// port on the destination service to receive traffic. If multiple are found, and none are specified,
	// then the configuration will be considered invalid
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiDestination_WeightedDestination) Reset()         { *m = MultiDestination_WeightedDestination{} }
func (m *MultiDestination_WeightedDestination) String() string { return proto.CompactTextString(m) }
func (*MultiDestination_WeightedDestination) ProtoMessage()    {}
func (*MultiDestination_WeightedDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{3, 0}
}
func (m *MultiDestination_WeightedDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiDestination_WeightedDestination.Unmarshal(m, b)
}
func (m *MultiDestination_WeightedDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiDestination_WeightedDestination.Marshal(b, m, deterministic)
}
func (m *MultiDestination_WeightedDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDestination_WeightedDestination.Merge(m, src)
}
func (m *MultiDestination_WeightedDestination) XXX_Size() int {
	return xxx_messageInfo_MultiDestination_WeightedDestination.Size(m)
}
func (m *MultiDestination_WeightedDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDestination_WeightedDestination.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDestination_WeightedDestination proto.InternalMessageInfo

func (m *MultiDestination_WeightedDestination) GetDestination() *types.ResourceRef {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *MultiDestination_WeightedDestination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *MultiDestination_WeightedDestination) GetSubset() map[string]string {
	if m != nil {
		return m.Subset
	}
	return nil
}

func (m *MultiDestination_WeightedDestination) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

//
//FaultInjection can be used to specify one or more faults to inject
//while forwarding http requests to the destination specified in a route.
//Faults include aborting the Http request from downstream service, and/or delaying
//proxying of requests. A fault rule MUST HAVE delay or abort.
type FaultInjection struct {
	// Types that are valid to be assigned to FaultInjectionType:
	//	*FaultInjection_Delay_
	//	*FaultInjection_Abort_
	FaultInjectionType isFaultInjection_FaultInjectionType `protobuf_oneof:"fault_injection_type"`
	// Percentage of requests to be faulted with the error code provided. Values range between 0 and 100
	Percentage           float64  `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaultInjection) Reset()         { *m = FaultInjection{} }
func (m *FaultInjection) String() string { return proto.CompactTextString(m) }
func (*FaultInjection) ProtoMessage()    {}
func (*FaultInjection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{4}
}
func (m *FaultInjection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection.Unmarshal(m, b)
}
func (m *FaultInjection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection.Marshal(b, m, deterministic)
}
func (m *FaultInjection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection.Merge(m, src)
}
func (m *FaultInjection) XXX_Size() int {
	return xxx_messageInfo_FaultInjection.Size(m)
}
func (m *FaultInjection) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection proto.InternalMessageInfo

type isFaultInjection_FaultInjectionType interface {
	isFaultInjection_FaultInjectionType()
	Equal(interface{}) bool
}

type FaultInjection_Delay_ struct {
	Delay *FaultInjection_Delay `protobuf:"bytes,1,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}
type FaultInjection_Abort_ struct {
	Abort *FaultInjection_Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof" json:"abort,omitempty"`
}

func (*FaultInjection_Delay_) isFaultInjection_FaultInjectionType() {}
func (*FaultInjection_Abort_) isFaultInjection_FaultInjectionType() {}

func (m *FaultInjection) GetFaultInjectionType() isFaultInjection_FaultInjectionType {
	if m != nil {
		return m.FaultInjectionType
	}
	return nil
}

func (m *FaultInjection) GetDelay() *FaultInjection_Delay {
	if x, ok := m.GetFaultInjectionType().(*FaultInjection_Delay_); ok {
		return x.Delay
	}
	return nil
}

func (m *FaultInjection) GetAbort() *FaultInjection_Abort {
	if x, ok := m.GetFaultInjectionType().(*FaultInjection_Abort_); ok {
		return x.Abort
	}
	return nil
}

func (m *FaultInjection) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultInjection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultInjection_Delay_)(nil),
		(*FaultInjection_Abort_)(nil),
	}
}

//
//The _fixedDelay_ field is used to indicate the amount of delay in seconds.
//The optional _percentage_ field can be used to only delay a certain
//percentage of requests. If left unspecified, all request will be delayed.
type FaultInjection_Delay struct {
	// Types that are valid to be assigned to HttpDelayType:
	//	*FaultInjection_Delay_FixedDelay
	//	*FaultInjection_Delay_ExponentialDelay
	HttpDelayType        isFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *FaultInjection_Delay) Reset()         { *m = FaultInjection_Delay{} }
func (m *FaultInjection_Delay) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Delay) ProtoMessage()    {}
func (*FaultInjection_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{4, 0}
}
func (m *FaultInjection_Delay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Delay.Unmarshal(m, b)
}
func (m *FaultInjection_Delay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Delay.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Delay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Delay.Merge(m, src)
}
func (m *FaultInjection_Delay) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Delay.Size(m)
}
func (m *FaultInjection_Delay) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Delay.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Delay proto.InternalMessageInfo

type isFaultInjection_Delay_HttpDelayType interface {
	isFaultInjection_Delay_HttpDelayType()
	Equal(interface{}) bool
}

type FaultInjection_Delay_FixedDelay struct {
	FixedDelay *types1.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,proto3,oneof" json:"fixed_delay,omitempty"`
}
type FaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *types1.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,proto3,oneof" json:"exponential_delay,omitempty"`
}

func (*FaultInjection_Delay_FixedDelay) isFaultInjection_Delay_HttpDelayType()       {}
func (*FaultInjection_Delay_ExponentialDelay) isFaultInjection_Delay_HttpDelayType() {}

func (m *FaultInjection_Delay) GetHttpDelayType() isFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (m *FaultInjection_Delay) GetFixedDelay() *types1.Duration {
	if x, ok := m.GetHttpDelayType().(*FaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *FaultInjection_Delay) GetExponentialDelay() *types1.Duration {
	if x, ok := m.GetHttpDelayType().(*FaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultInjection_Delay) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultInjection_Delay_FixedDelay)(nil),
		(*FaultInjection_Delay_ExponentialDelay)(nil),
	}
}

//
//The _httpStatus_ field is used to indicate the HTTP status code to
//return to the caller. The optional _percentage_ field can be used to only
//abort a certain percentage of requests. If not specified, all requests are
//aborted.
type FaultInjection_Abort struct {
	// Types that are valid to be assigned to ErrorType:
	//	*FaultInjection_Abort_HttpStatus
	ErrorType            isFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FaultInjection_Abort) Reset()         { *m = FaultInjection_Abort{} }
func (m *FaultInjection_Abort) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Abort) ProtoMessage()    {}
func (*FaultInjection_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{4, 1}
}
func (m *FaultInjection_Abort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Abort.Unmarshal(m, b)
}
func (m *FaultInjection_Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Abort.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Abort.Merge(m, src)
}
func (m *FaultInjection_Abort) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Abort.Size(m)
}
func (m *FaultInjection_Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Abort proto.InternalMessageInfo

type isFaultInjection_Abort_ErrorType interface {
	isFaultInjection_Abort_ErrorType()
	Equal(interface{}) bool
}

type FaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,4,opt,name=http_status,json=httpStatus,proto3,oneof" json:"http_status,omitempty"`
}

func (*FaultInjection_Abort_HttpStatus) isFaultInjection_Abort_ErrorType() {}

func (m *FaultInjection_Abort) GetErrorType() isFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *FaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*FaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FaultInjection_Abort) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FaultInjection_Abort_HttpStatus)(nil),
	}
}

// manipulate request and response headers
type HeaderManipulation struct {
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders,proto3" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders,proto3" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders,proto3" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders,proto3" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeaderManipulation) Reset()         { *m = HeaderManipulation{} }
func (m *HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*HeaderManipulation) ProtoMessage()    {}
func (*HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{5}
}
func (m *HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderManipulation.Unmarshal(m, b)
}
func (m *HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderManipulation.Marshal(b, m, deterministic)
}
func (m *HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderManipulation.Merge(m, src)
}
func (m *HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_HeaderManipulation.Size(m)
}
func (m *HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderManipulation proto.InternalMessageInfo

func (m *HeaderManipulation) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

type CorsPolicy struct {
	//
	//String patterns that match allowed origins.
	//An origin is allowed if any of the string matchers match.
	//If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client.
	AllowOrigins []*StringMatch `protobuf:"bytes,7,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	//
	//List of HTTP methods allowed to access the resource. The content will
	//be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	//
	//List of HTTP headers that can be used when requesting the
	//resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	//
	//A white list of HTTP headers that the browsers are allowed to
	//access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	//
	//Specifies how long the results of a preflight request can be
	//cached. Translates to the `Access-Control-Max-Age` header.
	MaxAge *types1.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	//
	//Indicates whether the caller is allowed to send the actual request
	//(not the preflight) using credentials. Translates to
	//`Access-Control-Allow-Credentials` header.
	AllowCredentials     *types1.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{6}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (m *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(m, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

func (m *CorsPolicy) GetAllowOrigins() []*StringMatch {
	if m != nil {
		return m.AllowOrigins
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *types1.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *types1.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// Parameters for matching routes. All specified conditions must be satisfied for a match to occur.
type HttpMatcher struct {
	// Types that are valid to be assigned to PathSpecifier:
	//	*HttpMatcher_Prefix
	//	*HttpMatcher_Exact
	//	*HttpMatcher_Regex
	PathSpecifier isHttpMatcher_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Specifies a set of headers which requests must match in entirety (all headers must match).
	Headers []*HeaderMatcher `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	//
	//Specifies a set of URL query parameters which requests must match in entirety (all query params must match).
	//The router will check the query string from the *path* header against all the specified query parameters
	QueryParameters []*QueryParameterMatcher `protobuf:"bytes,7,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// HTTP Method/Verb to match on. If none specified, the matcher will ignore the HTTP Method
	Method               *HttpMethod `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HttpMatcher) Reset()         { *m = HttpMatcher{} }
func (m *HttpMatcher) String() string { return proto.CompactTextString(m) }
func (*HttpMatcher) ProtoMessage()    {}
func (*HttpMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{7}
}
func (m *HttpMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpMatcher.Unmarshal(m, b)
}
func (m *HttpMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpMatcher.Marshal(b, m, deterministic)
}
func (m *HttpMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMatcher.Merge(m, src)
}
func (m *HttpMatcher) XXX_Size() int {
	return xxx_messageInfo_HttpMatcher.Size(m)
}
func (m *HttpMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMatcher proto.InternalMessageInfo

type isHttpMatcher_PathSpecifier interface {
	isHttpMatcher_PathSpecifier()
	Equal(interface{}) bool
}

type HttpMatcher_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type HttpMatcher_Exact struct {
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type HttpMatcher_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*HttpMatcher_Prefix) isHttpMatcher_PathSpecifier() {}
func (*HttpMatcher_Exact) isHttpMatcher_PathSpecifier()  {}
func (*HttpMatcher_Regex) isHttpMatcher_PathSpecifier()  {}

func (m *HttpMatcher) GetPathSpecifier() isHttpMatcher_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (m *HttpMatcher) GetPrefix() string {
	if x, ok := m.GetPathSpecifier().(*HttpMatcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *HttpMatcher) GetExact() string {
	if x, ok := m.GetPathSpecifier().(*HttpMatcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *HttpMatcher) GetRegex() string {
	if x, ok := m.GetPathSpecifier().(*HttpMatcher_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *HttpMatcher) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpMatcher) GetQueryParameters() []*QueryParameterMatcher {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

func (m *HttpMatcher) GetMethod() *HttpMethod {
	if m != nil {
		return m.Method
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HttpMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HttpMatcher_Prefix)(nil),
		(*HttpMatcher_Exact)(nil),
		(*HttpMatcher_Regex)(nil),
	}
}

//
//Describes how to match a given string in HTTP headers. Match is
//case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType            isStringMatch_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StringMatch) Reset()         { *m = StringMatch{} }
func (m *StringMatch) String() string { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()    {}
func (*StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{8}
}
func (m *StringMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMatch.Unmarshal(m, b)
}
func (m *StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMatch.Marshal(b, m, deterministic)
}
func (m *StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatch.Merge(m, src)
}
func (m *StringMatch) XXX_Size() int {
	return xxx_messageInfo_StringMatch.Size(m)
}
func (m *StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatch proto.InternalMessageInfo

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
	Equal(interface{}) bool
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*StringMatch_Exact) isStringMatch_MatchType()  {}
func (*StringMatch_Prefix) isStringMatch_MatchType() {}
func (*StringMatch_Regex) isStringMatch_MatchType()  {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StringMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

type HeaderMatcher struct {
	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Specifies the value of the header. If the value is absent a request that
	//has the name header will match, regardless of the header’s value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Specifies whether the header value should be treated as regex or not.
	Regex bool `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	//
	//If set to true, the result of the match will be inverted. Defaults to false.
	//
	//Examples:
	// name=foo, invert_match=true: matches if no header named `foo` is present
	// name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present
	// name=foo, value=``\d{3}``, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present
	InvertMatch          bool     `protobuf:"varint,4,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeaderMatcher) Reset()         { *m = HeaderMatcher{} }
func (m *HeaderMatcher) String() string { return proto.CompactTextString(m) }
func (*HeaderMatcher) ProtoMessage()    {}
func (*HeaderMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{9}
}
func (m *HeaderMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderMatcher.Unmarshal(m, b)
}
func (m *HeaderMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderMatcher.Marshal(b, m, deterministic)
}
func (m *HeaderMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderMatcher.Merge(m, src)
}
func (m *HeaderMatcher) XXX_Size() int {
	return xxx_messageInfo_HeaderMatcher.Size(m)
}
func (m *HeaderMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderMatcher proto.InternalMessageInfo

func (m *HeaderMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeaderMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *HeaderMatcher) GetRegex() bool {
	if m != nil {
		return m.Regex
	}
	return false
}

func (m *HeaderMatcher) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

//
//Query parameter matching treats the query string of a request's :path header
//as an ampersand-separated list of keys and/or key=value elements.
type QueryParameterMatcher struct {
	//
	//Specifies the name of a key that must be present in the requested
	//path*'s query string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Specifies the value of the key. If the value is absent, a request
	//that contains the key in its query string will match, whether the
	//key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	//
	//Specifies whether the query parameter value is a regular expression.
	//Defaults to false. The entire query parameter value (i.e., the part to
	//the right of the equals sign in "key=value") must match the regex.
	//E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
	Regex                bool     `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryParameterMatcher) Reset()         { *m = QueryParameterMatcher{} }
func (m *QueryParameterMatcher) String() string { return proto.CompactTextString(m) }
func (*QueryParameterMatcher) ProtoMessage()    {}
func (*QueryParameterMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{10}
}
func (m *QueryParameterMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryParameterMatcher.Unmarshal(m, b)
}
func (m *QueryParameterMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryParameterMatcher.Marshal(b, m, deterministic)
}
func (m *QueryParameterMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParameterMatcher.Merge(m, src)
}
func (m *QueryParameterMatcher) XXX_Size() int {
	return xxx_messageInfo_QueryParameterMatcher.Size(m)
}
func (m *QueryParameterMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParameterMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParameterMatcher proto.InternalMessageInfo

func (m *QueryParameterMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryParameterMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QueryParameterMatcher) GetRegex() bool {
	if m != nil {
		return m.Regex
	}
	return false
}

type Mirror struct {
	// Destination to mirror traffic to
	Destination *types.ResourceRef `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	//
	//Percentage of traffic to mirror. If absent, 100% will be mirrored.
	//Values range between 0 and 100
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// port on the destination service to receive traffic. If multiple are found, and none are specified,
	// then the configuration will be considered invalid
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mirror) Reset()         { *m = Mirror{} }
func (m *Mirror) String() string { return proto.CompactTextString(m) }
func (*Mirror) ProtoMessage()    {}
func (*Mirror) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{11}
}
func (m *Mirror) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mirror.Unmarshal(m, b)
}
func (m *Mirror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mirror.Marshal(b, m, deterministic)
}
func (m *Mirror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mirror.Merge(m, src)
}
func (m *Mirror) XXX_Size() int {
	return xxx_messageInfo_Mirror.Size(m)
}
func (m *Mirror) XXX_DiscardUnknown() {
	xxx_messageInfo_Mirror.DiscardUnknown(m)
}

var xxx_messageInfo_Mirror proto.InternalMessageInfo

func (m *Mirror) GetDestination() *types.ResourceRef {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Mirror) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *Mirror) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type HttpMethod struct {
	Method               types.HttpMethodValue `protobuf:"varint,1,opt,name=method,proto3,enum=core.zephyr.solo.io.HttpMethodValue" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HttpMethod) Reset()         { *m = HttpMethod{} }
func (m *HttpMethod) String() string { return proto.CompactTextString(m) }
func (*HttpMethod) ProtoMessage()    {}
func (*HttpMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bc42f1f1b5bdd7, []int{12}
}
func (m *HttpMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpMethod.Unmarshal(m, b)
}
func (m *HttpMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpMethod.Marshal(b, m, deterministic)
}
func (m *HttpMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMethod.Merge(m, src)
}
func (m *HttpMethod) XXX_Size() int {
	return xxx_messageInfo_HttpMethod.Size(m)
}
func (m *HttpMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMethod.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMethod proto.InternalMessageInfo

func (m *HttpMethod) GetMethod() types.HttpMethodValue {
	if m != nil {
		return m.Method
	}
	return types.HttpMethodValue_GET
}

func init() {
	proto.RegisterType((*TrafficPolicySpec)(nil), "networking.zephyr.solo.io.TrafficPolicySpec")
	proto.RegisterType((*TrafficPolicyStatus)(nil), "networking.zephyr.solo.io.TrafficPolicyStatus")
	proto.RegisterType((*TrafficPolicyStatus_TranslatorError)(nil), "networking.zephyr.solo.io.TrafficPolicyStatus.TranslatorError")
	proto.RegisterType((*RetryPolicy)(nil), "networking.zephyr.solo.io.RetryPolicy")
	proto.RegisterType((*MultiDestination)(nil), "networking.zephyr.solo.io.MultiDestination")
	proto.RegisterType((*MultiDestination_WeightedDestination)(nil), "networking.zephyr.solo.io.MultiDestination.WeightedDestination")
	proto.RegisterMapType((map[string]string)(nil), "networking.zephyr.solo.io.MultiDestination.WeightedDestination.SubsetEntry")
	proto.RegisterType((*FaultInjection)(nil), "networking.zephyr.solo.io.FaultInjection")
	proto.RegisterType((*FaultInjection_Delay)(nil), "networking.zephyr.solo.io.FaultInjection.Delay")
	proto.RegisterType((*FaultInjection_Abort)(nil), "networking.zephyr.solo.io.FaultInjection.Abort")
	proto.RegisterType((*HeaderManipulation)(nil), "networking.zephyr.solo.io.HeaderManipulation")
	proto.RegisterMapType((map[string]string)(nil), "networking.zephyr.solo.io.HeaderManipulation.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "networking.zephyr.solo.io.HeaderManipulation.AppendResponseHeadersEntry")
	proto.RegisterType((*CorsPolicy)(nil), "networking.zephyr.solo.io.CorsPolicy")
	proto.RegisterType((*HttpMatcher)(nil), "networking.zephyr.solo.io.HttpMatcher")
	proto.RegisterType((*StringMatch)(nil), "networking.zephyr.solo.io.StringMatch")
	proto.RegisterType((*HeaderMatcher)(nil), "networking.zephyr.solo.io.HeaderMatcher")
	proto.RegisterType((*QueryParameterMatcher)(nil), "networking.zephyr.solo.io.QueryParameterMatcher")
	proto.RegisterType((*Mirror)(nil), "networking.zephyr.solo.io.Mirror")
	proto.RegisterType((*HttpMethod)(nil), "networking.zephyr.solo.io.HttpMethod")
}

func init() {
	proto.RegisterFile("github.com/solo-io/mesh-projects/api/networking/v1alpha1/traffic.proto", fileDescriptor_a8bc42f1f1b5bdd7)
}

var fileDescriptor_a8bc42f1f1b5bdd7 = []byte{
	// 1498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xae, 0xed, 0xd8, 0x49, 0x8e, 0x63, 0x3b, 0x99, 0x7c, 0xd4, 0xf5, 0x45, 0x95, 0xba, 0x6f,
	0x5f, 0xa5, 0xef, 0x4b, 0xd7, 0xb4, 0x20, 0xd4, 0xa2, 0xf2, 0x11, 0xf7, 0x23, 0x29, 0x55, 0xa0,
	0x9d, 0x54, 0x44, 0x6a, 0x25, 0x56, 0x9b, 0xf5, 0xb1, 0xbd, 0x64, 0x77, 0x67, 0x3b, 0x3b, 0x4e,
	0x62, 0x24, 0xa4, 0xfe, 0x0b, 0x2e, 0x91, 0x90, 0x10, 0xdc, 0x73, 0xc5, 0x2f, 0x40, 0xfc, 0x0d,
	0x7e, 0x09, 0x9a, 0x8f, 0xb5, 0xd7, 0x8e, 0x63, 0x37, 0x94, 0xbb, 0x9d, 0x33, 0xe7, 0x79, 0xe6,
	0xcc, 0x99, 0xe7, 0x9c, 0x19, 0x1b, 0x1e, 0x77, 0x3c, 0xd1, 0xed, 0x1d, 0x5a, 0x2e, 0x0b, 0x1a,
	0x31, 0xf3, 0xd9, 0x2d, 0x8f, 0x35, 0x02, 0x8c, 0xbb, 0xb7, 0x22, 0xce, 0xbe, 0x45, 0x57, 0xc4,
	0x0d, 0x27, 0xf2, 0x1a, 0x21, 0x8a, 0x13, 0xc6, 0x8f, 0xbc, 0xb0, 0xd3, 0x38, 0xbe, 0xed, 0xf8,
	0x51, 0xd7, 0xb9, 0xdd, 0x10, 0xdc, 0x69, 0xb7, 0x3d, 0xd7, 0x8a, 0x38, 0x13, 0x8c, 0x5c, 0x19,
	0xba, 0x58, 0xdf, 0x61, 0xd4, 0xed, 0x73, 0x4b, 0xd2, 0x59, 0x1e, 0xab, 0x5d, 0xed, 0x30, 0xd6,
	0xf1, 0xb1, 0xa1, 0x1c, 0x0f, 0x7b, 0xed, 0x46, 0xab, 0xc7, 0x1d, 0xe1, 0xb1, 0x50, 0x43, 0xcf,
	0xce, 0x9f, 0x70, 0x27, 0x8a, 0x90, 0xc7, 0x66, 0xfe, 0x7f, 0x67, 0xe3, 0x71, 0x19, 0xc7, 0x61,
	0x24, 0x5d, 0x21, 0x22, 0xe3, 0x7b, 0x73, 0x96, 0x2f, 0xc7, 0xb6, 0x71, 0xb5, 0x66, 0xb9, 0xc6,
	0xe8, 0xa3, 0x2b, 0x18, 0x37, 0xfe, 0xef, 0xcd, 0xf4, 0x17, 0x8e, 0xe8, 0x25, 0x41, 0xaf, 0x75,
	0x58, 0x87, 0xa9, 0xcf, 0x86, 0xfc, 0xd2, 0xd6, 0xfa, 0x2f, 0x05, 0x58, 0x79, 0xa1, 0xf3, 0xf6,
	0x8c, 0xf9, 0x9e, 0xdb, 0xdf, 0x8f, 0xd0, 0x25, 0x5f, 0x42, 0x25, 0x66, 0x3d, 0xee, 0xa2, 0x9d,
	0x2c, 0x59, 0xcd, 0x6c, 0x66, 0xb6, 0x8a, 0x77, 0x6e, 0x58, 0x72, 0x85, 0xb1, 0x7c, 0x5a, 0x07,
	0x8c, 0x1f, 0xf9, 0xcc, 0x69, 0xed, 0x1b, 0x67, 0x5a, 0xd6, 0xe8, 0x64, 0x4c, 0x0e, 0x60, 0xad,
	0x85, 0xb1, 0xf0, 0x42, 0x95, 0xe5, 0x21, 0x69, 0x56, 0x91, 0xfe, 0x67, 0x22, 0xe9, 0x3e, 0xf2,
	0x63, 0x6f, 0xc8, 0x41, 0x57, 0x53, 0x0c, 0x03, 0xe2, 0x97, 0xb0, 0x2e, 0x73, 0x6d, 0x73, 0x7c,
	0xdd, 0xc3, 0x58, 0xd8, 0x81, 0x23, 0xdc, 0x2e, 0xf2, 0xb8, 0x9a, 0xdb, 0xcc, 0x6d, 0x15, 0xef,
	0xfc, 0xd7, 0x3a, 0x57, 0x04, 0xd6, 0xae, 0x10, 0xd1, 0x9e, 0x76, 0xa7, 0xab, 0x92, 0x84, 0x6a,
	0x0e, 0x63, 0x8b, 0xc9, 0x33, 0x28, 0x19, 0x45, 0xd9, 0x71, 0xd7, 0x6b, 0x8b, 0xea, 0x9c, 0x8a,
	0xf6, 0xff, 0x53, 0x38, 0xf7, 0x7a, 0xbe, 0xf0, 0x1e, 0x0e, 0xe3, 0xa4, 0x4b, 0x86, 0x61, 0x5f,
	0x12, 0x10, 0x0a, 0x95, 0xb6, 0xd3, 0xf3, 0x85, 0xed, 0x85, 0xf2, 0xc8, 0x3c, 0x16, 0x56, 0xf3,
	0x8a, 0xf3, 0xe6, 0x14, 0xce, 0xc7, 0x12, 0xf1, 0x24, 0x01, 0xd0, 0x72, 0x7b, 0x64, 0x4c, 0x9a,
	0x50, 0x49, 0x36, 0x2f, 0xbc, 0x00, 0x59, 0x4f, 0x54, 0x0b, 0x8a, 0xf3, 0x8a, 0xa5, 0x55, 0x6c,
	0x25, 0x2a, 0xb6, 0x1e, 0x1a, 0x95, 0xd3, 0xb2, 0x41, 0xbc, 0xd0, 0x00, 0xf2, 0x39, 0xcc, 0x73,
	0x14, 0xdc, 0xc3, 0xb8, 0x3a, 0xaf, 0xb0, 0xd3, 0xf2, 0x46, 0x51, 0xf0, 0xbe, 0xd6, 0x0a, 0x4d,
	0x60, 0xe4, 0x31, 0x14, 0x5d, 0xc6, 0x63, 0x3b, 0x52, 0xf6, 0xea, 0x82, 0x11, 0xcb, 0xf9, 0x2c,
	0x0f, 0x18, 0x8f, 0x0d, 0x09, 0xb8, 0x83, 0x6f, 0x72, 0x0f, 0x0a, 0x81, 0xc7, 0x39, 0xe3, 0xd5,
	0x45, 0x45, 0x71, 0x6d, 0x5a, 0xb2, 0x95, 0x23, 0x35, 0x00, 0xf2, 0x0d, 0xac, 0x76, 0xd1, 0x69,
	0x21, 0xb7, 0x03, 0x27, 0xf4, 0xa2, 0x9e, 0xaf, 0xf6, 0x5a, 0x05, 0xc5, 0x73, 0x6b, 0x9a, 0x10,
	0x14, 0x6a, 0x2f, 0x05, 0xa2, 0xa4, 0x7b, 0xc6, 0x56, 0xff, 0x2d, 0x0b, 0xab, 0xa3, 0x95, 0xa2,
	0xaa, 0x8b, 0x50, 0x20, 0x82, 0x3b, 0x61, 0xec, 0x1b, 0x6d, 0x2b, 0xab, 0x29, 0x97, 0xeb, 0x13,
	0x95, 0xfd, 0x80, 0x05, 0x51, 0x4f, 0x60, 0x4b, 0x13, 0xd0, 0x95, 0x14, 0xdc, 0x70, 0x1e, 0xc1,
	0xc0, 0xc8, 0xb8, 0x8d, 0x72, 0x7f, 0x71, 0x35, 0xab, 0x24, 0xfd, 0xe9, 0x94, 0x9d, 0x4c, 0x08,
	0x4f, 0xda, 0x0c, 0xcf, 0x23, 0x95, 0xae, 0x65, 0x31, 0x6a, 0x88, 0x6b, 0xaf, 0xa0, 0x32, 0xe6,
	0x44, 0xae, 0x2b, 0xe9, 0x27, 0xeb, 0x7b, 0x2d, 0xb5, 0x9d, 0x45, 0xa5, 0x66, 0x63, 0x7c, 0xd2,
	0x92, 0x4e, 0x2a, 0x32, 0x3b, 0xc0, 0x38, 0x76, 0x3a, 0xa8, 0xaa, 0x79, 0x91, 0x2e, 0x29, 0xe3,
	0x9e, 0xb6, 0xd5, 0x7d, 0x28, 0xa6, 0x04, 0x43, 0x6a, 0xb0, 0xe0, 0x08, 0x81, 0x41, 0x24, 0x74,
	0x8a, 0xf2, 0x74, 0x30, 0x26, 0xdb, 0x50, 0x89, 0x90, 0xdb, 0x82, 0xf7, 0x07, 0x4a, 0xce, 0xce,
	0x52, 0x72, 0x29, 0x42, 0xfe, 0x82, 0xf7, 0x8d, 0x90, 0xeb, 0x3f, 0xe6, 0x60, 0x79, 0xbc, 0x06,
	0x89, 0x0b, 0x4b, 0xa9, 0xd6, 0x21, 0xd7, 0x95, 0x79, 0xfc, 0xec, 0x02, 0x65, 0x6c, 0x1d, 0xa0,
	0xd7, 0xe9, 0x0a, 0x6c, 0x8d, 0x94, 0x76, 0x9a, 0xb4, 0xf6, 0x73, 0x16, 0x56, 0x27, 0x78, 0x91,
	0x26, 0x14, 0x53, 0x7e, 0x46, 0x16, 0x9b, 0x13, 0x65, 0x41, 0x51, 0x77, 0x4d, 0x8a, 0x6d, 0x9a,
	0x06, 0x91, 0x0d, 0x28, 0x9c, 0x28, 0x6a, 0x95, 0x8f, 0x12, 0x35, 0x23, 0xe2, 0x42, 0x21, 0xee,
	0x1d, 0xc6, 0x28, 0x4c, 0xb7, 0x7b, 0xfa, 0x8e, 0x5b, 0xb2, 0xf6, 0x15, 0xdb, 0xa3, 0x50, 0xf0,
	0x3e, 0x35, 0xd4, 0x84, 0xc0, 0x5c, 0xc4, 0xb8, 0x6e, 0x7e, 0x25, 0xaa, 0xbe, 0x6b, 0xf7, 0xa0,
	0x98, 0x72, 0x25, 0xcb, 0x90, 0x3b, 0xc2, 0xbe, 0xd1, 0x88, 0xfc, 0x24, 0x6b, 0x90, 0x3f, 0x76,
	0xfc, 0x5e, 0x22, 0x09, 0x3d, 0xf8, 0x38, 0x7b, 0x37, 0x53, 0xff, 0x3d, 0x07, 0xe5, 0xd1, 0x8e,
	0x46, 0x76, 0x20, 0xdf, 0x42, 0xdf, 0xe9, 0x9b, 0xe4, 0x34, 0xde, 0xba, 0x17, 0x5a, 0x0f, 0x25,
	0x6c, 0xf7, 0x12, 0xd5, 0x78, 0x49, 0xe4, 0x1c, 0xca, 0x58, 0xb3, 0x17, 0x25, 0xda, 0x96, 0x30,
	0x49, 0xa4, 0xf0, 0xe4, 0x2a, 0x40, 0x84, 0xdc, 0xc5, 0x50, 0x48, 0x59, 0xcb, 0x16, 0x9d, 0xa1,
	0x29, 0x4b, 0xed, 0xa7, 0x0c, 0xe4, 0xd5, 0xda, 0xe4, 0x3e, 0x14, 0xdb, 0xde, 0x29, 0xb6, 0x6c,
	0xbd, 0x83, 0x59, 0x7a, 0xdd, 0xbd, 0x44, 0x41, 0xf9, 0x6b, 0xf4, 0x2e, 0xac, 0xe0, 0x69, 0xc4,
	0x42, 0x0c, 0x85, 0xe7, 0xf8, 0x86, 0x23, 0x37, 0x9b, 0x63, 0x39, 0x85, 0x52, 0x4c, 0xcd, 0x15,
	0xa8, 0xa8, 0x7b, 0x50, 0x51, 0xd8, 0xa2, 0x1f, 0x61, 0xed, 0x2e, 0xe4, 0xd5, 0xb6, 0xc8, 0x35,
	0x28, 0xaa, 0x39, 0xd3, 0x99, 0xe4, 0x41, 0xe6, 0x65, 0x20, 0xd2, 0xa8, 0x9b, 0x44, 0x73, 0x09,
	0x40, 0x97, 0xb2, 0x44, 0x36, 0x37, 0x60, 0x6d, 0xec, 0x9a, 0x52, 0xf6, 0xfa, 0x0f, 0x73, 0x40,
	0xce, 0x36, 0x4b, 0xf2, 0x11, 0x5c, 0xe6, 0x18, 0xb0, 0x63, 0xb4, 0x39, 0xc6, 0x11, 0x0b, 0x63,
	0xb4, 0x75, 0xfb, 0x8c, 0xab, 0x4b, 0x9b, 0xb9, 0xad, 0x45, 0xba, 0xae, 0xa7, 0xa9, 0x99, 0xd5,
	0x14, 0x31, 0x79, 0x93, 0x81, 0xcb, 0xf2, 0x59, 0x15, 0xb6, 0xce, 0x02, 0x4b, 0x4a, 0xd0, 0xbb,
	0x17, 0xea, 0xda, 0xd6, 0xb6, 0x22, 0x1b, 0x5b, 0x46, 0xab, 0x79, 0xdd, 0x99, 0x34, 0x47, 0x3e,
	0x84, 0x8d, 0x41, 0xe8, 0xfa, 0x0e, 0x4d, 0x02, 0x28, 0xab, 0xc8, 0xd7, 0x92, 0xc8, 0xd5, 0x64,
	0x82, 0xfa, 0x1e, 0x36, 0x06, 0x71, 0x8f, 0xa2, 0x2a, 0x2a, 0xec, 0x9d, 0x7f, 0x16, 0x76, 0x7a,
	0x0d, 0x1d, 0xf5, 0x9a, 0x33, 0x61, 0xaa, 0xb6, 0x0b, 0xb5, 0xf3, 0x77, 0x7a, 0x91, 0x62, 0xac,
	0xed, 0xc0, 0x95, 0x73, 0x17, 0xbf, 0x50, 0x55, 0xff, 0x91, 0x05, 0x18, 0xde, 0xe8, 0xe4, 0x29,
	0x94, 0x1c, 0xdf, 0x67, 0x27, 0x36, 0xe3, 0x5e, 0xc7, 0x0b, 0xe5, 0xab, 0x62, 0xd6, 0x6b, 0x6c,
	0x5f, 0x70, 0x2f, 0xec, 0xa8, 0xb7, 0x17, 0x5d, 0x52, 0xe0, 0xaf, 0x34, 0x56, 0x5e, 0x33, 0x9a,
	0x2c, 0x40, 0xd1, 0x65, 0x2d, 0x7d, 0x0f, 0x2e, 0x1a, 0xa7, 0x3d, 0x6d, 0x1b, 0x3a, 0x25, 0x27,
	0x91, 0x4b, 0x39, 0x25, 0xe7, 0x76, 0x03, 0xca, 0xb2, 0x70, 0x52, 0x32, 0x9b, 0x53, 0x5e, 0x25,
	0x6d, 0x4d, 0xdc, 0xee, 0xc0, 0x7c, 0xe0, 0x9c, 0xda, 0x49, 0xe9, 0x4f, 0xbd, 0x7f, 0x0a, 0x81,
	0x73, 0xba, 0xdd, 0x41, 0xb2, 0x03, 0x2b, 0x7a, 0x7d, 0x97, 0x63, 0x4b, 0x17, 0x66, 0x6c, 0xde,
	0x61, 0xb5, 0x33, 0xe8, 0x26, 0x63, 0xfe, 0xd7, 0x32, 0x77, 0x74, 0x59, 0x81, 0x1e, 0x0c, 0x31,
	0xf5, 0x3f, 0xb3, 0x50, 0x4c, 0xbd, 0x4c, 0x49, 0x15, 0x0a, 0x11, 0xc7, 0xb6, 0x77, 0xaa, 0x0f,
	0x62, 0xf7, 0x12, 0x35, 0x63, 0xb2, 0x01, 0x79, 0x3c, 0x75, 0x5c, 0xdd, 0xed, 0xe4, 0x84, 0x1e,
	0x4a, 0x3b, 0xc7, 0x0e, 0x9e, 0xaa, 0x46, 0xa2, 0xec, 0x6a, 0x48, 0x9a, 0x30, 0x9f, 0x6c, 0xbb,
	0xa0, 0x8e, 0x63, 0xeb, 0x2d, 0x64, 0xaa, 0x9f, 0xc7, 0x09, 0x90, 0xbc, 0x82, 0xe5, 0xd7, 0x3d,
	0xe4, 0x7d, 0x3b, 0x72, 0xb8, 0x13, 0xa0, 0x90, 0x64, 0xfa, 0x6c, 0xdf, 0x9f, 0x42, 0xf6, 0x5c,
	0x42, 0x9e, 0x25, 0x88, 0x84, 0xb4, 0xf2, 0x7a, 0xc4, 0x1c, 0x93, 0x4f, 0xa0, 0xa0, 0x8f, 0xf8,
	0x2d, 0x9e, 0x8f, 0x2a, 0x45, 0xca, 0x99, 0x1a, 0x50, 0x73, 0x19, 0xca, 0x91, 0x23, 0xba, 0x76,
	0x1c, 0xa1, 0xeb, 0xb5, 0x3d, 0xe4, 0x75, 0x84, 0x62, 0x4a, 0x56, 0xc3, 0x84, 0x65, 0x46, 0x13,
	0x36, 0x4c, 0x71, 0xf6, 0x6c, 0x8a, 0x27, 0xa5, 0x52, 0xb6, 0x4b, 0xf5, 0x43, 0x43, 0xb7, 0x45,
	0x0e, 0xa5, 0x91, 0x74, 0xc9, 0x2b, 0x33, 0x74, 0x02, 0x34, 0xa5, 0xa3, 0xbe, 0x27, 0xd7, 0x8e,
	0xb4, 0x0e, 0x17, 0x58, 0x48, 0x4e, 0xea, 0x1a, 0x2c, 0x79, 0xe1, 0x31, 0x72, 0xf3, 0x73, 0x46,
	0x75, 0xec, 0x05, 0x5a, 0xd4, 0x36, 0xb5, 0x48, 0xfd, 0x00, 0xd6, 0x27, 0x66, 0xf5, 0x5d, 0xd7,
	0xae, 0xbf, 0xc9, 0x40, 0x41, 0x3f, 0xac, 0xff, 0x95, 0xa7, 0xcb, 0xe8, 0x4d, 0x9a, 0x1d, 0xbf,
	0x49, 0x07, 0xaf, 0x8b, 0xdc, 0xf0, 0x75, 0x51, 0xff, 0x02, 0x60, 0x78, 0xbc, 0xe4, 0xfe, 0x40,
	0x15, 0x32, 0x80, 0xf2, 0x39, 0x3f, 0x16, 0x87, 0x00, 0x5d, 0x58, 0x89, 0x28, 0x0e, 0x7e, 0xfd,
	0xeb, 0x6a, 0xe6, 0xe5, 0xf3, 0x99, 0x7f, 0x29, 0x44, 0x47, 0x9d, 0xb1, 0xbf, 0x15, 0xc6, 0x56,
	0x48, 0xfd, 0xcb, 0xd0, 0x8f, 0x30, 0x3e, 0x2c, 0xa8, 0x6a, 0xfe, 0xe0, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x0e, 0x23, 0x8f, 0xdb, 0xae, 0x10, 0x00, 0x00,
}

func (this *TrafficPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec)
	if !ok {
		that2, ok := that.(TrafficPolicySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceSelector.Equal(that1.SourceSelector) {
		return false
	}
	if !this.DestinationSelector.Equal(that1.DestinationSelector) {
		return false
	}
	if len(this.HttpRequestMatchers) != len(that1.HttpRequestMatchers) {
		return false
	}
	for i := range this.HttpRequestMatchers {
		if !this.HttpRequestMatchers[i].Equal(that1.HttpRequestMatchers[i]) {
			return false
		}
	}
	if !this.TrafficShift.Equal(that1.TrafficShift) {
		return false
	}
	if !this.FaultInjection.Equal(that1.FaultInjection) {
		return false
	}
	if !this.RequestTimeout.Equal(that1.RequestTimeout) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicyStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicyStatus)
	if !ok {
		that2, ok := that.(TrafficPolicyStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TranslationStatus.Equal(that1.TranslationStatus) {
		return false
	}
	if len(this.TranslatorErrors) != len(that1.TranslatorErrors) {
		return false
	}
	for i := range this.TranslatorErrors {
		if !this.TranslatorErrors[i].Equal(that1.TranslatorErrors[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicyStatus_TranslatorError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicyStatus_TranslatorError)
	if !ok {
		that2, ok := that.(TrafficPolicyStatus_TranslatorError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TranslatorId != that1.TranslatorId {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetryPolicy)
	if !ok {
		that2, ok := that.(RetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Attempts != that1.Attempts {
		return false
	}
	if !this.PerTryTimeout.Equal(that1.PerTryTimeout) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MultiDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiDestination)
	if !ok {
		that2, ok := that.(MultiDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MultiDestination_WeightedDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiDestination_WeightedDestination)
	if !ok {
		that2, ok := that.(MultiDestination_WeightedDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if len(this.Subset) != len(that1.Subset) {
		return false
	}
	for i := range this.Subset {
		if this.Subset[i] != that1.Subset[i] {
			return false
		}
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection)
	if !ok {
		that2, ok := that.(FaultInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FaultInjectionType == nil {
		if this.FaultInjectionType != nil {
			return false
		}
	} else if this.FaultInjectionType == nil {
		return false
	} else if !this.FaultInjectionType.Equal(that1.FaultInjectionType) {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay_)
	if !ok {
		that2, ok := that.(FaultInjection_Delay_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delay.Equal(that1.Delay) {
		return false
	}
	return true
}
func (this *FaultInjection_Abort_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort_)
	if !ok {
		that2, ok := that.(FaultInjection_Abort_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Abort.Equal(that1.Abort) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay)
	if !ok {
		that2, ok := that.(FaultInjection_Delay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HttpDelayType == nil {
		if this.HttpDelayType != nil {
			return false
		}
	} else if this.HttpDelayType == nil {
		return false
	} else if !this.HttpDelayType.Equal(that1.HttpDelayType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay_FixedDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay_FixedDelay)
	if !ok {
		that2, ok := that.(FaultInjection_Delay_FixedDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FixedDelay.Equal(that1.FixedDelay) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay_ExponentialDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay_ExponentialDelay)
	if !ok {
		that2, ok := that.(FaultInjection_Delay_ExponentialDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExponentialDelay.Equal(that1.ExponentialDelay) {
		return false
	}
	return true
}
func (this *FaultInjection_Abort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort)
	if !ok {
		that2, ok := that.(FaultInjection_Abort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ErrorType == nil {
		if this.ErrorType != nil {
			return false
		}
	} else if this.ErrorType == nil {
		return false
	} else if !this.ErrorType.Equal(that1.ErrorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection_Abort_HttpStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort_HttpStatus)
	if !ok {
		that2, ok := that.(FaultInjection_Abort_HttpStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpStatus != that1.HttpStatus {
		return false
	}
	return true
}
func (this *HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderManipulation)
	if !ok {
		that2, ok := that.(HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigins) != len(that1.AllowOrigins) {
		return false
	}
	for i := range this.AllowOrigins {
		if !this.AllowOrigins[i].Equal(that1.AllowOrigins[i]) {
			return false
		}
	}
	if len(this.AllowMethods) != len(that1.AllowMethods) {
		return false
	}
	for i := range this.AllowMethods {
		if this.AllowMethods[i] != that1.AllowMethods[i] {
			return false
		}
	}
	if len(this.AllowHeaders) != len(that1.AllowHeaders) {
		return false
	}
	for i := range this.AllowHeaders {
		if this.AllowHeaders[i] != that1.AllowHeaders[i] {
			return false
		}
	}
	if len(this.ExposeHeaders) != len(that1.ExposeHeaders) {
		return false
	}
	for i := range this.ExposeHeaders {
		if this.ExposeHeaders[i] != that1.ExposeHeaders[i] {
			return false
		}
	}
	if !this.MaxAge.Equal(that1.MaxAge) {
		return false
	}
	if !this.AllowCredentials.Equal(that1.AllowCredentials) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpMatcher)
	if !ok {
		that2, ok := that.(HttpMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PathSpecifier == nil {
		if this.PathSpecifier != nil {
			return false
		}
	} else if this.PathSpecifier == nil {
		return false
	} else if !this.PathSpecifier.Equal(that1.PathSpecifier) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if len(this.QueryParameters) != len(that1.QueryParameters) {
		return false
	}
	for i := range this.QueryParameters {
		if !this.QueryParameters[i].Equal(that1.QueryParameters[i]) {
			return false
		}
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpMatcher_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpMatcher_Prefix)
	if !ok {
		that2, ok := that.(HttpMatcher_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *HttpMatcher_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpMatcher_Exact)
	if !ok {
		that2, ok := that.(HttpMatcher_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *HttpMatcher_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpMatcher_Regex)
	if !ok {
		that2, ok := that.(HttpMatcher_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *StringMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch)
	if !ok {
		that2, ok := that.(StringMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MatchType == nil {
		if this.MatchType != nil {
			return false
		}
	} else if this.MatchType == nil {
		return false
	} else if !this.MatchType.Equal(that1.MatchType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StringMatch_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch_Exact)
	if !ok {
		that2, ok := that.(StringMatch_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *StringMatch_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch_Prefix)
	if !ok {
		that2, ok := that.(StringMatch_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *StringMatch_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch_Regex)
	if !ok {
		that2, ok := that.(StringMatch_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *HeaderMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcher)
	if !ok {
		that2, ok := that.(HeaderMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if this.InvertMatch != that1.InvertMatch {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QueryParameterMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParameterMatcher)
	if !ok {
		that2, ok := that.(QueryParameterMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Mirror) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mirror)
	if !ok {
		that2, ok := that.(Mirror)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpMethod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpMethod)
	if !ok {
		that2, ok := that.(HttpMethod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
