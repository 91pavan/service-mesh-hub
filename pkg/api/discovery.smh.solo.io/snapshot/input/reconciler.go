// Code generated by skv2. DO NOT EDIT.

// The Input Reconciler calls a simple func() error whenever a
// storage event is received for any of:
// * ConfigMaps
// * Services
// * Pods
// * Deployments
// * ReplicaSets
// * DaemonSets
// * StatefulSets
// for a given cluster or set of clusters.
//
// Input Reconcilers can be be constructed from either a single Manager (watch events in a single cluster)
// or a ClusterWatcher (watch events in multiple clusters).
package input

import (
	"context"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"github.com/solo-io/skv2/pkg/reconcile"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/manager"

	v1_controllers "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/controller"
	v1 "k8s.io/api/core/v1"

	apps_v1_controllers "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/controller"
	apps_v1 "k8s.io/api/apps/v1"
)

// the multiClusterReconciler reconciles events for input resources across clusters
type multiClusterReconciler interface {
	v1_controllers.MulticlusterConfigMapReconciler
	v1_controllers.MulticlusterServiceReconciler
	v1_controllers.MulticlusterPodReconciler

	apps_v1_controllers.MulticlusterDeploymentReconciler
	apps_v1_controllers.MulticlusterReplicaSetReconciler
	apps_v1_controllers.MulticlusterDaemonSetReconciler
	apps_v1_controllers.MulticlusterStatefulSetReconciler
}

var _ multiClusterReconciler = &multiClusterReconcilerImpl{}

type multiClusterReconcilerImpl struct {
	ctx           context.Context
	reconcileFunc func(metav1.Object) error
}

// register the reconcile func with the cluster watcher
func RegisterMultiClusterReconciler(
	ctx context.Context,
	clusters multicluster.ClusterWatcher,
	reconcileFunc func(metav1.Object) error,
) {
	r := &multiClusterReconcilerImpl{
		ctx:           ctx,
		reconcileFunc: reconcileFunc,
	}

	// initialize reconcile loops

	v1_controllers.NewMulticlusterConfigMapReconcileLoop("ConfigMap", clusters).AddMulticlusterConfigMapReconciler(ctx, r)
	v1_controllers.NewMulticlusterServiceReconcileLoop("Service", clusters).AddMulticlusterServiceReconciler(ctx, r)
	v1_controllers.NewMulticlusterPodReconcileLoop("Pod", clusters).AddMulticlusterPodReconciler(ctx, r)

	apps_v1_controllers.NewMulticlusterDeploymentReconcileLoop("Deployment", clusters).AddMulticlusterDeploymentReconciler(ctx, r)
	apps_v1_controllers.NewMulticlusterReplicaSetReconcileLoop("ReplicaSet", clusters).AddMulticlusterReplicaSetReconciler(ctx, r)
	apps_v1_controllers.NewMulticlusterDaemonSetReconcileLoop("DaemonSet", clusters).AddMulticlusterDaemonSetReconciler(ctx, r)
	apps_v1_controllers.NewMulticlusterStatefulSetReconcileLoop("StatefulSet", clusters).AddMulticlusterStatefulSetReconciler(ctx, r)
}

func (r *multiClusterReconcilerImpl) ReconcileConfigMap(clusterName string, obj *v1.ConfigMap) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *multiClusterReconcilerImpl) ReconcileService(clusterName string, obj *v1.Service) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *multiClusterReconcilerImpl) ReconcilePod(clusterName string, obj *v1.Pod) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *multiClusterReconcilerImpl) ReconcileDeployment(clusterName string, obj *apps_v1.Deployment) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *multiClusterReconcilerImpl) ReconcileReplicaSet(clusterName string, obj *apps_v1.ReplicaSet) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *multiClusterReconcilerImpl) ReconcileDaemonSet(clusterName string, obj *apps_v1.DaemonSet) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *multiClusterReconcilerImpl) ReconcileStatefulSet(clusterName string, obj *apps_v1.StatefulSet) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "cluster", clusterName, "obj", obj)
	obj.ClusterName = clusterName
	return reconcile.Result{}, r.reconcileFunc(obj)
}

// the singleClusterReconciler reconciles events for input resources across clusters
type singleClusterReconciler interface {
	v1_controllers.ConfigMapReconciler
	v1_controllers.ServiceReconciler
	v1_controllers.PodReconciler

	apps_v1_controllers.DeploymentReconciler
	apps_v1_controllers.ReplicaSetReconciler
	apps_v1_controllers.DaemonSetReconciler
	apps_v1_controllers.StatefulSetReconciler
}

var _ singleClusterReconciler = &singleClusterReconcilerImpl{}

type singleClusterReconcilerImpl struct {
	ctx           context.Context
	reconcileFunc func(metav1.Object) error
}

// register the reconcile func with the manager
func RegisterSingleClusterReconciler(
	ctx context.Context,
	mgr manager.Manager,
	reconcileFunc func(metav1.Object) error,
) error {
	r := &singleClusterReconcilerImpl{
		ctx:           ctx,
		reconcileFunc: reconcileFunc,
	}

	// initialize reconcile loops

	if err := v1_controllers.NewConfigMapReconcileLoop("ConfigMap", mgr, reconcile.Options{}).RunConfigMapReconciler(ctx, r); err != nil {
		return err
	}
	if err := v1_controllers.NewServiceReconcileLoop("Service", mgr, reconcile.Options{}).RunServiceReconciler(ctx, r); err != nil {
		return err
	}
	if err := v1_controllers.NewPodReconcileLoop("Pod", mgr, reconcile.Options{}).RunPodReconciler(ctx, r); err != nil {
		return err
	}

	if err := apps_v1_controllers.NewDeploymentReconcileLoop("Deployment", mgr, reconcile.Options{}).RunDeploymentReconciler(ctx, r); err != nil {
		return err
	}
	if err := apps_v1_controllers.NewReplicaSetReconcileLoop("ReplicaSet", mgr, reconcile.Options{}).RunReplicaSetReconciler(ctx, r); err != nil {
		return err
	}
	if err := apps_v1_controllers.NewDaemonSetReconcileLoop("DaemonSet", mgr, reconcile.Options{}).RunDaemonSetReconciler(ctx, r); err != nil {
		return err
	}
	if err := apps_v1_controllers.NewStatefulSetReconcileLoop("StatefulSet", mgr, reconcile.Options{}).RunStatefulSetReconciler(ctx, r); err != nil {
		return err
	}

	return nil
}

func (r *singleClusterReconcilerImpl) ReconcileConfigMap(obj *v1.ConfigMap) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *singleClusterReconcilerImpl) ReconcileService(obj *v1.Service) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *singleClusterReconcilerImpl) ReconcilePod(obj *v1.Pod) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *singleClusterReconcilerImpl) ReconcileDeployment(obj *apps_v1.Deployment) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *singleClusterReconcilerImpl) ReconcileReplicaSet(obj *apps_v1.ReplicaSet) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *singleClusterReconcilerImpl) ReconcileDaemonSet(obj *apps_v1.DaemonSet) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}

func (r *singleClusterReconcilerImpl) ReconcileStatefulSet(obj *apps_v1.StatefulSet) (reconcile.Result, error) {
	contextutils.LoggerFrom(r.ctx).Debugw("reconciling event", "obj", obj)
	return reconcile.Result{}, r.reconcileFunc(obj)
}
