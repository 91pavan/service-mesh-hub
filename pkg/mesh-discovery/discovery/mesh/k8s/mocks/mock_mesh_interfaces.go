// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_mesh is a generated GoMock package.
package mock_mesh

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1"
	v1 "k8s.io/api/apps/v1"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMeshFinder is a mock of MeshFinder interface.
type MockMeshFinder struct {
	ctrl     *gomock.Controller
	recorder *MockMeshFinderMockRecorder
}

// MockMeshFinderMockRecorder is the mock recorder for MockMeshFinder.
type MockMeshFinderMockRecorder struct {
	mock *MockMeshFinder
}

// NewMockMeshFinder creates a new mock instance.
func NewMockMeshFinder(ctrl *gomock.Controller) *MockMeshFinder {
	mock := &MockMeshFinder{ctrl: ctrl}
	mock.recorder = &MockMeshFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshFinder) EXPECT() *MockMeshFinderMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockMeshFinder) Process(ctx context.Context, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockMeshFinderMockRecorder) Process(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockMeshFinder)(nil).Process), ctx, clusterName)
}

// MockMeshScanner is a mock of MeshScanner interface.
type MockMeshScanner struct {
	ctrl     *gomock.Controller
	recorder *MockMeshScannerMockRecorder
}

// MockMeshScannerMockRecorder is the mock recorder for MockMeshScanner.
type MockMeshScannerMockRecorder struct {
	mock *MockMeshScanner
}

// NewMockMeshScanner creates a new mock instance.
func NewMockMeshScanner(ctrl *gomock.Controller) *MockMeshScanner {
	mock := &MockMeshScanner{ctrl: ctrl}
	mock.recorder = &MockMeshScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshScanner) EXPECT() *MockMeshScannerMockRecorder {
	return m.recorder
}

// ScanDeployment mocks base method.
func (m *MockMeshScanner) ScanDeployment(ctx context.Context, clusterName string, deployment *v1.Deployment, clusterScopedClient client.Client) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDeployment", ctx, clusterName, deployment, clusterScopedClient)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanDeployment indicates an expected call of ScanDeployment.
func (mr *MockMeshScannerMockRecorder) ScanDeployment(ctx, clusterName, deployment, clusterScopedClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDeployment", reflect.TypeOf((*MockMeshScanner)(nil).ScanDeployment), ctx, clusterName, deployment, clusterScopedClient)
}
