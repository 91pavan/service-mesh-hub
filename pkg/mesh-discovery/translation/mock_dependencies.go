// Code generated by MockGen. DO NOT EDIT.
// Source: ./dependencies.go

// Package translation is a generated GoMock package.
package translation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/sets"
	v1sets0 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	mesh "github.com/solo-io/service-mesh-hub/pkg/mesh-discovery/translation/mesh"
	meshservice "github.com/solo-io/service-mesh-hub/pkg/mesh-discovery/translation/meshservice"
	meshworkload "github.com/solo-io/service-mesh-hub/pkg/mesh-discovery/translation/meshworkload"
)

// MockdependencyFactory is a mock of dependencyFactory interface.
type MockdependencyFactory struct {
	ctrl     *gomock.Controller
	recorder *MockdependencyFactoryMockRecorder
}

// MockdependencyFactoryMockRecorder is the mock recorder for MockdependencyFactory.
type MockdependencyFactoryMockRecorder struct {
	mock *MockdependencyFactory
}

// NewMockdependencyFactory creates a new mock instance.
func NewMockdependencyFactory(ctrl *gomock.Controller) *MockdependencyFactory {
	mock := &MockdependencyFactory{ctrl: ctrl}
	mock.recorder = &MockdependencyFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdependencyFactory) EXPECT() *MockdependencyFactoryMockRecorder {
	return m.recorder
}

// makeMeshTranslator mocks base method.
func (m *MockdependencyFactory) makeMeshTranslator(ctx context.Context, configMaps v1sets0.ConfigMapSet) mesh.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "makeMeshTranslator", ctx, configMaps)
	ret0, _ := ret[0].(mesh.Translator)
	return ret0
}

// makeMeshTranslator indicates an expected call of makeMeshTranslator.
func (mr *MockdependencyFactoryMockRecorder) makeMeshTranslator(ctx, configMaps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeMeshTranslator", reflect.TypeOf((*MockdependencyFactory)(nil).makeMeshTranslator), ctx, configMaps)
}

// makeMeshWorkloadTranslator mocks base method.
func (m *MockdependencyFactory) makeMeshWorkloadTranslator(ctx context.Context, pods v1sets0.PodSet, replicaSets v1sets.ReplicaSetSet) meshworkload.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "makeMeshWorkloadTranslator", ctx, pods, replicaSets)
	ret0, _ := ret[0].(meshworkload.Translator)
	return ret0
}

// makeMeshWorkloadTranslator indicates an expected call of makeMeshWorkloadTranslator.
func (mr *MockdependencyFactoryMockRecorder) makeMeshWorkloadTranslator(ctx, pods, replicaSets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeMeshWorkloadTranslator", reflect.TypeOf((*MockdependencyFactory)(nil).makeMeshWorkloadTranslator), ctx, pods, replicaSets)
}

// makeMeshServiceTranslator mocks base method.
func (m *MockdependencyFactory) makeMeshServiceTranslator() meshservice.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "makeMeshServiceTranslator")
	ret0, _ := ret[0].(meshservice.Translator)
	return ret0
}

// makeMeshServiceTranslator indicates an expected call of makeMeshServiceTranslator.
func (mr *MockdependencyFactoryMockRecorder) makeMeshServiceTranslator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeMeshServiceTranslator", reflect.TypeOf((*MockdependencyFactory)(nil).makeMeshServiceTranslator))
}
