// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/mesh-projects/pkg/auth (interfaces: RbacClient)

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/rbac/v1"
)

// MockRbacClient is a mock of RbacClient interface
type MockRbacClient struct {
	ctrl     *gomock.Controller
	recorder *MockRbacClientMockRecorder
}

// MockRbacClientMockRecorder is the mock recorder for MockRbacClient
type MockRbacClientMockRecorder struct {
	mock *MockRbacClient
}

// NewMockRbacClient creates a new mock instance
func NewMockRbacClient(ctrl *gomock.Controller) *MockRbacClient {
	mock := &MockRbacClient{ctrl: ctrl}
	mock.recorder = &MockRbacClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRbacClient) EXPECT() *MockRbacClientMockRecorder {
	return m.recorder
}

// BindClusterRolesToServiceAccount mocks base method
func (m *MockRbacClient) BindClusterRolesToServiceAccount(arg0 *v1.ServiceAccount, arg1 []*v10.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindClusterRolesToServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindClusterRolesToServiceAccount indicates an expected call of BindClusterRolesToServiceAccount
func (mr *MockRbacClientMockRecorder) BindClusterRolesToServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindClusterRolesToServiceAccount", reflect.TypeOf((*MockRbacClient)(nil).BindClusterRolesToServiceAccount), arg0, arg1)
}
