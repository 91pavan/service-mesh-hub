// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/mesh-projects/pkg/auth (interfaces: RemoteAuthorityManager)

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/rbac/v1"
)

// MockRemoteAuthorityManager is a mock of RemoteAuthorityManager interface
type MockRemoteAuthorityManager struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteAuthorityManagerMockRecorder
}

// MockRemoteAuthorityManagerMockRecorder is the mock recorder for MockRemoteAuthorityManager
type MockRemoteAuthorityManagerMockRecorder struct {
	mock *MockRemoteAuthorityManager
}

// NewMockRemoteAuthorityManager creates a new mock instance
func NewMockRemoteAuthorityManager(ctrl *gomock.Controller) *MockRemoteAuthorityManager {
	mock := &MockRemoteAuthorityManager{ctrl: ctrl}
	mock.recorder = &MockRemoteAuthorityManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteAuthorityManager) EXPECT() *MockRemoteAuthorityManagerMockRecorder {
	return m.recorder
}

// ApplyRemoteServiceAccount mocks base method
func (m *MockRemoteAuthorityManager) ApplyRemoteServiceAccount(arg0 *core.ResourceRef, arg1 []*v10.ClusterRole) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyRemoteServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyRemoteServiceAccount indicates an expected call of ApplyRemoteServiceAccount
func (mr *MockRemoteAuthorityManagerMockRecorder) ApplyRemoteServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyRemoteServiceAccount", reflect.TypeOf((*MockRemoteAuthorityManager)(nil).ApplyRemoteServiceAccount), arg0, arg1)
}
