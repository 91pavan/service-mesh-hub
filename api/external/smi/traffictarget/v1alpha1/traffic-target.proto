syntax = "proto3";
package smi.traffictarget.v1alpha1;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/external/smi/traffictarget/v1alpha1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

import "solo-kit/api/v1/metadata.proto";
import "solo-kit/api/v1/solo-kit.proto";
import "solo-kit/api/v1/status.proto";

// Matches https://github.com/deislabs/smi-sdk-go/blob/master/pkg/apis/access/v1alpha1/traffic_target.go

// TrafficTarget associates a set of traffic definitions (rules) with a service identity which is allocated to a group of pods.
// Access is controlled via referenced TrafficSpecs and by a list of source service identities.
// * If a pod which holds the referenced service identity makes a call to the destination on one of the defined routes then access
//   will be allowed
// * Any pod which attempts to connect and is not in the defined list of sources will be denied
// * Any pod which is in the defined list, but attempts to connect on a route which is not in the list of the
//   TrafficSpecs will be denied
message TrafficTarget {
    option (core.solo.io.resource).short_name = "traffictarget";
    option (core.solo.io.resource).plural_name = "traffictargets";

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 1 [(gogoproto.nullable) = false];

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by controllers during validation
    core.solo.io.Status status = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Destination is the pod or group of pods to allow ingress traffic
    IdentityBindingSubject destination = 3;

    // Sources are the pod or group of pods to allow ingress traffic
    repeated IdentityBindingSubject sources = 4;

    // Rules are the traffic rules to allow (HTTPRoutes | TCPRoute),
    repeated TrafficTargetSpec specs = 5;
}

// TrafficTargetSpec is the TrafficSpec to allow for a TrafficTarget
message TrafficTargetSpec {
    // Kind is the kind of TrafficSpec to allow
    string kind = 1;
    // Name of the TrafficSpec to use
    string name = 2;
    // Matches is a list of TrafficSpec routes to allow traffic for
    repeated string matches = 3;
}

// IdentityBindingSubject is a Kubernetes objects which should be allowed access to the TrafficTarget
message IdentityBindingSubject {
	// Kind is the type of Subject to allow ingress (ServiceAccount | Group)
    string kind = 1;
    // Name of the Subject, i.e. ServiceAccountName
    string name = 2;
    // Namespace where the Subject is deployed
    string namespace = 3;
    // Port defines a TCP port to apply the TrafficTarget to
    string port = 4;
}
