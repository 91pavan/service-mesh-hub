syntax = "proto3";
package smi.httproutegroup.v1alpha1;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/external/smi/httproutegroup/v1alpha1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";

// Matches https://github.com/deislabs/smi-sdk-go/blob/master/pkg/apis/specs/v1alpha1/http_route.go

// HTTPRouteGroup is used to describe HTTP/1 and HTTP/2 traffic.
// It enumerates the routes that can be served by an application.
message HTTPRouteGroup {
    option (core.solo.io.resource).short_name = "httproutegroup";
    option (core.solo.io.resource).plural_name = "httproutegroups";

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 101 [(gogoproto.nullable) = false];

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by supergloo during validation
    core.solo.io.Status status = 100 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Routes for inbound traffic
    repeated HTTPMatch matches = 1;
}

message HTTPMatch {
    // Name is the name of the match for referencing in a TrafficTarget
    string name = 1;
    // Methods for inbound traffic as defined in RFC 7231
    // https://tools.ietf.org/html/rfc7231#section-4
    repeated string methods = 2;
    // PathRegex is a regular expression defining the route
    string pathRegex = 3;
}
