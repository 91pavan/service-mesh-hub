syntax = "proto3";
package core.zephyr.solo.io;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types";

import "google/protobuf/wrappers.proto";
import "mesh-projects/api/core/v1alpha1/ref.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    Global selector used to select resources from any set of clusters, namespaces, and/or labels

    Specifies a method by which to select pods within a mesh for the application of rules and policies.

    Only one of (labels + namespaces + cluster) or (resource refs) may be provided. If all four are provided, it will be
    considered an error, and the Status of the top level resource will be updated to reflect an IllegalSelection.

    Currently only selection on the local cluster is supported, indicated by a nil cluster field.

    Valid:
        1.
            selector:
                labels:
                    foo: bar
                    hello: world
                namespaces:
                - default
                cluster: "cluster-name"
        2.
            selector:
                refs:
                - name: foo
                  namespace: bar

    Invalid:
        1.
            selector:
                labels:
                    foo: bar
                    hello: world
                namespaces:
                - default
                cluster: "cluster-name"
                refs:
                - name: foo
                  namespace: bar

    By default labels will select across all namespaces, unless a list of namespaces is provided, in which case
    it will only select from those. An empty or nil list is equal to AllNamespaces.

    If no labels are given, and only namespaces, the full list of resources from the namespace will be selected.

    The following selector will select all resources with the following labels in every namespace, in the local cluster:

    selector:
        labels:
            foo: bar
            hello: world

    Whereas the next selector will only select from the specified namespaces (foo, bar), in the local cluster:

    selector:
        labels:
            foo: bar
            hello: world
        namespaces
        - foo
        - bar

    This final selector will select all resources of a given type in the target namespace (foo), in the local cluster:

    selector
        namespaces
        - foo
        - bar
        labels:
            hello: world


*/
message ServiceSelector {
    message Matcher {
        // If specified, all labels must exist on k8s Service, else match on any labels.
        map<string, string> labels = 1;
        // If specified, match k8s Services if they exist in one of the specified namespaces. If not specified, match on any namespace.
        repeated string namespaces = 2;
        // If specified, match k8s Services if they exist in one of the specified clusters. If not specified, match on any cluster.
        repeated string clusters = 3;
    }

    message ServiceRefs {
        // Match k8s Services by direct reference.
        repeated ResourceRef services = 1;
    }

    // If specified, select services using either a Matcher or direct reference. If not set, select all Services.
    oneof service_selector_type {
        Matcher matcher = 1;
        ServiceRefs service_refs = 2;
    }
}

/*
    Selector capable of selecting specific service identities. Useful for binding policy rules.
    Either (namespaces, cluster, service_account_names) or service_accounts can be specified.
    If all fields are omitted, any source identity is permitted.
*/
message IdentitySelector {
    message Matcher {
        // Namespaces to allow. If not set, any namespace is allowed.
        repeated string namespaces = 1;
        // Cluster to allow. If not set, any cluster is allowed.
        repeated string clusters = 2;
    }
    message ServiceAccountRefs {
        // List of ServiceAccounts to allow. If not set, any ServiceAccount is allowed.
        repeated ResourceRef service_accounts = 1;
    }
    oneof identity_selector_type {
        Matcher matcher = 1;
        ServiceAccountRefs service_account_refs = 2;
    }
}
