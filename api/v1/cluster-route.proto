syntax = "proto3";
package zephyr.solo.io;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/metadata.proto";

import "github.com/solo-io/mesh-projects/api/v1/core/ref.proto";

message MeshBridge {
    option (core.solo.io.resource).short_name = "mb";
    option (core.solo.io.resource).plural_name = "mesh_bridges";


    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 2 [(gogoproto.nullable) = false];

    // Source mesh from which to create the bridge
    core.zephyr.solo.io.ClusterResourceRef source_mesh = 3;
    // Target mesh to which the bridge will be pointing
    core.zephyr.solo.io.ClusterResourceRef target_mesh = 4;

    // Namespace in which to find gloo in the target mesh cluster
    string gloo_namespace = 5;

    /*
        Source service which will be using the bridge.
        Currently a string as it assumes that the service which will need
        this bridge is located in the same namespace as the bridge object.
    */
    string source = 6;

    /*
        Target service in a different mesh to which this bridge will allow
        traffic from the source service.

        This source pointer is important as the name of this service
        (e.g. `gloo.gloo-system.svc.cluster.local`) is translated into
        `gloo.gloo-system.global`. Which allows is to be routed to and
        understood by istio as being in a foreign cluster, or other
        non-local space.
    */
    core.zephyr.solo.io.ClusterResourceRef target = 7;
}
