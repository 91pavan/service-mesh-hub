syntax = "proto3";
package zephyr.solo.io;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/v1";

import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
option (gogoproto.equal_all) = true;

// Configure RBAC properties on the mesh
message RbacMode {
    // Disable indicates that RBAC policies should not be enforced
    // Compatibility: [only: istio]
    message Disable {
    }

    // Enable mode tells the mesh to evaluate any policies that are defined
    // Compatibility: [only: istio]
    message Enable {
    }

    // Mode describes the desired RBAC behavior an optionally takes mode-specific configuration
    // implementation note: using oneof instead of enum since future modes may accept config
    oneof mode {
        // Disable enforcement of RBAC policies.
        Disable disable = 1;
        // Use RBAC to isolate all services, preventing any communication between services.
        Enable enable = 2;
    }

    // Set by operator
    // - Initialized as pending.
    // - If isolation cannot be expressed, an error code corresponding to the reason is reported.
    // - If isolation can be expressed, an "OK" status code is reported.
    RbacStatus status = 4 [(core.solo.io.skip_hashing) = true];
}

// if RBAC policies have been specified, service isolation will not work as expected.
// Istio, the model for this feature, has an exclude-by-default behavior. If RBAC is enabled, services can only
// do what the RBAC policy allows them to do. This means that in the special case of
enum RbacStatusCode {

    // Initial value, will be replaced as soon as operator evaluates the config
    PENDING_VERIFICATION = 0;

    // Config was applied successfully
    OK = 1;

    // If a mesh does not support the provided configuration, this error code is returned.
    ERROR_RBAC_MODE_NOT_SUPPORTED_BY_MESH = 2;

    // If other policies exist, we lose the ability to have total ON vs. OFF control of RBAC. Isolation is not supported
    // in this case.
    ERROR_CANNOT_ISOLATE_RBAC_SINCE_POLICIES_EXIST = 3;

    // If the config is not accepted for any other reason, this code is returned
    ERROR_CONFIG_NOT_ACCEPTED = 4;
}

message RbacStatus {

    // Status code summarizing Rbac Config acceptance state
    RbacStatusCode code = 1;

    // As needed according to the status code, this message will surface any relevant configuration details or issues.
    string message = 2;
}
