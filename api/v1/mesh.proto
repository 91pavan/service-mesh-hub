syntax = "proto3";
package zephyr.solo.io;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

import "solo-kit/api/v1/metadata.proto";
import "solo-kit/api/v1/status.proto";
import "solo-kit/api/v1/ref.proto";
import "solo-kit/api/v1/solo-kit.proto";
import "mesh-projects/api/v1/selector.proto";
import "mesh-projects/api/v1/rbac.proto";

import "mesh-projects/api/v1/core/ref.proto";

/*
Meshes represent a currently registered service mesh.
*/
message Mesh {

    option (core.solo.io.resource).short_name = "m";
    option (core.solo.io.resource).plural_name = "meshes";

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by mesh-discovery during validation
    core.solo.io.Status status = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 2 [(gogoproto.nullable) = false];

    oneof mesh_type {
        IstioMesh istio = 3;
        AwsAppMesh aws_app_mesh = 4;
        LinkerdMesh linkerd = 5;
        ConsulConnectMesh consul_connect = 12;
    }
}

message MeshInstallation {
    // where the control plane has been installed
    string installation_namespace = 1;

    // version of the mesh which has been installed
    string version = 2;
}

// Mesh object representing an installed Istio control plane
message IstioMesh {
    MeshInstallation installation = 1;
}

// Mesh object representing AWS App Mesh
message AwsAppMesh {
    // The AWS region the AWS App Mesh control plane resources exist in.
    string region = 1;
}

// Mesh object representing an installed Linkerd control plane
message LinkerdMesh {
    MeshInstallation installation = 1;
}

message ConsulConnectMesh {
    MeshInstallation installation = 1;
}

// the encryption configuration that will be applied by the role
message MtlsConfig {

    // whether or not mutual TLS should be enabled between pods in this mesh
    bool mtls_enabled = 1;

    // Connection can be either plaintext or TLS, and client cert can be omitted
    // this is true by default for Linkerd
    bool mtls_permissive = 2;

    // if set, rootCertificate will override the root certificate used by the mesh
    // to encrypt mtls connections.
    //
    // The structure of the secret must be a standard kubernetes TLS secret
    // such as can be created via `kubectl create secret tls`
    //
    // if mtlsEnabled is false, this field is ignored
    // If deploying to Consul, Consul Connect requires that the cert and key are generated using ec, not rsa.
    core.solo.io.ResourceRef root_certificate = 3;
}

// Contains configuration options for monitoring a mesh
// Currently MonitoringConfig only contains options for configuring
// an in-cluster Prometheus instance to scrape a mesh for metrics
message MonitoringConfig {
    // indicates to mesh-discovery that metrics should be propagated to one or more instances of prometheus.
    // add a [`core.solo.io.ResourceRef`](../../../../solo-kit/api/v1/ref.proto.sk#ResourceRef) for each
    // NAMESPACE.NAME of the configmap used to configure each prometheus instance.
    // assumes that the configmap contains a key named `prometheus.yml` or `prometheus.yaml` whose value
    // is the prometheus yaml config as an inline string
    repeated core.solo.io.ResourceRef prometheus_configmaps = 1 [(gogoproto.nullable) = false];
}

message MeshGroup {

    option (core.solo.io.resource).short_name = "mg";
    option (core.solo.io.resource).plural_name = "meshgroups";

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by mesh-discovery during validation
    core.solo.io.Status status = 100 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 101 [(gogoproto.nullable) = false];

    // User-provided display name for the mesh group.
    string display_name = 1;

    // The meshes contained in this group.
    repeated core.solo.io.ResourceRef meshes = 3;

}
