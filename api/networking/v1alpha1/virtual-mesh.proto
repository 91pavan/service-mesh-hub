syntax = "proto3";
package networking.zephyr.solo.io;
option go_package = "github.com/solo-io/mesh-projects/pkg/api/networking.zephyr.solo.io/v1alpha1/types";

import "mesh-projects/api/core/v1alpha1/ref.proto";
import "mesh-projects/api/core/v1alpha1/health.proto";
import "mesh-projects/api/core/v1alpha1/status.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

message VirtualMeshSpec {
    /*
        Shared trust is a virtual mesh trust model requiring a shared root certificate, as well as shared identity
        between all entities which wish to communicate within the virtual mesh.

        The best current example of this would be the replicated control planes example from istio:
        https://preliminary.istio.io/docs/setup/install/multicluster/gateways/
    */
    message SharedTrust {}

    /*
        Limited trust is a virtual mesh trust model which does not require all meshes sharing the same root certificate
        or identity model. But rather, the limited trust creates trust between meshes running on different clusters
        by connecting their ingress/egress gateways with a common cert/identity. In this model all requests
        between different have the following request path when communicating between clusters

                        cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
        client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server

        This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
        addition of additional clusters into a virtual mesh.
    */
    message LimitedTrust {}

    // User-provided display name for the virtual mesh.
    string display_name = 1;

    // The meshes contained in this virtual mesh.
    repeated core.zephyr.solo.io.ResourceRef meshes = 2;

    CertificateAuthority certificate_authority = 3;

    Federation federation = 4;

    oneof trust_model {
        SharedTrust shared = 5;
        LimitedTrust limited = 6;
    }

    /*
        If true, by default disallow traffic to all Services in the VirtualMesh unless explicitly allowed through AccessControlPolicies.
        If false, by default allow traffic to all Services in the VirtualMesh.
        Defaults to false when not set.
    */
    bool enforce_access_control = 7;
}

message CertificateAuthority {
    /*
        Configuration for auto-generated root certificate unique to the VirtualMesh
        Uses the X.509 format, RFC5280
    */
    message Builtin {
        // Number of days before root cert expires. Defaults to 365.
        uint32 ttl_days = 1;
        // Size in bytes of the root cert's private key. Defaults to 4096
        uint32 rsa_key_size_bytes = 2;
        // Root cert organization name. Defaults to "service-mesh-hub"
        string org_name = 3;
    }

    // Configuration for user-provided root certificate
    message Provided {
        /* Resource reference for a Secret object containing the root certificate
           certificate:
                name: cacerts
                namespace: service-mesh-hub (default write namespace)
        */
        core.zephyr.solo.io.ResourceRef certificate = 3;
    }

    // If omitted, defaults to builtin
    oneof type {
        // Use auto-generated root certificate
        Builtin builtin = 1;

        // Use user-provided root certificate
        Provided provided = 2;
    }
}

message Federation {
    enum Mode {
        // federate everything to everybody
        PERMISSIVE = 0;
    }

    Mode mode = 1;
}

message VirtualMeshStatus {
    core.zephyr.solo.io.ComputedStatus federation_status = 1;

    core.zephyr.solo.io.ComputedStatus certificate_status = 2;

    core.zephyr.solo.io.ComputedStatus config_status = 3;

    core.zephyr.solo.io.ComputedStatus access_control_enforcement_status = 4;
}
