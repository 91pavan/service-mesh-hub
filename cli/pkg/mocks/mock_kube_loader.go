// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/mesh-projects/cli/pkg/common (interfaces: KubeLoader)

// Package cli_mocks is a generated GoMock package.
package cli_mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/solo-io/mesh-projects/cli/pkg/common"
	rest "k8s.io/client-go/rest"
)

// MockKubeLoader is a mock of KubeLoader interface
type MockKubeLoader struct {
	ctrl     *gomock.Controller
	recorder *MockKubeLoaderMockRecorder
}

// MockKubeLoaderMockRecorder is the mock recorder for MockKubeLoader
type MockKubeLoaderMockRecorder struct {
	mock *MockKubeLoader
}

// NewMockKubeLoader creates a new mock instance
func NewMockKubeLoader(ctrl *gomock.Controller) *MockKubeLoader {
	mock := &MockKubeLoader{ctrl: ctrl}
	mock.recorder = &MockKubeLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeLoader) EXPECT() *MockKubeLoaderMockRecorder {
	return m.recorder
}

// GetRestConfig mocks base method
func (m *MockKubeLoader) GetRestConfig(arg0 string) (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestConfig", arg0)
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestConfig indicates an expected call of GetRestConfig
func (mr *MockKubeLoaderMockRecorder) GetRestConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestConfig", reflect.TypeOf((*MockKubeLoader)(nil).GetRestConfig), arg0)
}

// ParseContext mocks base method
func (m *MockKubeLoader) ParseContext(arg0 string) (*common.KubeContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseContext", arg0)
	ret0, _ := ret[0].(*common.KubeContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseContext indicates an expected call of ParseContext
func (mr *MockKubeLoaderMockRecorder) ParseContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseContext", reflect.TypeOf((*MockKubeLoader)(nil).ParseContext), arg0)
}
