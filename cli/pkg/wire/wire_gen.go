// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"
	"io"

	"github.com/solo-io/go-utils/installutils/helminstall"
	cli "github.com/solo-io/mesh-projects/cli/pkg"
	"github.com/solo-io/mesh-projects/cli/pkg/common"
	common_config "github.com/solo-io/mesh-projects/cli/pkg/common/config"
	"github.com/solo-io/mesh-projects/cli/pkg/common/kube"
	"github.com/solo-io/mesh-projects/cli/pkg/common/usage"
	"github.com/solo-io/mesh-projects/cli/pkg/options"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/cluster"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/cluster/register"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/install"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/istio"
	install2 "github.com/solo-io/mesh-projects/cli/pkg/tree/istio/install"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/istio/operator"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/upgrade"
	upgrade_assets "github.com/solo-io/mesh-projects/cli/pkg/tree/upgrade/assets"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/version"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/version/server"
	"github.com/solo-io/mesh-projects/pkg/auth"
	zephyr_discovery "github.com/solo-io/mesh-projects/pkg/clients/zephyr/discovery"
	"github.com/solo-io/mesh-projects/pkg/common/docker"
	"github.com/solo-io/reporting-client/pkg/client"
	"github.com/spf13/cobra"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

// Injectors from wire.go:

func DefaultKubeClientsFactory(masterConfig *rest.Config, writeNamespace string) (*common.KubeClients, error) {
	clientset, err := kubernetes.NewForConfig(masterConfig)
	if err != nil {
		return nil, err
	}
	secretClient := auth.NewSecretClient(clientset)
	serviceAccountClient := auth.NewServiceAccountClient(clientset)
	remoteAuthorityConfigCreator := auth.NewRemoteAuthorityConfigCreator(secretClient, serviceAccountClient)
	rbacClient := auth.RbacClientProvider(clientset)
	remoteAuthorityManager := auth.NewRemoteAuthorityManager(serviceAccountClient, rbacClient)
	clusterAuthorization := auth.NewClusterAuthorization(remoteAuthorityConfigCreator, remoteAuthorityManager)
	secretWriter := common.DefaultSecretWriterProvider(clientset, writeNamespace)
	helmClient := helminstall.DefaultHelmClient()
	installer := install.HelmInstallerProvider(helmClient, clientset)
	kubernetesClusterClient, err := zephyr_discovery.NewGeneratedKubernetesClusterClient(masterConfig)
	if err != nil {
		return nil, err
	}
	kubeClients := common.KubeClientsProvider(clusterAuthorization, secretWriter, installer, kubernetesClusterClient)
	return kubeClients, nil
}

func DefaultClientsFactory(opts *options.Options) (*common.Clients, error) {
	kubeLoader := common_config.DefaultKubeLoaderProvider(opts)
	imageNameParser := docker.NewImageNameParser()
	serverVersionClient := server.DefaultServerVersionClientProvider(opts, kubeLoader, imageNameParser)
	githubAssetClient := upgrade_assets.DefaultGithubAssetClient()
	assetHelper := upgrade_assets.NewAssetHelper(githubAssetClient)
	masterKubeConfigVerifier := common_config.NewMasterKubeConfigVerifier(kubeLoader)
	unstructuredKubeClientFactory := kube.NewUnstructuredKubeClientFactory()
	deploymentClient := server.NewDeploymentClient(kubeLoader, opts)
	installerManifestBuilder := operator.NewInstallerManifestBuilder()
	operatorManagerFactory := operator.NewOperatorManagerFactory()
	istioClients := common.IstioClientsProvider(installerManifestBuilder, operatorManagerFactory)
	clients := common.ClientsProvider(serverVersionClient, assetHelper, masterKubeConfigVerifier, unstructuredKubeClientFactory, deploymentClient, istioClients)
	return clients, nil
}

func InitializeCLI(ctx context.Context, out io.Writer) *cobra.Command {
	optionsOptions := options.NewOptionsProvider()
	client := usage.DefaultUsageReporterProvider()
	kubeClientsFactory := DefaultKubeClientsFactoryProvider()
	clientsFactory := DefaultClientsFactoryProvider()
	kubeLoader := common_config.DefaultKubeLoaderProvider(optionsOptions)
	registrationCmd := register.ClusterRegistrationCmd(ctx, kubeClientsFactory, clientsFactory, optionsOptions, out, kubeLoader)
	clusterCommand := cluster.ClusterRootCmd(registrationCmd)
	versionCommand := version.VersionCmd(out, clientsFactory, optionsOptions)
	imageNameParser := docker.NewImageNameParser()
	fileReader := common.NewDefaultFileReader()
	istioInstallationCmd := install2.BuildIstioInstallationCmd(clientsFactory, optionsOptions, out, kubeLoader, imageNameParser, fileReader)
	istioCommand := istio.IstioRootCmd(istioInstallationCmd, optionsOptions)
	upgradeCommand := upgrade.UpgradeCmd(ctx, optionsOptions, out, clientsFactory)
	installCommand := install.InstallCmd(optionsOptions, kubeClientsFactory, kubeLoader)
	command := cli.BuildCli(ctx, optionsOptions, client, clusterCommand, versionCommand, istioCommand, upgradeCommand, installCommand)
	return command
}

func InitializeCLIWithMocks(ctx context.Context, out io.Writer, usageClient client.Client, kubeClientsFactory common.KubeClientsFactory, clientsFactory common.ClientsFactory, kubeLoader common_config.KubeLoader, imageNameParser docker.ImageNameParser, fileReader common.FileReader) *cobra.Command {
	optionsOptions := options.NewOptionsProvider()
	registrationCmd := register.ClusterRegistrationCmd(ctx, kubeClientsFactory, clientsFactory, optionsOptions, out, kubeLoader)
	clusterCommand := cluster.ClusterRootCmd(registrationCmd)
	versionCommand := version.VersionCmd(out, clientsFactory, optionsOptions)
	istioInstallationCmd := install2.BuildIstioInstallationCmd(clientsFactory, optionsOptions, out, kubeLoader, imageNameParser, fileReader)
	istioCommand := istio.IstioRootCmd(istioInstallationCmd, optionsOptions)
	upgradeCommand := upgrade.UpgradeCmd(ctx, optionsOptions, out, clientsFactory)
	installCommand := install.InstallCmd(optionsOptions, kubeClientsFactory, kubeLoader)
	command := cli.BuildCli(ctx, optionsOptions, usageClient, clusterCommand, versionCommand, istioCommand, upgradeCommand, installCommand)
	return command
}
