// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"
	"io"

	cli "github.com/solo-io/mesh-projects/cli/pkg"
	"github.com/solo-io/mesh-projects/cli/pkg/common"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/version/server"
	"github.com/solo-io/mesh-projects/pkg/auth"
	"github.com/spf13/cobra"
	v1 "k8s.io/client-go/kubernetes/typed/core/v1"
	"k8s.io/client-go/rest"
)

// Injectors from wire.go:

func DefaultClientsFactory(masterConfig *rest.Config, writeNamespace string) (*common.Clients, error) {
	clientFactory := auth.DefaultClientsProvider()
	remoteAuthorityConfigCreator := auth.NewRemoteAuthorityConfigCreator(clientFactory)
	remoteAuthorityManager := auth.NewRemoteAuthorityManager(clientFactory)
	clusterAuthorization := auth.NewClusterAuthorization(remoteAuthorityConfigCreator, remoteAuthorityManager)
	coreV1Client, err := v1.NewForConfig(masterConfig)
	if err != nil {
		return nil, err
	}
	secretWriter := common.DefaultSecretWriterProvider(coreV1Client, writeNamespace)
	kubeLoader := common.DefaultKubeLoaderProvider()
	serverVersionClient := server.DefaultServerVersionClientProvider(writeNamespace)
	clients := common.ClientsProvider(clusterAuthorization, secretWriter, kubeLoader, serverVersionClient)
	return clients, nil
}

func InitializeCLI(ctx context.Context, out io.Writer) *cobra.Command {
	clientsFactory := DefaultClientsFactoryProvider()
	kubeLoader := common.DefaultKubeLoaderProvider()
	fileExistenceChecker := common.DefaultFileExistenceCheckerProvider()
	masterKubeConfigVerifier := common.NewMasterKubeConfigVerifier(kubeLoader, fileExistenceChecker)
	client := common.DefaultUsageReporterProvider()
	command := cli.BuildCli(ctx, clientsFactory, out, masterKubeConfigVerifier, client)
	return command
}
