// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"
	"io"

	cli "github.com/solo-io/mesh-projects/cli/pkg"
	"github.com/solo-io/mesh-projects/cli/pkg/common"
	common_config "github.com/solo-io/mesh-projects/cli/pkg/common/config"
	"github.com/solo-io/mesh-projects/cli/pkg/options"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/cluster"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/cluster/register"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/upgrade"
	upgrade_assets "github.com/solo-io/mesh-projects/cli/pkg/tree/upgrade/assets"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/version"
	"github.com/solo-io/mesh-projects/cli/pkg/tree/version/server"
	"github.com/solo-io/mesh-projects/pkg/auth"
	"github.com/spf13/cobra"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

// Injectors from wire.go:

func DefaultKubeClientsFactory(masterConfig *rest.Config, writeNamespace string) (*common.KubeClients, error) {
	clientset, err := kubernetes.NewForConfig(masterConfig)
	if err != nil {
		return nil, err
	}
	remoteAuthorityConfigCreator := auth.NewRemoteAuthorityConfigCreator(clientset, writeNamespace)
	rbacClient := auth.RbacClientProvider(clientset)
	remoteAuthorityManager := auth.NewRemoteAuthorityManager(clientset, rbacClient, writeNamespace)
	clusterAuthorization := auth.NewClusterAuthorization(remoteAuthorityConfigCreator, remoteAuthorityManager)
	secretWriter := common.DefaultSecretWriterProvider(clientset, writeNamespace)
	kubeClients := common.KubeClientsProvider(clusterAuthorization, secretWriter)
	return kubeClients, nil
}

func DefaultClientsFactory(opts *options.Options) (*common.Clients, error) {
	kubeLoader := common_config.DefaultKubeLoaderProvider(opts)
	serverVersionClient := server.DefaultServerVersionClientProvider(opts, kubeLoader)
	githubAssetClient := upgrade_assets.DefaultGithubAssetClient()
	assetHelper := upgrade_assets.NewAssetHelper(githubAssetClient)
	masterKubeConfigVerifier := common_config.NewMasterKubeConfigVerifier(kubeLoader)
	clients := common.ClientsProvider(serverVersionClient, assetHelper, kubeLoader, masterKubeConfigVerifier)
	return clients, nil
}

func InitializeCLI(ctx context.Context, out io.Writer) *cobra.Command {
	optionsOptions := options.NewOptionsProvider()
	client := common.DefaultUsageReporterProvider()
	kubeClientsFactory := DefaultKubeClientsFactoryProvider()
	clientsFactory := DefaultClientsFactoryProvider()
	registrationCmd := register.ClusterRegistrationCmd(kubeClientsFactory, clientsFactory, optionsOptions, out)
	clusterCommand := cluster.ClusterRootCmd(registrationCmd)
	versionCommand := version.VersionCmd(out, clientsFactory, optionsOptions)
	upgradeCommand := upgrade.UpgradeCmd(ctx, optionsOptions, out, clientsFactory)
	command := cli.BuildCli(ctx, optionsOptions, client, clusterCommand, versionCommand, upgradeCommand)
	return command
}
