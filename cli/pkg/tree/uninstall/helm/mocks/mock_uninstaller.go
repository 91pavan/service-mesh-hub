// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_helm_uninstall is a generated GoMock package.
package mock_helm_uninstall

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	release "helm.sh/helm/v3/pkg/release"
)

// MockUninstaller is a mock of Uninstaller interface.
type MockUninstaller struct {
	ctrl     *gomock.Controller
	recorder *MockUninstallerMockRecorder
}

// MockUninstallerMockRecorder is the mock recorder for MockUninstaller.
type MockUninstallerMockRecorder struct {
	mock *MockUninstaller
}

// NewMockUninstaller creates a new mock instance.
func NewMockUninstaller(ctrl *gomock.Controller) *MockUninstaller {
	mock := &MockUninstaller{ctrl: ctrl}
	mock.recorder = &MockUninstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUninstaller) EXPECT() *MockUninstallerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUninstaller) Run(releaseName string) (*release.UninstallReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", releaseName)
	ret0, _ := ret[0].(*release.UninstallReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockUninstallerMockRecorder) Run(releaseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUninstaller)(nil).Run), releaseName)
}
