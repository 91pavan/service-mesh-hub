// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	kubernetes_core "github.com/solo-io/mesh-projects/pkg/clients/kubernetes/core"
	zephyr_security "github.com/solo-io/mesh-projects/pkg/clients/zephyr/security"
	"github.com/solo-io/mesh-projects/pkg/security/certgen"
	mc_wire "github.com/solo-io/mesh-projects/services/common/multicluster/wire"
	csr_agent_controller "github.com/solo-io/mesh-projects/services/csr-agent/pkg/controller"
)

// Injectors from wire.go:

func InitializeCsrAgent(ctx context.Context) (CsrAgentContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return CsrAgentContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return CsrAgentContext{}, err
	}
	client := mc_wire.DynamicClientProvider(asyncManager)
	meshGroupCertificateSigningRequestClient := zephyr_security.NewMeshGroupCertificateSigningRequestClient(client)
	secretsClient := kubernetes_core.NewSecretsClient(client)
	signer := certgen.NewSigner()
	certClient := csr_agent_controller.NewCertClient(secretsClient, signer)
	meshGroupCertificateSigningRequestProcessor := csr_agent_controller.NewCsrAgentIstioProcessor(meshGroupCertificateSigningRequestClient, secretsClient, certClient, signer)
	predicate := csr_agent_controller.CsrAgentPredicateProvider(ctx)
	meshGroupCertificateSigningRequestEventHandler := csr_agent_controller.NewCsrAgentEventHandler(ctx, meshGroupCertificateSigningRequestClient, meshGroupCertificateSigningRequestProcessor, predicate)
	meshGroupCertificateSigningRequestController, err := csr_agent_controller.CsrControllerProviderLocal(asyncManager)
	if err != nil {
		return CsrAgentContext{}, err
	}
	csrAgentContext := CsrAgentContextProvider(ctx, asyncManager, meshGroupCertificateSigningRequestEventHandler, meshGroupCertificateSigningRequestController)
	return csrAgentContext, nil
}
