// Code generated by MockGen. DO NOT EDIT.
// Source: ./mesh_workload_scanner.go

// Package mock_mesh_workload is a generated GoMock package.
package mock_mesh_workload

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// MockMeshWorkloadScanner is a mock of MeshWorkloadScanner interface
type MockMeshWorkloadScanner struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadScannerMockRecorder
}

// MockMeshWorkloadScannerMockRecorder is the mock recorder for MockMeshWorkloadScanner
type MockMeshWorkloadScannerMockRecorder struct {
	mock *MockMeshWorkloadScanner
}

// NewMockMeshWorkloadScanner creates a new mock instance
func NewMockMeshWorkloadScanner(ctrl *gomock.Controller) *MockMeshWorkloadScanner {
	mock := &MockMeshWorkloadScanner{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadScanner) EXPECT() *MockMeshWorkloadScannerMockRecorder {
	return m.recorder
}

// ScanPod mocks base method
func (m *MockMeshWorkloadScanner) ScanPod(arg0 context.Context, arg1 *v1.Pod) (*v1alpha1.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPod", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanPod indicates an expected call of ScanPod
func (mr *MockMeshWorkloadScannerMockRecorder) ScanPod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPod", reflect.TypeOf((*MockMeshWorkloadScanner)(nil).ScanPod), arg0, arg1)
}
