// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	"github.com/solo-io/mesh-projects/pkg/common/docker"
	"github.com/solo-io/mesh-projects/services/common/multicluster/wire"
	"github.com/solo-io/mesh-projects/services/mesh-discovery/pkg/discovery/consul"
	"github.com/solo-io/mesh-projects/services/mesh-discovery/pkg/discovery/istio"
	"github.com/solo-io/mesh-projects/services/mesh-discovery/pkg/discovery/linkerd"
)

// Injectors from wire.go:

func InitializeMeshDiscovery(ctx context.Context) (MeshDiscoveryContext, error) {
	config, err := wire.LocalKubeConfigProvider()
	if err != nil {
		return MeshDiscoveryContext{}, err
	}
	asyncManager, err := wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return MeshDiscoveryContext{}, err
	}
	asyncManagerController := wire.AsyncManagerControllerProvider(ctx, asyncManager)
	asyncManagerStartOptionsFunc := wire.LocalManagerStarterProvider(asyncManagerController)
	multiClusterDependencies := wire.MulticlusterDependenciesProvider(ctx, asyncManager, asyncManagerController, asyncManagerStartOptionsFunc)
	imageNameParser := docker.NewImageNameParser()
	istioMeshFinder := istio.NewIstioMeshFinder(imageNameParser)
	consulConnectInstallationFinder := consul.NewConsulConnectInstallationFinder(imageNameParser)
	consulConnectMeshFinder := consul.NewConsulMeshFinder(imageNameParser, consulConnectInstallationFinder)
	linkerdMeshFinder := linkerd.NewLinkerdMeshFinder(imageNameParser)
	meshDiscoveryContext := MeshDiscoveryContextProvider(multiClusterDependencies, istioMeshFinder, consulConnectMeshFinder, linkerdMeshFinder)
	return meshDiscoveryContext, nil
}
