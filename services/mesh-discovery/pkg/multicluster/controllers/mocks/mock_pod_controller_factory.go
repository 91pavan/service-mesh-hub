// Code generated by MockGen. DO NOT EDIT.
// Source: ./pod_controller_factory.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/mesh-projects/services/common/cluster/core/v1/controller"
	mc_manager "github.com/solo-io/mesh-projects/services/common/multicluster/manager"
)

// MockPodControllerFactory is a mock of PodControllerFactory interface
type MockPodControllerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPodControllerFactoryMockRecorder
}

// MockPodControllerFactoryMockRecorder is the mock recorder for MockPodControllerFactory
type MockPodControllerFactoryMockRecorder struct {
	mock *MockPodControllerFactory
}

// NewMockPodControllerFactory creates a new mock instance
func NewMockPodControllerFactory(ctrl *gomock.Controller) *MockPodControllerFactory {
	mock := &MockPodControllerFactory{ctrl: ctrl}
	mock.recorder = &MockPodControllerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodControllerFactory) EXPECT() *MockPodControllerFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockPodControllerFactory) Build(mgr mc_manager.AsyncManager, clusterName string) (controller.PodController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller.PodController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockPodControllerFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockPodControllerFactory)(nil).Build), mgr, clusterName)
}
