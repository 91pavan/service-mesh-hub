// Code generated by MockGen. DO NOT EDIT.
// Source: ./mesh_scanner.go

// Package mock_mesh is a generated GoMock package.
package mock_mesh

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1"
	v1 "k8s.io/api/apps/v1"
)

// MockMeshScanner is a mock of MeshScanner interface
type MockMeshScanner struct {
	ctrl     *gomock.Controller
	recorder *MockMeshScannerMockRecorder
}

// MockMeshScannerMockRecorder is the mock recorder for MockMeshScanner
type MockMeshScannerMockRecorder struct {
	mock *MockMeshScanner
}

// NewMockMeshScanner creates a new mock instance
func NewMockMeshScanner(ctrl *gomock.Controller) *MockMeshScanner {
	mock := &MockMeshScanner{ctrl: ctrl}
	mock.recorder = &MockMeshScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshScanner) EXPECT() *MockMeshScannerMockRecorder {
	return m.recorder
}

// ScanDeployment mocks base method
func (m *MockMeshScanner) ScanDeployment(arg0 context.Context, arg1 *v1.Deployment) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanDeployment indicates an expected call of ScanDeployment
func (mr *MockMeshScannerMockRecorder) ScanDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDeployment", reflect.TypeOf((*MockMeshScanner)(nil).ScanDeployment), arg0, arg1)
}
