// Code generated by MockGen. DO NOT EDIT.
// Source: ./mesh_finder.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1"
	v1 "k8s.io/api/apps/v1"
)

// MockMeshFinder is a mock of MeshFinder interface
type MockMeshFinder struct {
	ctrl     *gomock.Controller
	recorder *MockMeshFinderMockRecorder
}

// MockMeshFinderMockRecorder is the mock recorder for MockMeshFinder
type MockMeshFinderMockRecorder struct {
	mock *MockMeshFinder
}

// NewMockMeshFinder creates a new mock instance
func NewMockMeshFinder(ctrl *gomock.Controller) *MockMeshFinder {
	mock := &MockMeshFinder{ctrl: ctrl}
	mock.recorder = &MockMeshFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshFinder) EXPECT() *MockMeshFinderMockRecorder {
	return m.recorder
}

// ScanDeployment mocks base method
func (m *MockMeshFinder) ScanDeployment(arg0 context.Context, arg1 *v1.Deployment) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanDeployment indicates an expected call of ScanDeployment
func (mr *MockMeshFinderMockRecorder) ScanDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDeployment", reflect.TypeOf((*MockMeshFinder)(nil).ScanDeployment), arg0, arg1)
}
