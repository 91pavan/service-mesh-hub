// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_cert_signer is a generated GoMock package.
package mock_cert_signer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1"
	types0 "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1/types"
	cert_secrets "github.com/solo-io/mesh-projects/pkg/security/secrets"
)

// MockMeshGroupCertClient is a mock of MeshGroupCertClient interface
type MockMeshGroupCertClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshGroupCertClientMockRecorder
}

// MockMeshGroupCertClientMockRecorder is the mock recorder for MockMeshGroupCertClient
type MockMeshGroupCertClientMockRecorder struct {
	mock *MockMeshGroupCertClient
}

// NewMockMeshGroupCertClient creates a new mock instance
func NewMockMeshGroupCertClient(ctrl *gomock.Controller) *MockMeshGroupCertClient {
	mock := &MockMeshGroupCertClient{ctrl: ctrl}
	mock.recorder = &MockMeshGroupCertClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshGroupCertClient) EXPECT() *MockMeshGroupCertClientMockRecorder {
	return m.recorder
}

// GetRootCaBundle mocks base method
func (m *MockMeshGroupCertClient) GetRootCaBundle(ctx context.Context, meshRef *types.ResourceRef) (*cert_secrets.RootCaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCaBundle", ctx, meshRef)
	ret0, _ := ret[0].(*cert_secrets.RootCaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCaBundle indicates an expected call of GetRootCaBundle
func (mr *MockMeshGroupCertClientMockRecorder) GetRootCaBundle(ctx, meshRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCaBundle", reflect.TypeOf((*MockMeshGroupCertClient)(nil).GetRootCaBundle), ctx, meshRef)
}

// MockMeshGroupCSRSigner is a mock of MeshGroupCSRSigner interface
type MockMeshGroupCSRSigner struct {
	ctrl     *gomock.Controller
	recorder *MockMeshGroupCSRSignerMockRecorder
}

// MockMeshGroupCSRSignerMockRecorder is the mock recorder for MockMeshGroupCSRSigner
type MockMeshGroupCSRSignerMockRecorder struct {
	mock *MockMeshGroupCSRSigner
}

// NewMockMeshGroupCSRSigner creates a new mock instance
func NewMockMeshGroupCSRSigner(ctrl *gomock.Controller) *MockMeshGroupCSRSigner {
	mock := &MockMeshGroupCSRSigner{ctrl: ctrl}
	mock.recorder = &MockMeshGroupCSRSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshGroupCSRSigner) EXPECT() *MockMeshGroupCSRSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method
func (m *MockMeshGroupCSRSigner) Sign(ctx context.Context, obj *v1alpha1.MeshGroupCertificateSigningRequest) *types0.MeshGroupCertificateSigningRequestStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, obj)
	ret0, _ := ret[0].(*types0.MeshGroupCertificateSigningRequestStatus)
	return ret0
}

// Sign indicates an expected call of Sign
func (mr *MockMeshGroupCSRSignerMockRecorder) Sign(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockMeshGroupCSRSigner)(nil).Sign), ctx, obj)
}
