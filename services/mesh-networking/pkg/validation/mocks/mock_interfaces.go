// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_group_validation is a generated GoMock package.
package mock_group_validation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	v1alpha10 "github.com/solo-io/mesh-projects/pkg/api/networking.zephyr.solo.io/v1alpha1"
)

// MockGroupMeshFinder is a mock of GroupMeshFinder interface
type MockGroupMeshFinder struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMeshFinderMockRecorder
}

// MockGroupMeshFinderMockRecorder is the mock recorder for MockGroupMeshFinder
type MockGroupMeshFinderMockRecorder struct {
	mock *MockGroupMeshFinder
}

// NewMockGroupMeshFinder creates a new mock instance
func NewMockGroupMeshFinder(ctrl *gomock.Controller) *MockGroupMeshFinder {
	mock := &MockGroupMeshFinder{ctrl: ctrl}
	mock.recorder = &MockGroupMeshFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupMeshFinder) EXPECT() *MockGroupMeshFinderMockRecorder {
	return m.recorder
}

// GetMeshesForGroup mocks base method
func (m *MockGroupMeshFinder) GetMeshesForGroup(ctx context.Context, mg *v1alpha10.MeshGroup) ([]*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshesForGroup", ctx, mg)
	ret0, _ := ret[0].([]*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshesForGroup indicates an expected call of GetMeshesForGroup
func (mr *MockGroupMeshFinderMockRecorder) GetMeshesForGroup(ctx, mg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshesForGroup", reflect.TypeOf((*MockGroupMeshFinder)(nil).GetMeshesForGroup), ctx, mg)
}
