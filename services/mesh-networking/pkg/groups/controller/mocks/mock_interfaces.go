// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_group_controller is a generated GoMock package.
package mock_group_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/networking.zephyr.solo.io/v1alpha1"
	types "github.com/solo-io/mesh-projects/pkg/api/networking.zephyr.solo.io/v1alpha1/types"
)

// MockMeshGroupValidator is a mock of MeshGroupValidator interface
type MockMeshGroupValidator struct {
	ctrl     *gomock.Controller
	recorder *MockMeshGroupValidatorMockRecorder
}

// MockMeshGroupValidatorMockRecorder is the mock recorder for MockMeshGroupValidator
type MockMeshGroupValidatorMockRecorder struct {
	mock *MockMeshGroupValidator
}

// NewMockMeshGroupValidator creates a new mock instance
func NewMockMeshGroupValidator(ctrl *gomock.Controller) *MockMeshGroupValidator {
	mock := &MockMeshGroupValidator{ctrl: ctrl}
	mock.recorder = &MockMeshGroupValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshGroupValidator) EXPECT() *MockMeshGroupValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockMeshGroupValidator) Validate(ctx context.Context, mg *v1alpha1.MeshGroup) (types.MeshGroupStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, mg)
	ret0, _ := ret[0].(types.MeshGroupStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockMeshGroupValidatorMockRecorder) Validate(ctx, mg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMeshGroupValidator)(nil).Validate), ctx, mg)
}
