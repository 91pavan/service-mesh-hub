// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_selector is a generated GoMock package.
package mock_selector

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/solo-io/mesh-projects/pkg/api/core.zephyr.solo.io/v1alpha1/types"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/discovery.zephyr.solo.io/v1alpha1"
)

// MockMeshServiceSelector is a mock of MeshServiceSelector interface.
type MockMeshServiceSelector struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceSelectorMockRecorder
}

// MockMeshServiceSelectorMockRecorder is the mock recorder for MockMeshServiceSelector.
type MockMeshServiceSelectorMockRecorder struct {
	mock *MockMeshServiceSelector
}

// NewMockMeshServiceSelector creates a new mock instance.
func NewMockMeshServiceSelector(ctrl *gomock.Controller) *MockMeshServiceSelector {
	mock := &MockMeshServiceSelector{ctrl: ctrl}
	mock.recorder = &MockMeshServiceSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceSelector) EXPECT() *MockMeshServiceSelectorMockRecorder {
	return m.recorder
}

// GetMatchingMeshServices mocks base method.
func (m *MockMeshServiceSelector) GetMatchingMeshServices(ctx context.Context, selector *types.ServiceSelector) ([]*v1alpha1.MeshService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingMeshServices", ctx, selector)
	ret0, _ := ret[0].([]*v1alpha1.MeshService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingMeshServices indicates an expected call of GetMatchingMeshServices.
func (mr *MockMeshServiceSelectorMockRecorder) GetMatchingMeshServices(ctx, selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingMeshServices", reflect.TypeOf((*MockMeshServiceSelector)(nil).GetMatchingMeshServices), ctx, selector)
}

// GetBackingMeshService mocks base method.
func (m *MockMeshServiceSelector) GetBackingMeshService(ctx context.Context, kubeServiceName, kubeServiceNamespace, kubeServiceCluster string) (*v1alpha1.MeshService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackingMeshService", ctx, kubeServiceName, kubeServiceNamespace, kubeServiceCluster)
	ret0, _ := ret[0].(*v1alpha1.MeshService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackingMeshService indicates an expected call of GetBackingMeshService.
func (mr *MockMeshServiceSelectorMockRecorder) GetBackingMeshService(ctx, kubeServiceName, kubeServiceNamespace, kubeServiceCluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackingMeshService", reflect.TypeOf((*MockMeshServiceSelector)(nil).GetBackingMeshService), ctx, kubeServiceName, kubeServiceNamespace, kubeServiceCluster)
}
