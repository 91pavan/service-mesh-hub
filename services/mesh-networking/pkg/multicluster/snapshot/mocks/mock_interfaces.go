// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_snapshot is a generated GoMock package.
package mock_snapshot

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	snapshot "github.com/solo-io/mesh-projects/services/mesh-networking/pkg/multicluster/snapshot"
)

// MockSnapshotValidator is a mock of SnapshotValidator interface
type MockSnapshotValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotValidatorMockRecorder
}

// MockSnapshotValidatorMockRecorder is the mock recorder for MockSnapshotValidator
type MockSnapshotValidatorMockRecorder struct {
	mock *MockSnapshotValidator
}

// NewMockSnapshotValidator creates a new mock instance
func NewMockSnapshotValidator(ctrl *gomock.Controller) *MockSnapshotValidator {
	mock := &MockSnapshotValidator{ctrl: ctrl}
	mock.recorder = &MockSnapshotValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotValidator) EXPECT() *MockSnapshotValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockSnapshotValidator) Validate(arg0 snapshot.MeshNetworkingSnapshot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockSnapshotValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSnapshotValidator)(nil).Validate), arg0)
}

// MockNetworkingSnapshotGenerator is a mock of NetworkingSnapshotGenerator interface
type MockNetworkingSnapshotGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingSnapshotGeneratorMockRecorder
}

// MockNetworkingSnapshotGeneratorMockRecorder is the mock recorder for MockNetworkingSnapshotGenerator
type MockNetworkingSnapshotGeneratorMockRecorder struct {
	mock *MockNetworkingSnapshotGenerator
}

// NewMockNetworkingSnapshotGenerator creates a new mock instance
func NewMockNetworkingSnapshotGenerator(ctrl *gomock.Controller) *MockNetworkingSnapshotGenerator {
	mock := &MockNetworkingSnapshotGenerator{ctrl: ctrl}
	mock.recorder = &MockNetworkingSnapshotGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkingSnapshotGenerator) EXPECT() *MockNetworkingSnapshotGeneratorMockRecorder {
	return m.recorder
}

// RegisterListener mocks base method
func (m *MockNetworkingSnapshotGenerator) RegisterListener(arg0 snapshot.SnapshotListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterListener", arg0)
}

// RegisterListener indicates an expected call of RegisterListener
func (mr *MockNetworkingSnapshotGeneratorMockRecorder) RegisterListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockNetworkingSnapshotGenerator)(nil).RegisterListener), arg0)
}

// StartPushingSnapshots mocks base method
func (m *MockNetworkingSnapshotGenerator) StartPushingSnapshots(ctx context.Context, snapshotFrequency time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartPushingSnapshots", ctx, snapshotFrequency)
}

// StartPushingSnapshots indicates an expected call of StartPushingSnapshots
func (mr *MockNetworkingSnapshotGeneratorMockRecorder) StartPushingSnapshots(ctx, snapshotFrequency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPushingSnapshots", reflect.TypeOf((*MockNetworkingSnapshotGenerator)(nil).StartPushingSnapshots), ctx, snapshotFrequency)
}
