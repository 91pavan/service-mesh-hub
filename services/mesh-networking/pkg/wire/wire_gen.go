// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	discovery_core "github.com/solo-io/mesh-projects/pkg/clients/zephyr/discovery"
	mc_wire "github.com/solo-io/mesh-projects/services/common/multicluster/wire"
	group_controller "github.com/solo-io/mesh-projects/services/mesh-networking/pkg/groups/controller"
	networking_multicluster "github.com/solo-io/mesh-projects/services/mesh-networking/pkg/multicluster"
)

// Injectors from wire.go:

func InitializeMeshNetworking(ctx context.Context) (MeshNetworkingContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	asyncManagerController := mc_wire.AsyncManagerControllerProvider(ctx, asyncManager)
	asyncManagerStartOptionsFunc := mc_wire.LocalManagerStarterProvider(asyncManagerController)
	multiClusterDependencies := mc_wire.MulticlusterDependenciesProvider(ctx, asyncManager, asyncManagerController, asyncManagerStartOptionsFunc)
	client := mc_wire.DynamicClientProvider(asyncManager)
	meshClient := discovery_core.NewMeshClient(client)
	meshGroupValidator := group_controller.MeshGroupValidatorProvider(meshClient)
	meshGroupEventHandler := group_controller.MeshGroupEventHandlerProvider(ctx, meshGroupValidator)
	csrControllerFactory := networking_multicluster.NewCSRControllerFactory()
	asyncManagerHandler, err := networking_multicluster.NewMeshNetworkingClusterHandler(asyncManager, csrControllerFactory)
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	meshNetworkingContext := MeshNetworkingContextProvider(multiClusterDependencies, meshGroupEventHandler, asyncManagerHandler)
	return meshNetworkingContext, nil
}
