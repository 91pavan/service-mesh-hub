// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	istio_networking "github.com/solo-io/mesh-projects/pkg/clients/istio/networking"
	zephyr_discovery "github.com/solo-io/mesh-projects/pkg/clients/zephyr/discovery"
	zephyr_networking "github.com/solo-io/mesh-projects/pkg/clients/zephyr/networking"
	mc_wire "github.com/solo-io/mesh-projects/services/common/multicluster/wire"
	networking_multicluster "github.com/solo-io/mesh-projects/services/mesh-networking/pkg/multicluster"
	traffic_policy_translator "github.com/solo-io/mesh-projects/services/mesh-networking/pkg/routing/traffic-policy-translator"
	istio_translator "github.com/solo-io/mesh-projects/services/mesh-networking/pkg/routing/traffic-policy-translator/istio-translator"
	"github.com/solo-io/mesh-projects/services/mesh-networking/pkg/routing/traffic-policy-translator/preprocess"
)

// Injectors from wire.go:

func InitializeMeshNetworking(ctx context.Context) (MeshNetworkingContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	asyncManagerController := mc_wire.AsyncManagerControllerProvider(ctx, asyncManager)
	asyncManagerStartOptionsFunc := mc_wire.LocalManagerStarterProvider(asyncManagerController)
	multiClusterDependencies := mc_wire.MulticlusterDependenciesProvider(ctx, asyncManager, asyncManagerController, asyncManagerStartOptionsFunc)
	client := mc_wire.DynamicClientProvider(asyncManager)
	meshClient := zephyr_discovery.NewMeshClient(client)
	meshGroupValidator := MeshGroupValidatorProvider(meshClient)
	meshGroupEventHandler := MeshGroupEventHandlerProvider(ctx, meshGroupValidator)
	meshGroupCertificateSigningRequestControllerFactory := networking_multicluster.NewMeshGroupCertificateSigningRequestControllerFactory()
	asyncManagerHandler, err := networking_multicluster.NewMeshNetworkingClusterHandler(ctx, asyncManager, meshGroupCertificateSigningRequestControllerFactory)
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	meshServiceClient := zephyr_discovery.NewMeshServiceClient(client)
	meshServiceSelector := preprocess.NewMeshServiceSelector(meshServiceClient)
	trafficPolicyClient := zephyr_networking.NewTrafficPolicyClient(client)
	trafficPolicyMerger := preprocess.NewTrafficPolicyMerger(meshServiceSelector, meshClient, trafficPolicyClient)
	trafficPolicyValidator := preprocess.NewTrafficPolicyValidator(meshServiceClient, meshServiceSelector)
	trafficPolicyPreprocessor := preprocess.NewTrafficPolicyPreprocessor(meshServiceSelector, trafficPolicyMerger, trafficPolicyValidator)
	dynamicClientGetter := mc_wire.DynamicClientGetterProvider(asyncManagerController)
	virtualServiceClientFactory := istio_networking.VirtualServiceClientFactoryProvider()
	istioTranslator := istio_translator.NewIstioTrafficPolicyTranslator(dynamicClientGetter, meshClient, meshServiceClient, meshServiceSelector, virtualServiceClientFactory)
	v := TrafficPolicyMeshTranslatorsProvider(istioTranslator)
	trafficPolicyController, err := LocalTrafficPolicyControllerProvider(asyncManager)
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	meshServiceController, err := LocalMeshServiceControllerProvider(asyncManager)
	if err != nil {
		return MeshNetworkingContext{}, err
	}
	trafficPolicyTranslator := traffic_policy_translator.NewTrafficPolicyTranslator(ctx, trafficPolicyPreprocessor, v, meshClient, meshServiceClient, trafficPolicyClient, trafficPolicyController, meshServiceController)
	meshNetworkingContext := MeshNetworkingContextProvider(multiClusterDependencies, meshGroupEventHandler, asyncManagerHandler, trafficPolicyTranslator)
	return meshNetworkingContext, nil
}
