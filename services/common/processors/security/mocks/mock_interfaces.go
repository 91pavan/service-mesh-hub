// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_security_processors is a generated GoMock package.
package mock_security_processors

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1"
	types "github.com/solo-io/mesh-projects/pkg/api/security.zephyr.solo.io/v1alpha1/types"
)

// MockMeshGroupCertificateSigningRequestProcessor is a mock of MeshGroupCertificateSigningRequestProcessor interface
type MockMeshGroupCertificateSigningRequestProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMeshGroupCertificateSigningRequestProcessorMockRecorder
}

// MockMeshGroupCertificateSigningRequestProcessorMockRecorder is the mock recorder for MockMeshGroupCertificateSigningRequestProcessor
type MockMeshGroupCertificateSigningRequestProcessorMockRecorder struct {
	mock *MockMeshGroupCertificateSigningRequestProcessor
}

// NewMockMeshGroupCertificateSigningRequestProcessor creates a new mock instance
func NewMockMeshGroupCertificateSigningRequestProcessor(ctrl *gomock.Controller) *MockMeshGroupCertificateSigningRequestProcessor {
	mock := &MockMeshGroupCertificateSigningRequestProcessor{ctrl: ctrl}
	mock.recorder = &MockMeshGroupCertificateSigningRequestProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshGroupCertificateSigningRequestProcessor) EXPECT() *MockMeshGroupCertificateSigningRequestProcessorMockRecorder {
	return m.recorder
}

// ProcessCreate mocks base method
func (m *MockMeshGroupCertificateSigningRequestProcessor) ProcessCreate(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest) types.MeshGroupCertificateSigningRequestStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessCreate", ctx, csr)
	ret0, _ := ret[0].(types.MeshGroupCertificateSigningRequestStatus)
	return ret0
}

// ProcessCreate indicates an expected call of ProcessCreate
func (mr *MockMeshGroupCertificateSigningRequestProcessorMockRecorder) ProcessCreate(ctx, csr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCreate", reflect.TypeOf((*MockMeshGroupCertificateSigningRequestProcessor)(nil).ProcessCreate), ctx, csr)
}

// ProcessUpdate mocks base method
func (m *MockMeshGroupCertificateSigningRequestProcessor) ProcessUpdate(ctx context.Context, old, new *v1alpha1.MeshGroupCertificateSigningRequest) types.MeshGroupCertificateSigningRequestStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessUpdate", ctx, old, new)
	ret0, _ := ret[0].(types.MeshGroupCertificateSigningRequestStatus)
	return ret0
}

// ProcessUpdate indicates an expected call of ProcessUpdate
func (mr *MockMeshGroupCertificateSigningRequestProcessorMockRecorder) ProcessUpdate(ctx, old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessUpdate", reflect.TypeOf((*MockMeshGroupCertificateSigningRequestProcessor)(nil).ProcessUpdate), ctx, old, new)
}

// ProcessDelete mocks base method
func (m *MockMeshGroupCertificateSigningRequestProcessor) ProcessDelete(ctx context.Context, csr *v1alpha1.MeshGroupCertificateSigningRequest) types.MeshGroupCertificateSigningRequestStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDelete", ctx, csr)
	ret0, _ := ret[0].(types.MeshGroupCertificateSigningRequestStatus)
	return ret0
}

// ProcessDelete indicates an expected call of ProcessDelete
func (mr *MockMeshGroupCertificateSigningRequestProcessorMockRecorder) ProcessDelete(ctx, csr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDelete", reflect.TypeOf((*MockMeshGroupCertificateSigningRequestProcessor)(nil).ProcessDelete), ctx, csr)
}
