// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package setup

import (
	"context"

	"github.com/solo-io/go-utils/configutils"
	"github.com/solo-io/go-utils/envutils"
	v1 "github.com/solo-io/mesh-projects/pkg/api/v1"
	"github.com/solo-io/mesh-projects/services/internal/kube"
	"github.com/solo-io/mesh-projects/services/mesh-bridge/pkg/setup/config"
	"github.com/solo-io/mesh-projects/services/mesh-bridge/pkg/syncer"
	"github.com/solo-io/mesh-projects/services/mesh-bridge/pkg/translator"
)

// Injectors from wire.go:

func MustInitializeMeshBridge(ctx context.Context) (LoopSet, error) {
	restConfig := kube.MustGetKubeConfig(ctx)
	string2 := envutils.MustGetPodNamespace(ctx)
	kubernetesInterface := kube.MustGetClient(ctx, restConfig)
	configMapClient := configutils.NewConfigMapClient(kubernetesInterface)
	operatorConfig, err := config.GetOperatorConfig(ctx, configMapClient, string2)
	if err != nil {
		return LoopSet{}, err
	}
	initialSettings := config.GetInitialSettings(string2, operatorConfig)
	meshBridgeClient := config.MustGetMeshBridgeClient(ctx, restConfig, initialSettings)
	networkBridgeEmitter := v1.NewNetworkBridgeEmitter(meshBridgeClient)
	networkBridgeSnapshotEmitter := NewNetworkBridgeSnapshotEmitter(networkBridgeEmitter)
	clientSet := config.MustGetClientSet(ctx, restConfig, initialSettings)
	translatorTranslator := translator.NewMeshBridgeTranslator()
	networkBridgeSyncer := syncer.NewMeshBridgeSyncer(clientSet, translatorTranslator)
	eventLoop := v1.NewNetworkBridgeEventLoop(networkBridgeSnapshotEmitter, networkBridgeSyncer)
	watchOpts := config.GetWatchOpts(ctx, initialSettings)
	v := config.GetWatchNamespaces(ctx, initialSettings)
	loopSet := NewLoopSet(eventLoop, watchOpts, v)
	return loopSet, nil
}
