{{/* NOTE: ensure source code comment remains up-to-date */}}
// source: codegen/custom/appmesh/appmesh_snapshot.gotmpl

package appmesh

import (
    "context"
    "encoding/json"

    appmesh_aws_solo_io_v1alpha1 "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.aws.solo.io/v1alpha1"
    appmesh_aws_solo_io_v1alpha1_sets "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.aws.solo.io/v1alpha1/sets"
    "github.com/solo-io/go-utils/contextutils"
    "github.com/solo-io/skv2/contrib/pkg/sets"
)

// the snapshot of output resources produced by a translation
type Snapshot interface {

{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
    // return the set of {{ $resource }}s with a given set of labels
    {{ $resource }}s() appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set
{{- end }}

    // return the set of Meshes the snapshot is built for
    Meshes() []string

    // serialize the entire snapshot as JSON
    MarshalJSON() ([]byte, error)
}

type snapshot struct {
{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
    {{ $lowercaseResource }}s    appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set
{{- end }}
    meshes          []string
}

func NewSnapshot(
{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
        {{ $lowercaseResource }}s appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set,
{{- end }}
        meshes ...string, // the set of meshes to which to apply the snapshot
) Snapshot {
    return &snapshot{
{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
        {{ $lowercaseResource }}s:    {{ $lowercaseResource }}s,
{{- end }}
        meshes:          meshes,
    }
}

{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}

func (s snapshot) {{ $resource }}s() appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set {
    return s.{{ $lowercaseResource }}s
}
{{- end }}

func (s snapshot) Meshes() []string {
    return s.meshes
}

func (s snapshot) MarshalJSON() ([]byte, error) {
    snapshotMap := map[string]interface{}{"meshes": s.meshes}

{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
    snapshotMap["{{ $lowercaseResource }}s"] = s.{{ $lowercaseResource }}s.List()
{{- end }}

    return json.Marshal(snapshotMap)
}

type builder struct {
    ctx    context.Context
    meshes []string

{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
    {{ $lowercaseResource }}s    appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set
{{- end }}
}

func NewBuilder(ctx context.Context) *builder {
    return &builder{
        ctx:  ctx,

{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
        {{ $lowercaseResource }}s:    appmesh_aws_solo_io_v1alpha1_sets.New{{ $resource }}Set(),
{{- end }}
    }
}

// the output Builder uses a builder pattern to allow
// iteratively collecting outputs before producing a final snapshot
type Builder interface {
{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}

    // add {{ $resource }}s to the collected outputs
    Add{{ $resource }}s({{ $lowercaseResource }}s ...*appmesh_aws_solo_io_v1alpha1.{{ $resource }})

    // get the collected {{ $resource }}s
    Get{{ $resource }}s() appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set
{{- end }}

    // build the collected outputs into a snapshot
    BuildSnapshot() Snapshot

    // add a mesh to the collected meshes.
    // this can be used to collect meshes for use with MultiMesh snapshots.
    AddMesh(mesh string)
}

{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}

func (b *builder) Add{{ $resource }}s({{ $lowercaseResource }}s ...*appmesh_aws_solo_io_v1alpha1.{{ $resource }}) {
    for _, obj := range {{ $lowercaseResource }}s {
        if obj == nil {
            continue
        }
        contextutils.LoggerFrom(b.ctx).Debugf("added output {{ $resource }} %v", sets.Key(obj))
        b.{{ $lowercaseResource }}s.Insert(obj)
    }
}

func (b *builder) Get{{ $resource }}s() appmesh_aws_solo_io_v1alpha1_sets.{{ $resource }}Set {
    return b.{{ $lowercaseResource }}s
}
{{- end }}

func (b *builder) BuildSnapshot() Snapshot {
    return NewSnapshot(
{{- range $resource := appmesh_resources }}
{{- $lowercaseResource := lower_camel $resource }}
        b.{{ $lowercaseResource }}s,
{{- end }}
        b.meshes...,
    )
}

func (b *builder) AddMesh(mesh string) {
    b.meshes = append(b.meshes, mesh)
}
